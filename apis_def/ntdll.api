[_snprintf]
1=char *Dest
2=size_t Count
3=char *Format
4=...
ParamCount=4
@=_snprintf(char *Dest, size_t Count, char *Format, ...);
[_snwprintf]
1=wchar_t *Dest
2=size_t Count
3=wchar_t *Format
4=...
ParamCount=4
@=_snwprintf(wchar_t *Dest, size_t Count, wchar_t *Format, ...);
[_vsnprintf]
1=char *Dest
2=size_t Count
3=char *Format
4=va_list Args
ParamCount=4
@=_vsnprintf(char *Dest, size_t Count, char *Format, va_list Args);
[_vsnwprintf]
1=wchar_t *Dest
2=size_t Count
3=wchar_t *Format
4=va_list Args
ParamCount=4
@=_vsnwprintf(wchar_t *Dest, size_t Count, wchar_t *Format, va_list Args);
[_wtoi64]
1=wchar_t *Str
ParamCount=1
@=_wtoi64(wchar_t *Str);
[AlpcAdjustCompletionListConcurrencyCount]
1=HANDLE PortHandle
2=ULONG ConcurrencyCount
ParamCount=2
@=AlpcAdjustCompletionListConcurrencyCount(HANDLE PortHandle, ULONG ConcurrencyCount);
[AlpcFreeCompletionListMessage]
1=PVOID CompletionList
2=PPORT_MESSAGE Message
ParamCount=2
@=AlpcFreeCompletionListMessage(PVOID CompletionList, PPORT_MESSAGE Message);
[AlpcGetCompletionListLastMessageInformation]
1=PVOID CompletionList
2=PULONG LastMessageId
3=PULONG LastCallbackId
ParamCount=3
@=AlpcGetCompletionListLastMessageInformation(PVOID CompletionList, PULONG LastMessageId, PULONG LastCallbackId);
[AlpcGetCompletionListMessageAttributes]
1=PVOID CompletionList
2=PPORT_MESSAGE Message
ParamCount=2
@=AlpcGetCompletionListMessageAttributes(PVOID CompletionList, PPORT_MESSAGE Message);
[AlpcGetHeaderSize]
1=ULONG Flags
ParamCount=1
@=AlpcGetHeaderSize(ULONG Flags);
[AlpcGetMessageAttribute]
1=PALPC_MESSAGE_ATTRIBUTES Buffer
2=ULONG AttributeFlag
ParamCount=2
@=AlpcGetMessageAttribute(PALPC_MESSAGE_ATTRIBUTES Buffer, ULONG AttributeFlag);
[AlpcGetMessageFromCompletionList]
1=PVOID CompletionList
2=PALPC_MESSAGE_ATTRIBUTES *MessageAttributes
ParamCount=2
@=AlpcGetMessageFromCompletionList(PVOID CompletionList, PALPC_MESSAGE_ATTRIBUTES *MessageAttributes);
[AlpcGetOutstandingCompletionListMessageCount]
1=PVOID CompletionList
ParamCount=1
@=AlpcGetOutstandingCompletionListMessageCount(PVOID CompletionList);
[AlpcInitializeMessageAttribute]
1=ULONG AttributeFlags
2=PALPC_MESSAGE_ATTRIBUTES Buffer
3=ULONG BufferSize
4=PULONG RequiredBufferSize
ParamCount=4
@=AlpcInitializeMessageAttribute(ULONG AttributeFlags, PALPC_MESSAGE_ATTRIBUTES Buffer, ULONG BufferSize, PULONG RequiredBufferSize);
[AlpcMaxAllowedMessageLength]
ParamCount=0
@=AlpcMaxAllowedMessageLength();
[AlpcRegisterCompletionList]
1=HANDLE PortHandle
2=PALPC_COMPLETION_LIST_HEADER Buffer
3=ULONG Size
4=ULONG ConcurrencyCount
5=ULONG AttributeFlags
ParamCount=5
@=AlpcRegisterCompletionList(HANDLE PortHandle, PALPC_COMPLETION_LIST_HEADER Buffer, ULONG Size, ULONG ConcurrencyCount, ULONG AttributeFlags);
[AlpcRegisterCompletionListWorkerThread]
1=PVOID CompletionList
ParamCount=1
@=AlpcRegisterCompletionListWorkerThread(PVOID CompletionList);
[AlpcRundownCompletionList]
1=HANDLE PortHandle
ParamCount=1
@=AlpcRundownCompletionList(HANDLE PortHandle);
[AlpcUnregisterCompletionList]
1=HANDLE PortHandle
ParamCount=1
@=AlpcUnregisterCompletionList(HANDLE PortHandle);
[AlpcUnregisterCompletionListWorkerThread]
1=PVOID CompletionList
ParamCount=1
@=AlpcUnregisterCompletionListWorkerThread(PVOID CompletionList);
[CsrGetProcessId]
ParamCount=0
@=CsrGetProcessId();
[DbgBreakPoint]
ParamCount=0
@=DbgBreakPoint();
[DbgPrint]
1=PCH Format
2=...
ParamCount=2
@=DbgPrint(PCH Format, ...);
[DbgPrintEx]
1=ULONG ComponentId
2=ULONG Level
3=PCH Format
4=...
ParamCount=4
@=DbgPrintEx(ULONG ComponentId, ULONG Level, PCH Format, ...);
[DbgPrintReturnControlC]
1=PCHAR Format
2=...
ParamCount=2
@=DbgPrintReturnControlC(PCHAR Format, ...);
[DbgPrompt]
1=PCH Prompt
2=PCH Response
3=ULONG Length
ParamCount=3
@=DbgPrompt(PCH Prompt, PCH Response, ULONG Length);
[DbgQueryDebugFilterState]
1=ULONG ComponentId
2=ULONG Level
ParamCount=2
@=DbgQueryDebugFilterState(ULONG ComponentId, ULONG Level);
[DbgSetDebugFilterState]
1=ULONG ComponentId
2=ULONG Level
3=BOOLEAN State
ParamCount=3
@=DbgSetDebugFilterState(ULONG ComponentId, ULONG Level, BOOLEAN State);
[DbgUiConnectToDbg]
ParamCount=0
@=DbgUiConnectToDbg();
[DbgUiContinue]
1=PCLIENT_ID AppClientId
2=NTSTATUS ContinueStatus
ParamCount=2
@=DbgUiContinue(PCLIENT_ID AppClientId, NTSTATUS ContinueStatus);
[DbgUiConvertStateChangeStructure]
1=PDBGUI_WAIT_STATE_CHANGE StateChange
2=_DEBUG_EVENT *DebugEvent
ParamCount=2
@=DbgUiConvertStateChangeStructure(PDBGUI_WAIT_STATE_CHANGE StateChange, _DEBUG_EVENT *DebugEvent);
[DbgUiDebugActiveProcess]
1=HANDLE Process
ParamCount=1
@=DbgUiDebugActiveProcess(HANDLE Process);
[DbgUiGetThreadDebugObject]
ParamCount=0
@=DbgUiGetThreadDebugObject();
[DbgUiIssueRemoteBreakin]
1=HANDLE Process
ParamCount=1
@=DbgUiIssueRemoteBreakin(HANDLE Process);
[DbgUiRemoteBreakin]
1=PVOID Context
ParamCount=1
@=DbgUiRemoteBreakin(PVOID Context);
[DbgUiSetThreadDebugObject]
1=HANDLE DebugObject
ParamCount=1
@=DbgUiSetThreadDebugObject(HANDLE DebugObject);
[DbgUiStopDebugging]
1=HANDLE Process
ParamCount=1
@=DbgUiStopDebugging(HANDLE Process);
[DbgUiWaitStateChange]
1=PDBGUI_WAIT_STATE_CHANGE StateChange
2=PLARGE_INTEGER Timeout
ParamCount=2
@=DbgUiWaitStateChange(PDBGUI_WAIT_STATE_CHANGE StateChange, PLARGE_INTEGER Timeout);
[DbgUserBreakPoint]
ParamCount=0
@=DbgUserBreakPoint();
[ExpInterlockedPopEntrySListEnd]
ParamCount=0
@=ExpInterlockedPopEntrySListEnd();
[ExpInterlockedPopEntrySListFault]
ParamCount=0
@=ExpInterlockedPopEntrySListFault();
[ExpInterlockedPopEntrySListResume]
ParamCount=0
@=ExpInterlockedPopEntrySListResume();
[KiUserApcDispatcher]
1=PVOID NormalContext
2=PVOID SystemArgument1
3=PVOID SystemArgument2
4=PKNORMAL_ROUTINE NormalRoutine
ParamCount=4
@=KiUserApcDispatcher(PVOID NormalContext, PVOID SystemArgument1, PVOID SystemArgument2, PKNORMAL_ROUTINE NormalRoutine);
[KiUserExceptionDispatcher]
1=PEXCEPTION_RECORD ExceptionRecord
2=PCONTEXT ContextFrame
ParamCount=2
@=KiUserExceptionDispatcher(PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextFrame);
[LdrAddLoadAsDataTable]
1=PVOID Module
2=PWSTR FilePath
3=SIZE_T Size
4=HANDLE Handle
ParamCount=4
@=LdrAddLoadAsDataTable(PVOID Module, PWSTR FilePath, SIZE_T Size, HANDLE Handle);
[LdrAddRefDll]
1=ULONG Flags
2=PVOID DllHandle
ParamCount=2
@=LdrAddRefDll(ULONG Flags, PVOID DllHandle);
[LdrDisableThreadCalloutsForDll]
1=PVOID DllHandle
ParamCount=1
@=LdrDisableThreadCalloutsForDll(PVOID DllHandle);
[LdrGetDllHandle]
1=PWSTR DllPath
2=PULONG DllCharacteristics
3=PUNICODE_STRING DllName
4=PVOID *DllHandle
ParamCount=4
@=LdrGetDllHandle(PWSTR DllPath, PULONG DllCharacteristics, PUNICODE_STRING DllName, PVOID *DllHandle);
[LdrGetDllHandleByMapping]
1=PVOID Base
2=PVOID *DllHandle
ParamCount=2
@=LdrGetDllHandleByMapping(PVOID Base, PVOID *DllHandle);
[LdrGetDllHandleByName]
1=PUNICODE_STRING BaseDllName
2=PUNICODE_STRING FullDllName
3=PVOID *DllHandle
ParamCount=3
@=LdrGetDllHandleByName(PUNICODE_STRING BaseDllName, PUNICODE_STRING FullDllName, PVOID *DllHandle);
[LdrGetDllHandleEx]
1=ULONG Flags
2=PCWSTR DllPath
3=PULONG DllCharacteristics
4=PUNICODE_STRING DllName
5=PVOID *DllHandle
ParamCount=5
@=LdrGetDllHandleEx(ULONG Flags, PCWSTR DllPath, PULONG DllCharacteristics, PUNICODE_STRING DllName, PVOID *DllHandle);
[LdrGetFileNameFromLoadAsDataTable]
1=PVOID Module
2=PVOID *pFileNamePrt
ParamCount=2
@=LdrGetFileNameFromLoadAsDataTable(PVOID Module, PVOID *pFileNamePrt);
[LdrGetKnownDllSectionHandle]
1=PCWSTR DllName
2=BOOLEAN SearchKnownDlls32
3=PHANDLE Section
ParamCount=3
@=LdrGetKnownDllSectionHandle(PCWSTR DllName, BOOLEAN SearchKnownDlls32, PHANDLE Section);
[LdrGetProcedureAddress]
1=PVOID DllHandle
2=PANSI_STRING ProcedureName
3=ULONG ProcedureNumber
4=PVOID *ProcedureAddress
ParamCount=4
@=LdrGetProcedureAddress(PVOID DllHandle, PANSI_STRING ProcedureName, ULONG ProcedureNumber, PVOID *ProcedureAddress);
[LdrGetProcedureAddressEx]
1=PVOID DllHandle
2=PANSI_STRING ProcedureName
3=ULONG ProcedureNumber
4=PVOID *ProcedureAddress
5=ULONG Flags
ParamCount=5
@=LdrGetProcedureAddressEx(PVOID DllHandle, PANSI_STRING ProcedureName, ULONG ProcedureNumber, PVOID *ProcedureAddress, ULONG Flags);
[LdrLoadDll]
1=PWSTR DllPath
2=PULONG DllCharacteristics
3=PUNICODE_STRING DllName
4=PVOID *DllHandle
ParamCount=4
@=LdrLoadDll(PWSTR DllPath, PULONG DllCharacteristics, PUNICODE_STRING DllName, PVOID *DllHandle);
[LdrLockLoaderLock]
1=ULONG Flags
2=ULONG *Disposition
3=PVOID *Cookie
ParamCount=3
@=LdrLockLoaderLock(ULONG Flags, ULONG *Disposition, PVOID *Cookie);
[LdrProcessRelocationBlock]
1=ULONG_PTR VA
2=ULONG SizeOfBlock
3=PUSHORT NextOffset
4=LONG_PTR Diff
ParamCount=4
@=LdrProcessRelocationBlock(ULONG_PTR VA, ULONG SizeOfBlock, PUSHORT NextOffset, LONG_PTR Diff);
[LdrQueryModuleServiceTags]
1=PVOID DllHandle
2=PULONG ServiceTagBuffer
3=PULONG BufferSize
ParamCount=3
@=LdrQueryModuleServiceTags(PVOID DllHandle, PULONG ServiceTagBuffer, PULONG BufferSize);
[LdrRegisterDllNotification]
1=ULONG Flags
2=PLDR_DLL_NOTIFICATION_FUNCTION NotificationFunction
3=PVOID Context
4=PVOID *Cookie
ParamCount=4
@=LdrRegisterDllNotification(ULONG Flags, PLDR_DLL_NOTIFICATION_FUNCTION NotificationFunction, PVOID Context, PVOID *Cookie);
[LdrRemoveLoadAsDataTable]
1=PVOID InitModule
2=PVOID *BaseModule
3=PSIZE_T Size
4=ULONG Flags
ParamCount=4
@=LdrRemoveLoadAsDataTable(PVOID InitModule, PVOID *BaseModule, PSIZE_T Size, ULONG Flags);
[LdrUnloadDll]
1=PVOID DllHandle
ParamCount=1
@=LdrUnloadDll(PVOID DllHandle);
[LdrUnlockLoaderLock]
1=ULONG Flags
2=PVOID Cookie
ParamCount=2
@=LdrUnlockLoaderLock(ULONG Flags, PVOID Cookie);
[LdrUnregisterDllNotification]
1=PVOID Cookie
ParamCount=1
@=LdrUnregisterDllNotification(PVOID Cookie);
[LdrVerifyImageMatchesChecksum]
1=HANDLE ImageFileHandle
2=PLDR_IMPORT_MODULE_CALLBACK ImportCallbackRoutine
3=PVOID ImportCallbackParameter
4=PUSHORT ImageCharacteristics
ParamCount=4
@=LdrVerifyImageMatchesChecksum(HANDLE ImageFileHandle, PLDR_IMPORT_MODULE_CALLBACK ImportCallbackRoutine, PVOID ImportCallbackParameter, PUSHORT ImageCharacteristics);
[LdrVerifyImageMatchesChecksumEx]
1=HANDLE ImageFileHandle
2=PLDR_VERIFY_IMAGE_INFO VerifyInfo
ParamCount=2
@=LdrVerifyImageMatchesChecksumEx(HANDLE ImageFileHandle, PLDR_VERIFY_IMAGE_INFO VerifyInfo);
[NtAcceptConnectPort]
1=PHANDLE PortHandle
2=PVOID PortContext
3=PPORT_MESSAGE ConnectionRequest
4=BOOLEAN AcceptConnection
5=PPORT_VIEW ServerView
6=PREMOTE_PORT_VIEW ClientView
ParamCount=6
@=NtAcceptConnectPort(PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);
[NtAccessCheck]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=HANDLE ClientToken
3=ACCESS_MASK DesiredAccess
4=PGENERIC_MAPPING GenericMapping
5=PPRIVILEGE_SET PrivilegeSet
6=PULONG PrivilegeSetLength
7=PACCESS_MASK GrantedAccess
8=PNTSTATUS AccessStatus
ParamCount=8
@=NtAccessCheck(PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
[NtAccessCheckAndAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=ACCESS_MASK DesiredAccess
7=PGENERIC_MAPPING GenericMapping
8=BOOLEAN ObjectCreation
9=PACCESS_MASK GrantedAccess
10=PNTSTATUS AccessStatus
11=PBOOLEAN GenerateOnClose
ParamCount=11
@=NtAccessCheckAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[NtAccessCheckByType]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID PrincipalSelfSid
3=HANDLE ClientToken
4=ACCESS_MASK DesiredAccess
5=POBJECT_TYPE_LIST ObjectTypeList
6=ULONG ObjectTypeListLength
7=PGENERIC_MAPPING GenericMapping
8=PPRIVILEGE_SET PrivilegeSet
9=PULONG PrivilegeSetLength
10=PACCESS_MASK GrantedAccess
11=PNTSTATUS AccessStatus
ParamCount=11
@=NtAccessCheckByType(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
[NtAccessCheckByTypeAndAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=ACCESS_MASK DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=ULONG Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=ULONG ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOLEAN ObjectCreation
14=PACCESS_MASK GrantedAccess
15=PNTSTATUS AccessStatus
16=PBOOLEAN GenerateOnClose
ParamCount=16
@=NtAccessCheckByTypeAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[NtAccessCheckByTypeResultList]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID PrincipalSelfSid
3=HANDLE ClientToken
4=ACCESS_MASK DesiredAccess
5=POBJECT_TYPE_LIST ObjectTypeList
6=ULONG ObjectTypeListLength
7=PGENERIC_MAPPING GenericMapping
8=PPRIVILEGE_SET PrivilegeSet
9=PULONG PrivilegeSetLength
10=PACCESS_MASK GrantedAccess
11=PNTSTATUS AccessStatus
ParamCount=11
@=NtAccessCheckByTypeResultList(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
[NtAccessCheckByTypeResultListAndAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=ACCESS_MASK DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=ULONG Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=ULONG ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOLEAN ObjectCreation
14=PACCESS_MASK GrantedAccess
15=PNTSTATUS AccessStatus
16=PBOOLEAN GenerateOnClose
ParamCount=16
@=NtAccessCheckByTypeResultListAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[NtAccessCheckByTypeResultListAndAuditAlarmByHandle]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=HANDLE ClientToken
4=PUNICODE_STRING ObjectTypeName
5=PUNICODE_STRING ObjectName
6=PSECURITY_DESCRIPTOR SecurityDescriptor
7=PSID PrincipalSelfSid
8=ACCESS_MASK DesiredAccess
9=AUDIT_EVENT_TYPE AuditType
10=ULONG Flags
11=POBJECT_TYPE_LIST ObjectTypeList
12=ULONG ObjectTypeListLength
13=PGENERIC_MAPPING GenericMapping
14=BOOLEAN ObjectCreation
15=PACCESS_MASK GrantedAccess
16=PNTSTATUS AccessStatus
17=PBOOLEAN GenerateOnClose
ParamCount=17
@=NtAccessCheckByTypeResultListAndAuditAlarmByHandle(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[NtAddAtom]
1=PWSTR AtomName
2=ULONG Length
3=PRTL_ATOM Atom
ParamCount=3
@=NtAddAtom(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);
[NtAddAtomEx]
1=PWSTR AtomName
2=ULONG Length
3=PRTL_ATOM Atom
4=ULONG Flags
ParamCount=4
@=NtAddAtomEx(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom, ULONG Flags);
[NtAddBootEntry]
1=PBOOT_ENTRY BootEntry
2=PULONG Id
ParamCount=2
@=NtAddBootEntry(PBOOT_ENTRY BootEntry, PULONG Id);
[NtAddDriverEntry]
1=PEFI_DRIVER_ENTRY DriverEntry
2=PULONG Id
ParamCount=2
@=NtAddDriverEntry(PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);
[NtAdjustGroupsToken]
1=HANDLE TokenHandle
2=BOOLEAN ResetToDefault
3=PTOKEN_GROUPS NewState
4=ULONG BufferLength
5=PTOKEN_GROUPS PreviousState
6=PULONG ReturnLength
ParamCount=6
@=NtAdjustGroupsToken(HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);
[NtAdjustPrivilegesToken]
1=HANDLE TokenHandle
2=BOOLEAN DisableAllPrivileges
3=PTOKEN_PRIVILEGES NewState
4=ULONG BufferLength
5=PTOKEN_PRIVILEGES PreviousState
6=PULONG ReturnLength
ParamCount=6
@=NtAdjustPrivilegesToken(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);
[NtAdjustTokenClaimsAndDeviceGroups]
1=HANDLE TokenHandle
2=BOOLEAN UserResetToDefault
3=BOOLEAN DeviceResetToDefault
4=BOOLEAN DeviceGroupsResetToDefault
5=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState
6=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState
7=PTOKEN_GROUPS NewDeviceGroupsState
8=ULONG UserBufferLength
9=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState
10=ULONG DeviceBufferLength
11=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState
12=ULONG DeviceGroupsBufferLength
13=PTOKEN_GROUPS PreviousDeviceGroups
14=PULONG UserReturnLength
15=PULONG DeviceReturnLength
16=PULONG DeviceGroupsReturnBufferLength
ParamCount=16
@=NtAdjustTokenClaimsAndDeviceGroups(HANDLE TokenHandle, BOOLEAN UserResetToDefault, BOOLEAN DeviceResetToDefault, BOOLEAN DeviceGroupsResetToDefault, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState, PTOKEN_GROUPS NewDeviceGroupsState, ULONG UserBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState, ULONG DeviceBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState, ULONG DeviceGroupsBufferLength, PTOKEN_GROUPS PreviousDeviceGroups, PULONG UserReturnLength, PULONG DeviceReturnLength, PULONG DeviceGroupsReturnBufferLength);
[NtAlertResumeThread]
1=HANDLE ThreadHandle
2=PULONG PreviousSuspendCount
ParamCount=2
@=NtAlertResumeThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
[NtAlertThread]
1=HANDLE ThreadHandle
ParamCount=1
@=NtAlertThread(HANDLE ThreadHandle);
[NtAlertThreadByThreadId]
1=HANDLE ThreadId
ParamCount=1
@=NtAlertThreadByThreadId(HANDLE ThreadId);
[NtAllocateLocallyUniqueId]
1=PLUID Luid
ParamCount=1
@=NtAllocateLocallyUniqueId(PLUID Luid);
[NtAllocateReserveObject]
1=PHANDLE MemoryReserveHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=MEMORY_RESERVE_TYPE Type
ParamCount=3
@=NtAllocateReserveObject(PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);
[NtAllocateUserPhysicalPages]
1=HANDLE ProcessHandle
2=PULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=NtAllocateUserPhysicalPages(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[NtAllocateUuids]
1=PULARGE_INTEGER Time
2=PULONG Range
3=PULONG Sequence
4=PCHAR Seed
ParamCount=4
@=NtAllocateUuids(PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);
[NtAllocateVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=ULONG_PTR ZeroBits
4=PSIZE_T RegionSize
5=ULONG AllocationType
6=ULONG Protect
ParamCount=6
@=NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
[NtAlpcAcceptConnectPort]
1=PHANDLE PortHandle
2=HANDLE ConnectionPortHandle
3=ULONG Flags
4=POBJECT_ATTRIBUTES ObjectAttributes
5=PALPC_PORT_ATTRIBUTES PortAttributes
6=PVOID PortContext
7=PPORT_MESSAGE ConnectionRequest
8=PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes
9=BOOLEAN AcceptConnection
ParamCount=9
@=NtAlpcAcceptConnectPort(PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);
[NtAlpcCancelMessage]
1=HANDLE PortHandle
2=ULONG Flags
3=PALPC_CONTEXT_ATTR MessageContext
ParamCount=3
@=NtAlpcCancelMessage(HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);
[NtAlpcConnectPort]
1=PHANDLE PortHandle
2=PUNICODE_STRING PortName
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PALPC_PORT_ATTRIBUTES PortAttributes
5=ULONG Flags
6=PSID RequiredServerSid
7=PPORT_MESSAGE ConnectionMessage
8=PULONG BufferLength
9=PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes
10=PALPC_MESSAGE_ATTRIBUTES InMessageAttributes
11=PLARGE_INTEGER Timeout
ParamCount=11
@=NtAlpcConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
[NtAlpcConnectPortEx]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ConnectionPortObjectAttributes
3=POBJECT_ATTRIBUTES ClientPortObjectAttributes
4=PALPC_PORT_ATTRIBUTES PortAttributes
5=ULONG Flags
6=PSECURITY_DESCRIPTOR ServerSecurityRequirements
7=PPORT_MESSAGE ConnectionMessage
8=PSIZE_T BufferLength
9=PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes
10=PALPC_MESSAGE_ATTRIBUTES InMessageAttributes
11=PLARGE_INTEGER Timeout
ParamCount=11
@=NtAlpcConnectPortEx(PHANDLE PortHandle, POBJECT_ATTRIBUTES ConnectionPortObjectAttributes, POBJECT_ATTRIBUTES ClientPortObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSECURITY_DESCRIPTOR ServerSecurityRequirements, PPORT_MESSAGE ConnectionMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
[NtAlpcCreatePort]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=PALPC_PORT_ATTRIBUTES PortAttributes
ParamCount=3
@=NtAlpcCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);
[NtAlpcCreatePortSection]
1=HANDLE PortHandle
2=ULONG Flags
3=HANDLE SectionHandle
4=SIZE_T SectionSize
5=PALPC_HANDLE AlpcSectionHandle
6=PSIZE_T ActualSectionSize
ParamCount=6
@=NtAlpcCreatePortSection(HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);
[NtAlpcCreateResourceReserve]
1=HANDLE PortHandle
2=ULONG Flags
3=SIZE_T MessageSize
4=PALPC_HANDLE ResourceId
ParamCount=4
@=NtAlpcCreateResourceReserve(HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);
[NtAlpcCreateSectionView]
1=HANDLE PortHandle
2=ULONG Flags
3=PALPC_DATA_VIEW_ATTR ViewAttributes
ParamCount=3
@=NtAlpcCreateSectionView(HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);
[NtAlpcCreateSecurityContext]
1=HANDLE PortHandle
2=ULONG Flags
3=PALPC_SECURITY_ATTR SecurityAttribute
ParamCount=3
@=NtAlpcCreateSecurityContext(HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);
[NtAlpcDeletePortSection]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE SectionHandle
ParamCount=3
@=NtAlpcDeletePortSection(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);
[NtAlpcDeleteResourceReserve]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE ResourceId
ParamCount=3
@=NtAlpcDeleteResourceReserve(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);
[NtAlpcDeleteSectionView]
1=HANDLE PortHandle
2=ULONG Flags
3=PVOID ViewBase
ParamCount=3
@=NtAlpcDeleteSectionView(HANDLE PortHandle, ULONG Flags, PVOID ViewBase);
[NtAlpcDeleteSecurityContext]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE ContextHandle
ParamCount=3
@=NtAlpcDeleteSecurityContext(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);
[NtAlpcDisconnectPort]
1=HANDLE PortHandle
2=ULONG Flags
ParamCount=2
@=NtAlpcDisconnectPort(HANDLE PortHandle, ULONG Flags);
[NtAlpcImpersonateClientContainerOfPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=ULONG Flags
ParamCount=3
@=NtAlpcImpersonateClientContainerOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG Flags);
[NtAlpcImpersonateClientOfPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=PVOID Flags
ParamCount=3
@=NtAlpcImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, PVOID Flags);
[NtAlpcOpenSenderProcess]
1=PHANDLE ProcessHandle
2=HANDLE PortHandle
3=PPORT_MESSAGE PortMessage
4=ULONG Flags
5=ACCESS_MASK DesiredAccess
6=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=6
@=NtAlpcOpenSenderProcess(PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtAlpcOpenSenderThread]
1=PHANDLE ThreadHandle
2=HANDLE PortHandle
3=PPORT_MESSAGE PortMessage
4=ULONG Flags
5=ACCESS_MASK DesiredAccess
6=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=6
@=NtAlpcOpenSenderThread(PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtAlpcQueryInformation]
1=HANDLE PortHandle
2=ALPC_PORT_INFORMATION_CLASS PortInformationClass
3=PVOID PortInformation
4=ULONG Length
5=PULONG ReturnLength
ParamCount=5
@=NtAlpcQueryInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);
[NtAlpcQueryInformationMessage]
1=HANDLE PortHandle
2=PPORT_MESSAGE PortMessage
3=ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass
4=PVOID MessageInformation
5=ULONG Length
6=PULONG ReturnLength
ParamCount=6
@=NtAlpcQueryInformationMessage(HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);
[NtAlpcRevokeSecurityContext]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE ContextHandle
ParamCount=3
@=NtAlpcRevokeSecurityContext(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);
[NtAlpcSendWaitReceivePort]
1=HANDLE PortHandle
2=ULONG Flags
3=PPORT_MESSAGE SendMessage
4=PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes
5=PPORT_MESSAGE ReceiveMessage
6=PSIZE_T BufferLength
7=PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes
8=PLARGE_INTEGER Timeout
ParamCount=8
@=NtAlpcSendWaitReceivePort(HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);
[NtAlpcSetInformation]
1=HANDLE PortHandle
2=ALPC_PORT_INFORMATION_CLASS PortInformationClass
3=PVOID PortInformation
4=ULONG Length
ParamCount=4
@=NtAlpcSetInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);
[NtApphelpCacheControl]
1=APPHELPCACHESERVICECLASS Service
2=PAHCACHE_SERVICE_DATA ServiceData
ParamCount=2
@=NtApphelpCacheControl(APPHELPCACHESERVICECLASS Service, PAHCACHE_SERVICE_DATA ServiceData);
[NtAreMappedFilesTheSame]
1=PVOID File1MappedAsAnImage
2=PVOID File2MappedAsFile
ParamCount=2
@=NtAreMappedFilesTheSame(PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);
[NtAssignProcessToJobObject]
1=HANDLE JobHandle
2=HANDLE ProcessHandle
ParamCount=2
@=NtAssignProcessToJobObject(HANDLE JobHandle, HANDLE ProcessHandle);
[NtAssociateWaitCompletionPacket]
1=HANDLE WaitCompletionPacketHandle
2=HANDLE IoCompletionHandle
3=HANDLE TargetObjectHandle
4=PVOID KeyContext
5=PVOID ApcContext
6=NTSTATUS IoStatus
7=ULONG_PTR IoStatusInformation
8=PBOOLEAN AlreadySignaled
ParamCount=8
@=NtAssociateWaitCompletionPacket(HANDLE WaitCompletionPacketHandle, HANDLE IoCompletionHandle, HANDLE TargetObjectHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation, PBOOLEAN AlreadySignaled);
[NtCallbackReturn]
1=PVOID OutputBuffer
2=ULONG OutputLength
3=NTSTATUS Status
ParamCount=3
@=NtCallbackReturn(PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);
[NtCancelIoFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=2
@=NtCancelIoFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
[NtCancelIoFileEx]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoRequestToCancel
3=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=3
@=NtCancelIoFileEx(HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
[NtCancelSynchronousIoFile]
1=HANDLE ThreadHandle
2=PIO_STATUS_BLOCK IoRequestToCancel
3=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=3
@=NtCancelSynchronousIoFile(HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
[NtCancelTimer]
1=HANDLE TimerHandle
2=PBOOLEAN CurrentState
ParamCount=2
@=NtCancelTimer(HANDLE TimerHandle, PBOOLEAN CurrentState);
[NtCancelTimer2]
1=HANDLE TimerHandle
2=PT2_CANCEL_PARAMETERS Parameters
ParamCount=2
@=NtCancelTimer2(HANDLE TimerHandle, PT2_CANCEL_PARAMETERS Parameters);
[NtCancelWaitCompletionPacket]
1=HANDLE WaitCompletionPacketHandle
2=BOOLEAN RemoveSignaledPacket
ParamCount=2
@=NtCancelWaitCompletionPacket(HANDLE WaitCompletionPacketHandle, BOOLEAN RemoveSignaledPacket);
[NtClearEvent]
1=HANDLE EventHandle
ParamCount=1
@=NtClearEvent(HANDLE EventHandle);
[NtClose]
1=HANDLE Handle
ParamCount=1
@=NtClose(HANDLE Handle);
[NtCloseObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=BOOLEAN GenerateOnClose
ParamCount=3
@=NtCloseObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
[NtCommitComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtCommitComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtCommitEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtCommitEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtCommitTransaction]
1=HANDLE TransactionHandle
2=BOOLEAN Wait
ParamCount=2
@=NtCommitTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
[NtCompactKeys]
1=ULONG Count
2=HANDLE KeyArray[]
ParamCount=2
@=NtCompactKeys(ULONG Count, HANDLE KeyArray[]);
[NtCompareObjects]
1=HANDLE FirstObjectHandle
2=HANDLE SecondObjectHandle
ParamCount=2
@=NtCompareObjects(HANDLE FirstObjectHandle, HANDLE SecondObjectHandle);
[NtCompareTokens]
1=HANDLE FirstTokenHandle
2=HANDLE SecondTokenHandle
3=PBOOLEAN Equal
ParamCount=3
@=NtCompareTokens(HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);
[NtCompleteConnectPort]
1=HANDLE PortHandle
ParamCount=1
@=NtCompleteConnectPort(HANDLE PortHandle);
[NtCompressKey]
1=HANDLE Key
ParamCount=1
@=NtCompressKey(HANDLE Key);
[NtConnectPort]
1=PHANDLE PortHandle
2=PUNICODE_STRING PortName
3=PSECURITY_QUALITY_OF_SERVICE SecurityQos
4=PPORT_VIEW ClientView
5=PREMOTE_PORT_VIEW ServerView
6=PULONG MaxMessageLength
7=PVOID ConnectionInformation
8=PULONG ConnectionInformationLength
ParamCount=8
@=NtConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
[NtContinue]
1=PCONTEXT ContextRecord
2=BOOLEAN TestAlert
ParamCount=2
@=NtContinue(PCONTEXT ContextRecord, BOOLEAN TestAlert);
[NtCreateDebugObject]
1=PHANDLE DebugObjectHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Flags
ParamCount=4
@=NtCreateDebugObject(PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
[NtCreateDirectoryObject]
1=PHANDLE DirectoryHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtCreateDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtCreateDirectoryObjectEx]
1=PHANDLE DirectoryHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ShadowDirectoryHandle
5=ULONG Flags
ParamCount=5
@=NtCreateDirectoryObjectEx(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ShadowDirectoryHandle, ULONG Flags);
[NtCreateEnlistment]
1=PHANDLE EnlistmentHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE ResourceManagerHandle
4=HANDLE TransactionHandle
5=POBJECT_ATTRIBUTES ObjectAttributes
6=ULONG CreateOptions
7=NOTIFICATION_MASK NotificationMask
8=PVOID EnlistmentKey
ParamCount=8
@=NtCreateEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
[NtCreateEvent]
1=PHANDLE EventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=EVENT_TYPE EventType
5=BOOLEAN InitialState
ParamCount=5
@=NtCreateEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);
[NtCreateEventPair]
1=PHANDLE EventPairHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtCreateEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtCreateFile]
1=PHANDLE FileHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=PLARGE_INTEGER AllocationSize
6=ULONG FileAttributes
7=ULONG ShareAccess
8=ULONG CreateDisposition
9=ULONG CreateOptions
10=PVOID EaBuffer
11=ULONG EaLength
ParamCount=11
@=NtCreateFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
[NtCreateIoCompletion]
1=PHANDLE IoCompletionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Count
ParamCount=4
@=NtCreateIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);
[NtCreateIRTimer]
1=PHANDLE TimerHandle
2=ACCESS_MASK DesiredAccess
ParamCount=2
@=NtCreateIRTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess);
[NtCreateJobObject]
1=PHANDLE JobHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtCreateJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtCreateJobSet]
1=ULONG NumJob
2=PJOB_SET_ARRAY UserJobSet
3=ULONG Flags
ParamCount=3
@=NtCreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
[NtCreateKey]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG TitleIndex
5=PUNICODE_STRING Class
6=ULONG CreateOptions
7=PULONG Disposition
ParamCount=7
@=NtCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);
[NtCreateKeyedEvent]
1=PHANDLE KeyedEventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Flags
ParamCount=4
@=NtCreateKeyedEvent(PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
[NtCreateKeyTransacted]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG TitleIndex
5=PUNICODE_STRING Class
6=ULONG CreateOptions
7=HANDLE TransactionHandle
8=PULONG Disposition
ParamCount=8
@=NtCreateKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);
[NtCreateLowBoxToken]
1=PHANDLE TokenHandle
2=HANDLE ExistingTokenHandle
3=ACCESS_MASK DesiredAccess
4=POBJECT_ATTRIBUTES ObjectAttributes
5=PSID PackageSid
6=ULONG CapabilityCount
7=PSID_AND_ATTRIBUTES Capabilities
8=ULONG HandleCount
9=HANDLE *Handles
ParamCount=9
@=NtCreateLowBoxToken(PHANDLE TokenHandle, HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PSID PackageSid, ULONG CapabilityCount, PSID_AND_ATTRIBUTES Capabilities, ULONG HandleCount, HANDLE *Handles);
[NtCreateMailslotFile]
1=PHANDLE FileHandle
2=ULONG DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=ULONG CreateOptions
6=ULONG MailslotQuota
7=ULONG MaximumMessageSize
8=PLARGE_INTEGER ReadTimeout
ParamCount=8
@=NtCreateMailslotFile(PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);
[NtCreateMutant]
1=PHANDLE MutantHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=BOOLEAN InitialOwner
ParamCount=4
@=NtCreateMutant(PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);
[NtCreateNamedPipeFile]
1=PHANDLE FileHandle
2=ULONG DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=ULONG ShareAccess
6=ULONG CreateDisposition
7=ULONG CreateOptions
8=ULONG NamedPipeType
9=ULONG ReadMode
10=ULONG CompletionMode
11=ULONG MaximumInstances
12=ULONG InboundQuota
13=ULONG OutboundQuota
14=PLARGE_INTEGER DefaultTimeout
ParamCount=14
@=NtCreateNamedPipeFile(PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
[NtCreatePagingFile]
1=PUNICODE_STRING PageFileName
2=PLARGE_INTEGER MinimumSize
3=PLARGE_INTEGER MaximumSize
4=ULONG Priority
ParamCount=4
@=NtCreatePagingFile(PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);
[NtCreatePartition]
1=PHANDLE PartitionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG PreferredNode
ParamCount=4
@=NtCreatePartition(PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG PreferredNode);
[NtCreatePort]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=ULONG MaxConnectionInfoLength
4=ULONG MaxMessageLength
5=ULONG MaxPoolUsage
ParamCount=5
@=NtCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);
[NtCreatePrivateNamespace]
1=PHANDLE NamespaceHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PVOID BoundaryDescriptor
ParamCount=4
@=NtCreatePrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
[NtCreateProcess]
1=PHANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ParentProcess
5=BOOLEAN InheritObjectTable
6=HANDLE SectionHandle
7=HANDLE DebugPort
8=HANDLE ExceptionPort
ParamCount=8
@=NtCreateProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);
[NtCreateProcessEx]
1=PHANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ParentProcess
5=ULONG Flags
6=HANDLE SectionHandle
7=HANDLE DebugPort
8=HANDLE ExceptionPort
9=ULONG JobMemberLevel
ParamCount=9
@=NtCreateProcessEx(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);
[NtCreateProfile]
1=PHANDLE ProfileHandle
2=HANDLE Process
3=PVOID ProfileBase
4=SIZE_T ProfileSize
5=ULONG BucketSize
6=PULONG Buffer
7=ULONG BufferSize
8=KPROFILE_SOURCE ProfileSource
9=KAFFINITY Affinity
ParamCount=9
@=NtCreateProfile(PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);
[NtCreateProfileEx]
1=PHANDLE ProfileHandle
2=HANDLE Process
3=PVOID ProfileBase
4=SIZE_T ProfileSize
5=ULONG BucketSize
6=PULONG Buffer
7=ULONG BufferSize
8=KPROFILE_SOURCE ProfileSource
9=USHORT GroupCount
10=PGROUP_AFFINITY GroupAffinity
ParamCount=10
@=NtCreateProfileEx(PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, USHORT GroupCount, PGROUP_AFFINITY GroupAffinity);
[NtCreateResourceManager]
1=PHANDLE ResourceManagerHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE TmHandle
4=LPGUID RmGuid
5=POBJECT_ATTRIBUTES ObjectAttributes
6=ULONG CreateOptions
7=PUNICODE_STRING Description
ParamCount=7
@=NtCreateResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
[NtCreateSection]
1=PHANDLE SectionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PLARGE_INTEGER MaximumSize
5=ULONG SectionPageProtection
6=ULONG AllocationAttributes
7=HANDLE FileHandle
ParamCount=7
@=NtCreateSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);
[NtCreateSemaphore]
1=PHANDLE SemaphoreHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=LONG InitialCount
5=LONG MaximumCount
ParamCount=5
@=NtCreateSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);
[NtCreateSymbolicLinkObject]
1=PHANDLE LinkHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PUNICODE_STRING LinkTarget
ParamCount=4
@=NtCreateSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);
[NtCreateThread]
1=PHANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ProcessHandle
5=PCLIENT_ID ClientId
6=PCONTEXT ThreadContext
7=PINITIAL_TEB InitialTeb
8=BOOLEAN CreateSuspended
ParamCount=8
@=NtCreateThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);
[NtCreateThreadEx]
1=PHANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ProcessHandle
5=PUSER_THREAD_START_ROUTINE StartRoutine
6=PVOID Argument
7=ULONG CreateFlags
8=SIZE_T ZeroBits
9=SIZE_T StackSize
10=SIZE_T MaximumStackSize
11=PPS_ATTRIBUTE_LIST AttributeList
ParamCount=11
@=NtCreateThreadEx(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PUSER_THREAD_START_ROUTINE StartRoutine, PVOID Argument, ULONG CreateFlags, SIZE_T ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);
[NtCreateTimer]
1=PHANDLE TimerHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=TIMER_TYPE TimerType
ParamCount=4
@=NtCreateTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);
[NtCreateTimer2]
1=PHANDLE TimerHandle
2=PVOID Reserved1
3=PVOID Reserved2
4=ULONG Attributes
5=ACCESS_MASK DesiredAccess
ParamCount=5
@=NtCreateTimer2(PHANDLE TimerHandle, PVOID Reserved1, PVOID Reserved2, ULONG Attributes, ACCESS_MASK DesiredAccess);
[NtCreateToken]
1=PHANDLE TokenHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=TOKEN_TYPE TokenType
5=PLUID AuthenticationId
6=PLARGE_INTEGER ExpirationTime
7=PTOKEN_USER User
8=PTOKEN_GROUPS Groups
9=PTOKEN_PRIVILEGES Privileges
10=PTOKEN_OWNER Owner
11=PTOKEN_PRIMARY_GROUP PrimaryGroup
12=PTOKEN_DEFAULT_DACL DefaultDacl
13=PTOKEN_SOURCE TokenSource
ParamCount=13
@=NtCreateToken(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);
[NtCreateTokenEx]
1=PHANDLE TokenHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=TOKEN_TYPE TokenType
5=PLUID AuthenticationId
6=PLARGE_INTEGER ExpirationTime
7=PTOKEN_USER User
8=PTOKEN_GROUPS Groups
9=PTOKEN_PRIVILEGES Privileges
10=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes
11=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes
12=PTOKEN_GROUPS DeviceGroups
13=PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy
14=PTOKEN_OWNER Owner
15=PTOKEN_PRIMARY_GROUP PrimaryGroup
16=PTOKEN_DEFAULT_DACL DefaultDacl
17=PTOKEN_SOURCE TokenSource
ParamCount=17
@=NtCreateTokenEx(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes, PTOKEN_GROUPS DeviceGroups, PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);
[NtCreateTransaction]
1=PHANDLE TransactionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=LPGUID Uow
5=HANDLE TmHandle
6=ULONG CreateOptions
7=ULONG IsolationLevel
8=ULONG IsolationFlags
9=PLARGE_INTEGER Timeout
10=PUNICODE_STRING Description
ParamCount=10
@=NtCreateTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);
[NtCreateTransactionManager]
1=PHANDLE TmHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PUNICODE_STRING LogFileName
5=ULONG CreateOptions
6=ULONG CommitStrength
ParamCount=6
@=NtCreateTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);
[NtCreateUserProcess]
1=PHANDLE ProcessHandle
2=PHANDLE ThreadHandle
3=ACCESS_MASK ProcessDesiredAccess
4=ACCESS_MASK ThreadDesiredAccess
5=POBJECT_ATTRIBUTES ProcessObjectAttributes
6=POBJECT_ATTRIBUTES ThreadObjectAttributes
7=ULONG ProcessFlags
8=ULONG ThreadFlags
9=PRTL_USER_PROCESS_PARAMETERS ProcessParameters
10=PPS_CREATE_INFO CreateInfo
11=PPS_ATTRIBUTE_LIST AttributeList
ParamCount=11
@=NtCreateUserProcess(PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPS_CREATE_INFO CreateInfo, PPS_ATTRIBUTE_LIST AttributeList);
[NtCreateWaitablePort]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=ULONG MaxConnectionInfoLength
4=ULONG MaxMessageLength
5=ULONG MaxPoolUsage
ParamCount=5
@=NtCreateWaitablePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);
[NtCreateWaitCompletionPacket]
1=PHANDLE WaitCompletionPacketHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtCreateWaitCompletionPacket(PHANDLE WaitCompletionPacketHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtCreateWnfStateName]
1=PWNF_STATE_NAME StateName
2=WNF_STATE_NAME_LIFETIME NameLifetime
3=WNF_DATA_SCOPE DataScope
4=BOOLEAN PersistData
5=PCWNF_TYPE_ID TypeId
6=ULONG MaximumStateSize
7=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=7
@=NtCreateWnfStateName(PWNF_STATE_NAME StateName, WNF_STATE_NAME_LIFETIME NameLifetime, WNF_DATA_SCOPE DataScope, BOOLEAN PersistData, PCWNF_TYPE_ID TypeId, ULONG MaximumStateSize, PSECURITY_DESCRIPTOR SecurityDescriptor);
[NtCreateWorkerFactory]
1=PHANDLE WorkerFactoryHandleReturn
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE CompletionPortHandle
5=HANDLE WorkerProcessHandle
6=PVOID StartRoutine
7=PVOID StartParameter
8=ULONG MaxThreadCount
9=SIZE_T StackReserve
10=SIZE_T StackCommit
ParamCount=10
@=NtCreateWorkerFactory(PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);
[NtDebugActiveProcess]
1=HANDLE ProcessHandle
2=HANDLE DebugObjectHandle
ParamCount=2
@=NtDebugActiveProcess(HANDLE ProcessHandle, HANDLE DebugObjectHandle);
[NtDebugContinue]
1=HANDLE DebugObjectHandle
2=PCLIENT_ID ClientId
3=NTSTATUS ContinueStatus
ParamCount=3
@=NtDebugContinue(HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);
[NtDelayExecution]
1=BOOLEAN Alertable
2=PLARGE_INTEGER DelayInterval
ParamCount=2
@=NtDelayExecution(BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);
[NtDeleteAtom]
1=RTL_ATOM Atom
ParamCount=1
@=NtDeleteAtom(RTL_ATOM Atom);
[NtDeleteBootEntry]
1=ULONG Id
ParamCount=1
@=NtDeleteBootEntry(ULONG Id);
[NtDeleteDriverEntry]
1=ULONG Id
ParamCount=1
@=NtDeleteDriverEntry(ULONG Id);
[NtDeleteFile]
1=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=1
@=NtDeleteFile(POBJECT_ATTRIBUTES ObjectAttributes);
[NtDeleteKey]
1=HANDLE KeyHandle
ParamCount=1
@=NtDeleteKey(HANDLE KeyHandle);
[NtDeleteObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=BOOLEAN GenerateOnClose
ParamCount=3
@=NtDeleteObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
[NtDeletePrivateNamespace]
1=HANDLE NamespaceHandle
ParamCount=1
@=NtDeletePrivateNamespace(HANDLE NamespaceHandle);
[NtDeleteValueKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING ValueName
ParamCount=2
@=NtDeleteValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName);
[NtDeleteWnfStateData]
1=PCWNF_STATE_NAME StateName
2=VOID *ExplicitScope
ParamCount=2
@=NtDeleteWnfStateData(PCWNF_STATE_NAME StateName, VOID *ExplicitScope);
[NtDeleteWnfStateName]
1=PCWNF_STATE_NAME StateName
ParamCount=1
@=NtDeleteWnfStateName(PCWNF_STATE_NAME StateName);
[NtDeviceIoControlFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=ULONG IoControlCode
7=PVOID InputBuffer
8=ULONG InputBufferLength
9=PVOID OutputBuffer
10=ULONG OutputBufferLength
ParamCount=10
@=NtDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
[NtDisableLastKnownGood]
ParamCount=0
@=NtDisableLastKnownGood();
[NtDisplayString]
1=PUNICODE_STRING String
ParamCount=1
@=NtDisplayString(PUNICODE_STRING String);
[NtdllDefWindowProc_A]
1=HWND hWnd
2=UINT Msg
3=WPARAM wParam
4=LPARAM lParam
ParamCount=4
@=NtdllDefWindowProc_A(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
[NtdllDefWindowProc_W]
1=HWND hWnd
2=UINT Msg
3=WPARAM wParam
4=LPARAM lParam
ParamCount=4
@=NtdllDefWindowProc_W(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
[NtDrawText]
1=PUNICODE_STRING String
ParamCount=1
@=NtDrawText(PUNICODE_STRING String);
[NtDuplicateObject]
1=HANDLE SourceProcessHandle
2=HANDLE SourceHandle
3=HANDLE TargetProcessHandle
4=PHANDLE TargetHandle
5=ACCESS_MASK DesiredAccess
6=ULONG HandleAttributes
7=ULONG Options
ParamCount=7
@=NtDuplicateObject(HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);
[NtDuplicateToken]
1=HANDLE ExistingTokenHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=BOOLEAN EffectiveOnly
5=TOKEN_TYPE TokenType
6=PHANDLE NewTokenHandle
ParamCount=6
@=NtDuplicateToken(HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);
[NtEnableLastKnownGood]
ParamCount=0
@=NtEnableLastKnownGood();
[NtEnumerateBootEntries]
1=PVOID Buffer
2=PULONG BufferLength
ParamCount=2
@=NtEnumerateBootEntries(PVOID Buffer, PULONG BufferLength);
[NtEnumerateDriverEntries]
1=PVOID Buffer
2=PULONG BufferLength
ParamCount=2
@=NtEnumerateDriverEntries(PVOID Buffer, PULONG BufferLength);
[NtEnumerateKey]
1=HANDLE KeyHandle
2=ULONG Index
3=KEY_INFORMATION_CLASS KeyInformationClass
4=PVOID KeyInformation
5=ULONG Length
6=PULONG ResultLength
ParamCount=6
@=NtEnumerateKey(HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
[NtEnumerateSystemEnvironmentValuesEx]
1=ULONG InformationClass
2=PVOID Buffer
3=PULONG BufferLength
ParamCount=3
@=NtEnumerateSystemEnvironmentValuesEx(ULONG InformationClass, PVOID Buffer, PULONG BufferLength);
[NtEnumerateTransactionObject]
1=HANDLE RootObjectHandle
2=KTMOBJECT_TYPE QueryType
3=PKTMOBJECT_CURSOR ObjectCursor
4=ULONG ObjectCursorLength
5=PULONG ReturnLength
ParamCount=5
@=NtEnumerateTransactionObject(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
[NtEnumerateValueKey]
1=HANDLE KeyHandle
2=ULONG Index
3=KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass
4=PVOID KeyValueInformation
5=ULONG Length
6=PULONG ResultLength
ParamCount=6
@=NtEnumerateValueKey(HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
[NtExtendSection]
1=HANDLE SectionHandle
2=PLARGE_INTEGER NewSectionSize
ParamCount=2
@=NtExtendSection(HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);
[NtFilterBootOption]
1=FILTER_BOOT_OPTION_OPERATION FilterOperation
2=ULONG ObjectType
3=ULONG ElementType
4=PVOID Data
5=ULONG DataSize
ParamCount=5
@=NtFilterBootOption(FILTER_BOOT_OPTION_OPERATION FilterOperation, ULONG ObjectType, ULONG ElementType, PVOID Data, ULONG DataSize);
[NtFilterToken]
1=HANDLE ExistingTokenHandle
2=ULONG Flags
3=PTOKEN_GROUPS SidsToDisable
4=PTOKEN_PRIVILEGES PrivilegesToDelete
5=PTOKEN_GROUPS RestrictedSids
6=PHANDLE NewTokenHandle
ParamCount=6
@=NtFilterToken(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);
[NtFilterTokenEx]
1=HANDLE ExistingTokenHandle
2=ULONG Flags
3=PTOKEN_GROUPS SidsToDisable
4=PTOKEN_PRIVILEGES PrivilegesToDelete
5=PTOKEN_GROUPS RestrictedSids
6=ULONG DisableUserClaimsCount
7=PUNICODE_STRING UserClaimsToDisable
8=ULONG DisableDeviceClaimsCount
9=PUNICODE_STRING DeviceClaimsToDisable
10=PTOKEN_GROUPS DeviceGroupsToDisable
11=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes
12=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes
13=PTOKEN_GROUPS RestrictedDeviceGroups
14=PHANDLE NewTokenHandle
ParamCount=14
@=NtFilterTokenEx(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, ULONG DisableUserClaimsCount, PUNICODE_STRING UserClaimsToDisable, ULONG DisableDeviceClaimsCount, PUNICODE_STRING DeviceClaimsToDisable, PTOKEN_GROUPS DeviceGroupsToDisable, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes, PTOKEN_GROUPS RestrictedDeviceGroups, PHANDLE NewTokenHandle);
[NtFindAtom]
1=PWSTR AtomName
2=ULONG Length
3=PRTL_ATOM Atom
ParamCount=3
@=NtFindAtom(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);
[NtFlushBuffersFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=2
@=NtFlushBuffersFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
[NtFlushBuffersFileEx]
1=HANDLE FileHandle
2=ULONG Flags
3=PVOID Parameters
4=ULONG ParametersSize
5=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=5
@=NtFlushBuffersFileEx(HANDLE FileHandle, ULONG Flags, PVOID Parameters, ULONG ParametersSize, PIO_STATUS_BLOCK IoStatusBlock);
[NtFlushInstallUILanguage]
1=LANGID InstallUILanguage
2=ULONG SetComittedFlag
ParamCount=2
@=NtFlushInstallUILanguage(LANGID InstallUILanguage, ULONG SetComittedFlag);
[NtFlushInstructionCache]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=SIZE_T Length
ParamCount=3
@=NtFlushInstructionCache(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);
[NtFlushKey]
1=HANDLE KeyHandle
ParamCount=1
@=NtFlushKey(HANDLE KeyHandle);
[NtFlushProcessWriteBuffers]
ParamCount=0
@=NtFlushProcessWriteBuffers();
[NtFlushVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=PIO_STATUS_BLOCK IoStatus
ParamCount=4
@=NtFlushVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);
[NtFlushWriteBuffer]
ParamCount=0
@=NtFlushWriteBuffer();
[NtFreeUserPhysicalPages]
1=HANDLE ProcessHandle
2=PULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=NtFreeUserPhysicalPages(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[NtFreeVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG FreeType
ParamCount=4
@=NtFreeVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
[NtFreezeRegistry]
1=ULONG TimeOutInSeconds
ParamCount=1
@=NtFreezeRegistry(ULONG TimeOutInSeconds);
[NtFreezeTransactions]
1=PLARGE_INTEGER FreezeTimeout
2=PLARGE_INTEGER ThawTimeout
ParamCount=2
@=NtFreezeTransactions(PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);
[NtFsControlFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=ULONG FsControlCode
7=PVOID InputBuffer
8=ULONG InputBufferLength
9=PVOID OutputBuffer
10=ULONG OutputBufferLength
ParamCount=10
@=NtFsControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
[NtGetCachedSigningLevel]
1=HANDLE File
2=PULONG Flags
3=PSE_SIGNING_LEVEL SigningLevel
4=PUCHAR Thumbprint
5=PULONG ThumbprintSize
6=PULONG ThumbprintAlgorithm
ParamCount=6
@=NtGetCachedSigningLevel(HANDLE File, PULONG Flags, PSE_SIGNING_LEVEL SigningLevel, PUCHAR Thumbprint, PULONG ThumbprintSize, PULONG ThumbprintAlgorithm);
[NtGetCompleteWnfStateSubscription]
1=PWNF_STATE_NAME OldDescriptorStateName
2=ULONG64 *OldSubscriptionId
3=ULONG OldDescriptorEventMask
4=ULONG OldDescriptorStatus
5=PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor
6=ULONG DescriptorSize
ParamCount=6
@=NtGetCompleteWnfStateSubscription(PWNF_STATE_NAME OldDescriptorStateName, ULONG64 *OldSubscriptionId, ULONG OldDescriptorEventMask, ULONG OldDescriptorStatus, PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor, ULONG DescriptorSize);
[NtGetContextThread]
1=HANDLE ThreadHandle
2=PCONTEXT ThreadContext
ParamCount=2
@=NtGetContextThread(HANDLE ThreadHandle, PCONTEXT ThreadContext);
[NtGetCurrentProcessorNumber]
ParamCount=0
@=NtGetCurrentProcessorNumber();
[NtGetDevicePowerState]
1=HANDLE Device
2=PDEVICE_POWER_STATE State
ParamCount=2
@=NtGetDevicePowerState(HANDLE Device, PDEVICE_POWER_STATE State);
[NtGetMUIRegistryInfo]
1=ULONG Flags
2=PULONG DataSize
3=PVOID Data
ParamCount=3
@=NtGetMUIRegistryInfo(ULONG Flags, PULONG DataSize, PVOID Data);
[NtGetNextProcess]
1=HANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=ULONG HandleAttributes
4=ULONG Flags
5=PHANDLE NewProcessHandle
ParamCount=5
@=NtGetNextProcess(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);
[NtGetNextThread]
1=HANDLE ProcessHandle
2=HANDLE ThreadHandle
3=ACCESS_MASK DesiredAccess
4=ULONG HandleAttributes
5=ULONG Flags
6=PHANDLE NewThreadHandle
ParamCount=6
@=NtGetNextThread(HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);
[NtGetNlsSectionPtr]
1=ULONG SectionType
2=ULONG SectionData
3=PVOID ContextData
4=PVOID *SectionPointer
5=PULONG SectionSize
ParamCount=5
@=NtGetNlsSectionPtr(ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);
[NtGetNotificationResourceManager]
1=HANDLE ResourceManagerHandle
2=PTRANSACTION_NOTIFICATION TransactionNotification
3=ULONG NotificationLength
4=PLARGE_INTEGER Timeout
5=PULONG ReturnLength
6=ULONG Asynchronous
7=ULONG_PTR AsynchronousContext
ParamCount=7
@=NtGetNotificationResourceManager(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);
[NtGetWriteWatch]
1=HANDLE ProcessHandle
2=ULONG Flags
3=PVOID BaseAddress
4=SIZE_T RegionSize
5=PVOID *UserAddressArray
6=PULONG_PTR EntriesInUserAddressArray
7=PULONG Granularity
ParamCount=7
@=NtGetWriteWatch(HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);
[NtImpersonateAnonymousToken]
1=HANDLE ThreadHandle
ParamCount=1
@=NtImpersonateAnonymousToken(HANDLE ThreadHandle);
[NtImpersonateClientOfPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
ParamCount=2
@=NtImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message);
[NtImpersonateThread]
1=HANDLE ServerThreadHandle
2=HANDLE ClientThreadHandle
3=PSECURITY_QUALITY_OF_SERVICE SecurityQos
ParamCount=3
@=NtImpersonateThread(HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);
[NtInitializeNlsFiles]
1=PVOID *BaseAddress
2=PLCID DefaultLocaleId
3=PLARGE_INTEGER DefaultCasingTableSize
ParamCount=3
@=NtInitializeNlsFiles(PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);
[NtInitializeRegistry]
1=USHORT BootCondition
ParamCount=1
@=NtInitializeRegistry(USHORT BootCondition);
[NtInitiatePowerAction]
1=POWER_ACTION SystemAction
2=SYSTEM_POWER_STATE LightestSystemState
3=ULONG Flags
4=BOOLEAN Asynchronous
ParamCount=4
@=NtInitiatePowerAction(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags, BOOLEAN Asynchronous);
[NtIsProcessInJob]
1=HANDLE ProcessHandle
2=HANDLE JobHandle
ParamCount=2
@=NtIsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle);
[NtIsSystemResumeAutomatic]
ParamCount=0
@=NtIsSystemResumeAutomatic();
[NtIsUILanguageComitted]
ParamCount=0
@=NtIsUILanguageComitted();
[NtListenPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE ConnectionRequest
ParamCount=2
@=NtListenPort(HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);
[NtLoadDriver]
1=PUNICODE_STRING DriverServiceName
ParamCount=1
@=NtLoadDriver(PUNICODE_STRING DriverServiceName);
[NtLoadKey]
1=POBJECT_ATTRIBUTES TargetKey
2=POBJECT_ATTRIBUTES SourceFile
ParamCount=2
@=NtLoadKey(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);
[NtLoadKey2]
1=POBJECT_ATTRIBUTES TargetKey
2=POBJECT_ATTRIBUTES SourceFile
3=ULONG Flags
ParamCount=3
@=NtLoadKey2(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);
[NtLoadKeyEx]
1=POBJECT_ATTRIBUTES TargetKey
2=POBJECT_ATTRIBUTES SourceFile
3=ULONG Flags
4=HANDLE TrustClassKey
ParamCount=4
@=NtLoadKeyEx(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey);
[NtLockFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PLARGE_INTEGER ByteOffset
7=PLARGE_INTEGER Length
8=ULONG Key
9=BOOLEAN FailImmediately
10=BOOLEAN ExclusiveLock
ParamCount=10
@=NtLockFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);
[NtLockProductActivationKeys]
1=ULONG *pPrivateVer
2=ULONG *pSafeMode
ParamCount=2
@=NtLockProductActivationKeys(ULONG *pPrivateVer, ULONG *pSafeMode);
[NtLockRegistryKey]
1=HANDLE KeyHandle
ParamCount=1
@=NtLockRegistryKey(HANDLE KeyHandle);
[NtLockVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG MapType
ParamCount=4
@=NtLockVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);
[NtMakePermanentObject]
1=HANDLE Handle
ParamCount=1
@=NtMakePermanentObject(HANDLE Handle);
[NtMakeTemporaryObject]
1=HANDLE Handle
ParamCount=1
@=NtMakeTemporaryObject(HANDLE Handle);
[NtManagePartition]
1=MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass
2=PVOID PartitionInformation
3=ULONG PartitionInformationLength
ParamCount=3
@=NtManagePartition(MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, PVOID PartitionInformation, ULONG PartitionInformationLength);
[NtMapCMFModule]
1=ULONG What
2=ULONG Index
3=PULONG CacheIndexOut
4=PULONG CacheFlagsOut
5=PULONG ViewSizeOut
6=PVOID *BaseAddress
ParamCount=6
@=NtMapCMFModule(ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);
[NtMapUserPhysicalPages]
1=PVOID VirtualAddress
2=ULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=NtMapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[NtMapUserPhysicalPagesScatter]
1=PVOID *VirtualAddresses
2=ULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=NtMapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[NtMapViewOfSection]
1=HANDLE SectionHandle
2=HANDLE ProcessHandle
3=PVOID *BaseAddress
4=ULONG_PTR ZeroBits
5=SIZE_T CommitSize
6=PLARGE_INTEGER SectionOffset
7=PSIZE_T ViewSize
8=SECTION_INHERIT InheritDisposition
9=ULONG AllocationType
10=ULONG Win32Protect
ParamCount=10
@=NtMapViewOfSection(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, ULONG Win32Protect);
[NtModifyBootEntry]
1=PBOOT_ENTRY BootEntry
ParamCount=1
@=NtModifyBootEntry(PBOOT_ENTRY BootEntry);
[NtModifyDriverEntry]
1=PEFI_DRIVER_ENTRY DriverEntry
ParamCount=1
@=NtModifyDriverEntry(PEFI_DRIVER_ENTRY DriverEntry);
[NtNotifyChangeDirectoryFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=FILE_NOTIFY_INFORMATION Buffer
7=ULONG Length
8=ULONG CompletionFilter
9=BOOLEAN WatchTree
ParamCount=9
@=NtNotifyChangeDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, FILE_NOTIFY_INFORMATION Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);
[NtNotifyChangeKey]
1=HANDLE KeyHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=ULONG CompletionFilter
7=BOOLEAN WatchTree
8=PVOID Buffer
9=ULONG BufferSize
10=BOOLEAN Asynchronous
ParamCount=10
@=NtNotifyChangeKey(HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
[NtNotifyChangeMultipleKeys]
1=HANDLE MasterKeyHandle
2=ULONG Count
3=OBJECT_ATTRIBUTES SubordinateObjects[]
4=HANDLE Event
5=PIO_APC_ROUTINE ApcRoutine
6=PVOID ApcContext
7=PIO_STATUS_BLOCK IoStatusBlock
8=ULONG CompletionFilter
9=BOOLEAN WatchTree
10=PVOID Buffer
11=ULONG BufferSize
12=BOOLEAN Asynchronous
ParamCount=12
@=NtNotifyChangeMultipleKeys(HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SubordinateObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
[NtNotifyChangeSession]
1=HANDLE SessionHandle
2=ULONG ChangeSequenceNumber
3=PLARGE_INTEGER ChangeTimeStamp
4=IO_SESSION_EVENT Event
5=IO_SESSION_STATE NewState
6=IO_SESSION_STATE PreviousState
7=PVOID Payload
8=ULONG PayloadSize
ParamCount=8
@=NtNotifyChangeSession(HANDLE SessionHandle, ULONG ChangeSequenceNumber, PLARGE_INTEGER ChangeTimeStamp, IO_SESSION_EVENT Event, IO_SESSION_STATE NewState, IO_SESSION_STATE PreviousState, PVOID Payload, ULONG PayloadSize);
[NtOpenDirectoryObject]
1=PHANDLE DirectoryHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenEnlistment]
1=PHANDLE EnlistmentHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE ResourceManagerHandle
4=LPGUID EnlistmentGuid
5=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=5
@=NtOpenEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenEvent]
1=PHANDLE EventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenEventPair]
1=PHANDLE EventPairHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenFile]
1=PHANDLE FileHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=ULONG ShareAccess
6=ULONG OpenOptions
ParamCount=6
@=NtOpenFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);
[NtOpenIoCompletion]
1=PHANDLE IoCompletionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenJobObject]
1=PHANDLE JobHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenKey]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenKeyedEvent]
1=PHANDLE KeyedEventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenKeyedEvent(PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenKeyEx]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG OpenOptions
ParamCount=4
@=NtOpenKeyEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);
[NtOpenKeyTransacted]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE TransactionHandle
ParamCount=4
@=NtOpenKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);
[NtOpenKeyTransactedEx]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG OpenOptions
5=HANDLE TransactionHandle
ParamCount=5
@=NtOpenKeyTransactedEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);
[NtOpenMutant]
1=PHANDLE MutantHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenMutant(PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=HANDLE ClientToken
7=ACCESS_MASK DesiredAccess
8=ACCESS_MASK GrantedAccess
9=PPRIVILEGE_SET Privileges
10=BOOLEAN ObjectCreation
11=BOOLEAN AccessGranted
12=PBOOLEAN GenerateOnClose
ParamCount=12
@=NtOpenObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);
[NtOpenPartition]
1=PHANDLE PartitionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenPartition(PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenPrivateNamespace]
1=PHANDLE NamespaceHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PVOID BoundaryDescriptor
ParamCount=4
@=NtOpenPrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
[NtOpenProcess]
1=PHANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PCLIENT_ID ClientId
ParamCount=4
@=NtOpenProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
[NtOpenProcessToken]
1=HANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=PHANDLE TokenHandle
ParamCount=3
@=NtOpenProcessToken(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
[NtOpenProcessTokenEx]
1=HANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=ULONG HandleAttributes
4=PHANDLE TokenHandle
ParamCount=4
@=NtOpenProcessTokenEx(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);
[NtOpenResourceManager]
1=PHANDLE ResourceManagerHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE TmHandle
4=LPGUID ResourceManagerGuid
5=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=5
@=NtOpenResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenSection]
1=PHANDLE SectionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenSemaphore]
1=PHANDLE SemaphoreHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenSession]
1=PHANDLE SessionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenSession(PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenSymbolicLinkObject]
1=PHANDLE LinkHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenThread]
1=PHANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PCLIENT_ID ClientId
ParamCount=4
@=NtOpenThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
[NtOpenThreadToken]
1=HANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=BOOLEAN OpenAsSelf
4=PHANDLE TokenHandle
ParamCount=4
@=NtOpenThreadToken(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);
[NtOpenThreadTokenEx]
1=HANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=BOOLEAN OpenAsSelf
4=ULONG HandleAttributes
5=PHANDLE TokenHandle
ParamCount=5
@=NtOpenThreadTokenEx(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);
[NtOpenTimer]
1=PHANDLE TimerHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=NtOpenTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[NtOpenTransaction]
1=PHANDLE TransactionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=LPGUID Uow
5=HANDLE TmHandle
ParamCount=5
@=NtOpenTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
[NtOpenTransactionManager]
1=PHANDLE TmHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PUNICODE_STRING LogFileName
5=LPGUID TmIdentity
6=ULONG OpenOptions
ParamCount=6
@=NtOpenTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
[NtPlugPlayControl]
1=PLUGPLAY_CONTROL_CLASS PnPControlClass
2=PVOID PnPControlData
3=ULONG PnPControlDataLength
ParamCount=3
@=NtPlugPlayControl(PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);
[NtPowerInformation]
1=POWER_INFORMATION_LEVEL InformationLevel
2=PVOID InputBuffer
3=ULONG InputBufferLength
4=PVOID OutputBuffer
5=ULONG OutputBufferLength
ParamCount=5
@=NtPowerInformation(POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
[NtPrepareComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtPrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtPrepareEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtPrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtPrePrepareComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtPrePrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtPrePrepareEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtPrePrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtPrivilegeCheck]
1=HANDLE ClientToken
2=PPRIVILEGE_SET RequiredPrivileges
3=PBOOLEAN Result
ParamCount=3
@=NtPrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
[NtPrivilegedServiceAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PUNICODE_STRING ServiceName
3=HANDLE ClientToken
4=PPRIVILEGE_SET Privileges
5=BOOLEAN AccessGranted
ParamCount=5
@=NtPrivilegedServiceAuditAlarm(PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
[NtPrivilegeObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=HANDLE ClientToken
4=ACCESS_MASK DesiredAccess
5=PPRIVILEGE_SET Privileges
6=BOOLEAN AccessGranted
ParamCount=6
@=NtPrivilegeObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
[NtPropagationComplete]
1=HANDLE ResourceManagerHandle
2=ULONG RequestCookie
3=ULONG BufferLength
4=PVOID Buffer
ParamCount=4
@=NtPropagationComplete(HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
[NtPropagationFailed]
1=HANDLE ResourceManagerHandle
2=ULONG RequestCookie
3=NTSTATUS PropStatus
ParamCount=3
@=NtPropagationFailed(HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);
[NtProtectVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG NewProtect
5=PULONG OldProtect
ParamCount=5
@=NtProtectVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG NewProtect, PULONG OldProtect);
[NtPulseEvent]
1=HANDLE EventHandle
2=PLONG PreviousState
ParamCount=2
@=NtPulseEvent(HANDLE EventHandle, PLONG PreviousState);
[NtQueryAttributesFile]
1=POBJECT_ATTRIBUTES ObjectAttributes
2=PFILE_BASIC_INFORMATION FileInformation
ParamCount=2
@=NtQueryAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);
[NtQueryBootEntryOrder]
1=PULONG Ids
2=PULONG Count
ParamCount=2
@=NtQueryBootEntryOrder(PULONG Ids, PULONG Count);
[NtQueryBootOptions]
1=PBOOT_OPTIONS BootOptions
2=PULONG BootOptionsLength
ParamCount=2
@=NtQueryBootOptions(PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);
[NtQueryDebugFilterState]
1=ULONG ComponentId
2=ULONG Level
ParamCount=2
@=NtQueryDebugFilterState(ULONG ComponentId, ULONG Level);
[NtQueryDefaultLocale]
1=BOOLEAN UserProfile
2=PLCID DefaultLocaleId
ParamCount=2
@=NtQueryDefaultLocale(BOOLEAN UserProfile, PLCID DefaultLocaleId);
[NtQueryDefaultUILanguage]
1=LANGID *DefaultUILanguageId
ParamCount=1
@=NtQueryDefaultUILanguage(LANGID *DefaultUILanguageId);
[NtQueryDirectoryFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PVOID FileInformation
7=ULONG Length
8=FILE_INFORMATION_CLASS FileInformationClass
9=BOOLEAN ReturnSingleEntry
10=PUNICODE_STRING FileName
11=BOOLEAN RestartScan
ParamCount=11
@=NtQueryDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);
[NtQueryDirectoryObject]
1=HANDLE DirectoryHandle
2=PVOID Buffer
3=ULONG Length
4=BOOLEAN ReturnSingleEntry
5=BOOLEAN RestartScan
6=PULONG Context
7=PULONG ReturnLength
ParamCount=7
@=NtQueryDirectoryObject(HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);
[NtQueryDriverEntryOrder]
1=PULONG Ids
2=PULONG Count
ParamCount=2
@=NtQueryDriverEntryOrder(PULONG Ids, PULONG Count);
[NtQueryEaFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
5=BOOLEAN ReturnSingleEntry
6=PVOID EaList
7=ULONG EaListLength
8=PULONG EaIndex
9=BOOLEAN RestartScan
ParamCount=9
@=NtQueryEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);
[NtQueryEvent]
1=HANDLE EventHandle
2=EVENT_INFORMATION_CLASS EventInformationClass
3=PVOID EventInformation
4=ULONG EventInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryEvent(HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);
[NtQueryFullAttributesFile]
1=POBJECT_ATTRIBUTES ObjectAttributes
2=PFILE_NETWORK_OPEN_INFORMATION FileInformation
ParamCount=2
@=NtQueryFullAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);
[NtQueryInformationAtom]
1=RTL_ATOM Atom
2=ATOM_INFORMATION_CLASS AtomInformationClass
3=PVOID AtomInformation
4=ULONG AtomInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationAtom(RTL_ATOM Atom, ATOM_INFORMATION_CLASS AtomInformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);
[NtQueryInformationEnlistment]
1=HANDLE EnlistmentHandle
2=ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass
3=PVOID EnlistmentInformation
4=ULONG EnlistmentInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
[NtQueryInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FileInformation
4=ULONG Length
5=FILE_INFORMATION_CLASS FileInformationClass
ParamCount=5
@=NtQueryInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
[NtQueryInformationJobObject]
1=HANDLE JobHandle
2=JOBOBJECTINFOCLASS JobObjectInformationClass
3=PVOID JobObjectInformation
4=ULONG JobObjectInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);
[NtQueryInformationPort]
1=HANDLE PortHandle
2=PORT_INFORMATION_CLASS PortInformationClass
3=PVOID PortInformation
4=ULONG Length
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationPort(HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);
[NtQueryInformationProcess]
1=HANDLE ProcessHandle
2=PROCESSINFOCLASS ProcessInformationClass
3=PVOID ProcessInformation
4=ULONG ProcessInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
[NtQueryInformationResourceManager]
1=HANDLE ResourceManagerHandle
2=RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass
3=PVOID ResourceManagerInformation
4=ULONG ResourceManagerInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
[NtQueryInformationThread]
1=HANDLE ThreadHandle
2=THREADINFOCLASS ThreadInformationClass
3=PVOID ThreadInformation
4=ULONG ThreadInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);
[NtQueryInformationToken]
1=HANDLE TokenHandle
2=TOKEN_INFORMATION_CLASS TokenInformationClass
3=PVOID TokenInformation
4=ULONG TokenInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);
[NtQueryInformationTransaction]
1=HANDLE TransactionHandle
2=TRANSACTION_INFORMATION_CLASS TransactionInformationClass
3=PVOID TransactionInformation
4=ULONG TransactionInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
[NtQueryInformationTransactionManager]
1=HANDLE TransactionManagerHandle
2=TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass
3=PVOID TransactionManagerInformation
4=ULONG TransactionManagerInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationTransactionManager(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
[NtQueryInformationWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=WORKERFACTORYINFOCLASS WorkerFactoryInformationClass
3=PVOID WorkerFactoryInformation
4=ULONG WorkerFactoryInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);
[NtQueryInstallUILanguage]
1=LANGID *InstallUILanguageId
ParamCount=1
@=NtQueryInstallUILanguage(LANGID *InstallUILanguageId);
[NtQueryIntervalProfile]
1=KPROFILE_SOURCE ProfileSource
2=PULONG Interval
ParamCount=2
@=NtQueryIntervalProfile(KPROFILE_SOURCE ProfileSource, PULONG Interval);
[NtQueryIoCompletion]
1=HANDLE IoCompletionHandle
2=IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass
3=PVOID IoCompletionInformation
4=ULONG IoCompletionInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryIoCompletion(HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);
[NtQueryKey]
1=HANDLE KeyHandle
2=KEY_INFORMATION_CLASS KeyInformationClass
3=PVOID KeyInformation
4=ULONG Length
5=PULONG ResultLength
ParamCount=5
@=NtQueryKey(HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
[NtQueryLicenseValue]
1=PUNICODE_STRING ValueName
2=PULONG Type
3=PVOID Data
4=ULONG DataSize
5=PULONG ResultDataSize
ParamCount=5
@=NtQueryLicenseValue(PUNICODE_STRING ValueName, PULONG Type, PVOID Data, ULONG DataSize, PULONG ResultDataSize);
[NtQueryMultipleValueKey]
1=HANDLE KeyHandle
2=PKEY_VALUE_ENTRY ValueEntries
3=ULONG EntryCount
4=PVOID ValueBuffer
5=PULONG BufferLength
6=PULONG RequiredBufferLength
ParamCount=6
@=NtQueryMultipleValueKey(HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);
[NtQueryMutant]
1=HANDLE MutantHandle
2=MUTANT_INFORMATION_CLASS MutantInformationClass
3=PVOID MutantInformation
4=ULONG MutantInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryMutant(HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);
[NtQueryObject]
1=HANDLE Handle
2=OBJECT_INFORMATION_CLASS ObjectInformationClass
3=PVOID ObjectInformation
4=ULONG ObjectInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);
[NtQueryOpenSubKeys]
1=POBJECT_ATTRIBUTES TargetKey
2=PULONG HandleCount
ParamCount=2
@=NtQueryOpenSubKeys(POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);
[NtQueryOpenSubKeysEx]
1=POBJECT_ATTRIBUTES TargetKey
2=ULONG BufferLength
3=PVOID Buffer
4=PULONG RequiredSize
ParamCount=4
@=NtQueryOpenSubKeysEx(POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);
[NtQueryPerformanceCounter]
1=PLARGE_INTEGER PerformanceCounter
2=PLARGE_INTEGER PerformanceFrequency
ParamCount=2
@=NtQueryPerformanceCounter(PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);
[NtQueryPortInformationProcess]
ParamCount=0
@=NtQueryPortInformationProcess();
[NtQueryQuotaInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
5=BOOLEAN ReturnSingleEntry
6=PVOID SidList
7=ULONG SidListLength
8=PSID StartSid
9=BOOLEAN RestartScan
ParamCount=9
@=NtQueryQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PSID StartSid, BOOLEAN RestartScan);
[NtQuerySection]
1=HANDLE SectionHandle
2=SECTION_INFORMATION_CLASS SectionInformationClass
3=PVOID SectionInformation
4=SIZE_T SectionInformationLength
5=PSIZE_T ReturnLength
ParamCount=5
@=NtQuerySection(HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);
[NtQuerySecurityAttributesToken]
1=HANDLE TokenHandle
2=PUNICODE_STRING Attributes
3=ULONG NumberOfAttributes
4=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION Buffer
5=ULONG Length
6=PULONG ReturnLength
ParamCount=6
@=NtQuerySecurityAttributesToken(HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION Buffer, ULONG Length, PULONG ReturnLength);
[NtQuerySecurityObject]
1=HANDLE Handle
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR SecurityDescriptor
4=ULONG Length
5=PULONG LengthNeeded
ParamCount=5
@=NtQuerySecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);
[NtQuerySemaphore]
1=HANDLE SemaphoreHandle
2=SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass
3=PVOID SemaphoreInformation
4=ULONG SemaphoreInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQuerySemaphore(HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);
[NtQuerySymbolicLinkObject]
1=HANDLE LinkHandle
2=PUNICODE_STRING LinkTarget
3=PULONG ReturnedLength
ParamCount=3
@=NtQuerySymbolicLinkObject(HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);
[NtQuerySystemEnvironmentValue]
1=PUNICODE_STRING VariableName
2=PWSTR VariableValue
3=USHORT ValueLength
4=PUSHORT ReturnLength
ParamCount=4
@=NtQuerySystemEnvironmentValue(PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);
[NtQuerySystemEnvironmentValueEx]
1=PUNICODE_STRING VariableName
2=LPGUID VendorGuid
3=PVOID Value
4=PULONG ValueLength
5=PULONG Attributes
ParamCount=5
@=NtQuerySystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);
[NtQuerySystemInformation]
1=SYSTEM_INFORMATION_CLASS SystemInformationClass
2=PVOID SystemInformation
3=ULONG SystemInformationLength
4=PULONG ReturnLength
ParamCount=4
@=NtQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
[NtQuerySystemInformationEx]
1=SYSTEM_INFORMATION_CLASS SystemInformationClass
2=PVOID InputBuffer
3=ULONG InputBufferLength
4=PVOID SystemInformation
5=ULONG SystemInformationLength
6=PULONG ReturnLength
ParamCount=6
@=NtQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID InputBuffer, ULONG InputBufferLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
[NtQuerySystemTime]
1=PLARGE_INTEGER SystemTime
ParamCount=1
@=NtQuerySystemTime(PLARGE_INTEGER SystemTime);
[NtQueryTimer]
1=HANDLE TimerHandle
2=TIMER_INFORMATION_CLASS TimerInformationClass
3=PVOID TimerInformation
4=ULONG TimerInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtQueryTimer(HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);
[NtQueryTimerResolution]
1=PULONG MaximumTime
2=PULONG MinimumTime
3=PULONG CurrentTime
ParamCount=3
@=NtQueryTimerResolution(PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);
[NtQueryValueKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING ValueName
3=KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass
4=PVOID KeyValueInformation
5=ULONG Length
6=PULONG ResultLength
ParamCount=6
@=NtQueryValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
[NtQueryVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=MEMORY_INFORMATION_CLASS MemoryInformationClass
4=PVOID MemoryInformation
5=SIZE_T MemoryInformationLength
6=PSIZE_T ReturnLength
ParamCount=6
@=NtQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);
[NtQueryVolumeInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FsInformation
4=ULONG Length
5=FS_INFORMATION_CLASS FsInformationClass
ParamCount=5
@=NtQueryVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
[NtQueryWnfStateData]
1=PCWNF_STATE_NAME StateName
2=PCWNF_TYPE_ID TypeId
3=VOID *ExplicitScope
4=PWNF_CHANGE_STAMP ChangeStamp
5=PVOID Buffer
6=PULONG BufferSize
ParamCount=6
@=NtQueryWnfStateData(PCWNF_STATE_NAME StateName, PCWNF_TYPE_ID TypeId, VOID *ExplicitScope, PWNF_CHANGE_STAMP ChangeStamp, PVOID Buffer, PULONG BufferSize);
[NtQueryWnfStateNameInformation]
1=PCWNF_STATE_NAME StateName
2=WNF_STATE_NAME_INFORMATION NameInfoClass
3=VOID *ExplicitScope
4=PVOID InfoBuffer
5=ULONG InfoBufferSize
ParamCount=5
@=NtQueryWnfStateNameInformation(PCWNF_STATE_NAME StateName, WNF_STATE_NAME_INFORMATION NameInfoClass, VOID *ExplicitScope, PVOID InfoBuffer, ULONG InfoBufferSize);
[NtQueueApcThread]
1=HANDLE ThreadHandle
2=PPS_APC_ROUTINE ApcRoutine
3=PVOID ApcArgument1
4=PVOID ApcArgument2
5=PVOID ApcArgument3
ParamCount=5
@=NtQueueApcThread(HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
[NtQueueApcThreadEx]
1=HANDLE ThreadHandle
2=HANDLE UserApcReserveHandle
3=PPS_APC_ROUTINE ApcRoutine
4=PVOID ApcArgument1
5=PVOID ApcArgument2
6=PVOID ApcArgument3
ParamCount=6
@=NtQueueApcThreadEx(HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
[NtRaiseException]
1=PEXCEPTION_RECORD ExceptionRecord
2=PCONTEXT ContextRecord
3=BOOLEAN FirstChance
ParamCount=3
@=NtRaiseException(PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);
[NtRaiseHardError]
1=NTSTATUS ErrorStatus
2=ULONG NumberOfParameters
3=ULONG UnicodeStringParameterMask
4=PULONG_PTR Parameters
5=ULONG ValidResponseOptions
6=PULONG Response
ParamCount=6
@=NtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);
[NtReadFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PVOID Buffer
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=NtReadFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[NtReadFileScatter]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PFILE_SEGMENT_ELEMENT SegmentArray
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=NtReadFileScatter(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[NtReadOnlyEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtReadOnlyEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtReadRequestData]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=ULONG DataEntryIndex
4=PVOID Buffer
5=SIZE_T BufferSize
6=PSIZE_T NumberOfBytesRead
ParamCount=6
@=NtReadRequestData(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
[NtReadVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=PVOID Buffer
4=SIZE_T BufferSize
5=PSIZE_T NumberOfBytesRead
ParamCount=5
@=NtReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
[NtRecoverEnlistment]
1=HANDLE EnlistmentHandle
2=PVOID EnlistmentKey
ParamCount=2
@=NtRecoverEnlistment(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
[NtRecoverResourceManager]
1=HANDLE ResourceManagerHandle
ParamCount=1
@=NtRecoverResourceManager(HANDLE ResourceManagerHandle);
[NtRecoverTransactionManager]
1=HANDLE TransactionManagerHandle
ParamCount=1
@=NtRecoverTransactionManager(HANDLE TransactionManagerHandle);
[NtRegisterProtocolAddressInformation]
1=HANDLE ResourceManager
2=PCRM_PROTOCOL_ID ProtocolId
3=ULONG ProtocolInformationSize
4=PVOID ProtocolInformation
5=ULONG CreateOptions
ParamCount=5
@=NtRegisterProtocolAddressInformation(HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);
[NtRegisterThreadTerminatePort]
1=HANDLE PortHandle
ParamCount=1
@=NtRegisterThreadTerminatePort(HANDLE PortHandle);
[NtReleaseKeyedEvent]
1=HANDLE KeyedEventHandle
2=PVOID KeyValue
3=BOOLEAN Alertable
4=PLARGE_INTEGER Timeout
ParamCount=4
@=NtReleaseKeyedEvent(HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[NtReleaseMutant]
1=HANDLE MutantHandle
2=PLONG PreviousCount
ParamCount=2
@=NtReleaseMutant(HANDLE MutantHandle, PLONG PreviousCount);
[NtReleaseSemaphore]
1=HANDLE SemaphoreHandle
2=LONG ReleaseCount
3=PLONG PreviousCount
ParamCount=3
@=NtReleaseSemaphore(HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);
[NtReleaseWorkerFactoryWorker]
1=HANDLE WorkerFactoryHandle
ParamCount=1
@=NtReleaseWorkerFactoryWorker(HANDLE WorkerFactoryHandle);
[NtRemoveIoCompletion]
1=HANDLE IoCompletionHandle
2=PVOID *KeyContext
3=PVOID *ApcContext
4=PIO_STATUS_BLOCK IoStatusBlock
5=PLARGE_INTEGER Timeout
ParamCount=5
@=NtRemoveIoCompletion(HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);
[NtRemoveIoCompletionEx]
1=HANDLE IoCompletionHandle
2=PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation
3=ULONG Count
4=PULONG NumEntriesRemoved
5=PLARGE_INTEGER Timeout
6=BOOLEAN Alertable
ParamCount=6
@=NtRemoveIoCompletionEx(HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);
[NtRemoveProcessDebug]
1=HANDLE ProcessHandle
2=HANDLE DebugObjectHandle
ParamCount=2
@=NtRemoveProcessDebug(HANDLE ProcessHandle, HANDLE DebugObjectHandle);
[NtRenameKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING NewName
ParamCount=2
@=NtRenameKey(HANDLE KeyHandle, PUNICODE_STRING NewName);
[NtRenameTransactionManager]
1=PUNICODE_STRING LogFileName
2=LPGUID ExistingTransactionManagerGuid
ParamCount=2
@=NtRenameTransactionManager(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
[NtReplaceKey]
1=POBJECT_ATTRIBUTES NewFile
2=HANDLE TargetHandle
3=POBJECT_ATTRIBUTES OldFile
ParamCount=3
@=NtReplaceKey(POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);
[NtReplacePartitionUnit]
1=PUNICODE_STRING TargetInstancePath
2=PUNICODE_STRING SpareInstancePath
3=ULONG Flags
ParamCount=3
@=NtReplacePartitionUnit(PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);
[NtReplyPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE ReplyMessage
ParamCount=2
@=NtReplyPort(HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);
[NtReplyWaitReceivePort]
1=HANDLE PortHandle
2=PVOID *PortContext
3=PPORT_MESSAGE ReplyMessage
4=PPORT_MESSAGE ReceiveMessage
ParamCount=4
@=NtReplyWaitReceivePort(HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);
[NtReplyWaitReceivePortEx]
1=HANDLE PortHandle
2=PVOID *PortContext
3=PPORT_MESSAGE ReplyMessage
4=PPORT_MESSAGE ReceiveMessage
5=PLARGE_INTEGER Timeout
ParamCount=5
@=NtReplyWaitReceivePortEx(HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);
[NtReplyWaitReplyPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE ReplyMessage
ParamCount=2
@=NtReplyWaitReplyPort(HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);
[NtRequestPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE RequestMessage
ParamCount=2
@=NtRequestPort(HANDLE PortHandle, PPORT_MESSAGE RequestMessage);
[NtRequestWaitReplyPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE RequestMessage
3=PPORT_MESSAGE ReplyMessage
ParamCount=3
@=NtRequestWaitReplyPort(HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);
[NtResetEvent]
1=HANDLE EventHandle
2=PLONG PreviousState
ParamCount=2
@=NtResetEvent(HANDLE EventHandle, PLONG PreviousState);
[NtResetWriteWatch]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=SIZE_T RegionSize
ParamCount=3
@=NtResetWriteWatch(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);
[NtRestoreKey]
1=HANDLE KeyHandle
2=HANDLE FileHandle
3=ULONG Flags
ParamCount=3
@=NtRestoreKey(HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);
[NtResumeProcess]
1=HANDLE ProcessHandle
ParamCount=1
@=NtResumeProcess(HANDLE ProcessHandle);
[NtResumeThread]
1=HANDLE ThreadHandle
2=PULONG PreviousSuspendCount
ParamCount=2
@=NtResumeThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
[NtRevertContainerImpersonation]
ParamCount=0
@=NtRevertContainerImpersonation();
[NtRollbackComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtRollbackComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtRollbackEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtRollbackEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtRollbackTransaction]
1=HANDLE TransactionHandle
2=BOOLEAN Wait
ParamCount=2
@=NtRollbackTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
[NtRollforwardTransactionManager]
1=HANDLE TransactionManagerHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtRollforwardTransactionManager(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
[NtSaveKey]
1=HANDLE KeyHandle
2=HANDLE FileHandle
ParamCount=2
@=NtSaveKey(HANDLE KeyHandle, HANDLE FileHandle);
[NtSaveKeyEx]
1=HANDLE KeyHandle
2=HANDLE FileHandle
3=ULONG Format
ParamCount=3
@=NtSaveKeyEx(HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);
[NtSaveMergedKeys]
1=HANDLE HighPrecedenceKeyHandle
2=HANDLE LowPrecedenceKeyHandle
3=HANDLE FileHandle
ParamCount=3
@=NtSaveMergedKeys(HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);
[NtSecureConnectPort]
1=PHANDLE PortHandle
2=PUNICODE_STRING PortName
3=PSECURITY_QUALITY_OF_SERVICE SecurityQos
4=PPORT_VIEW ClientView
5=PSID RequiredServerSid
6=PREMOTE_PORT_VIEW ServerView
7=PULONG MaxMessageLength
8=PVOID ConnectionInformation
9=PULONG ConnectionInformationLength
ParamCount=9
@=NtSecureConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
[NtSerializeBoot]
ParamCount=0
@=NtSerializeBoot();
[NtSetBootEntryOrder]
1=PULONG Ids
2=ULONG Count
ParamCount=2
@=NtSetBootEntryOrder(PULONG Ids, ULONG Count);
[NtSetBootOptions]
1=PBOOT_OPTIONS BootOptions
2=ULONG FieldsToChange
ParamCount=2
@=NtSetBootOptions(PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);
[NtSetCachedSigningLevel]
1=ULONG Flags
2=SE_SIGNING_LEVEL InputSigningLevel
3=PHANDLE SourceFiles
4=ULONG SourceFileCount
5=HANDLE TargetFile
ParamCount=5
@=NtSetCachedSigningLevel(ULONG Flags, SE_SIGNING_LEVEL InputSigningLevel, PHANDLE SourceFiles, ULONG SourceFileCount, HANDLE TargetFile);
[NtSetContextThread]
1=HANDLE ThreadHandle
2=PCONTEXT ThreadContext
ParamCount=2
@=NtSetContextThread(HANDLE ThreadHandle, PCONTEXT ThreadContext);
[NtSetDebugFilterState]
1=ULONG ComponentId
2=ULONG Level
3=BOOLEAN State
ParamCount=3
@=NtSetDebugFilterState(ULONG ComponentId, ULONG Level, BOOLEAN State);
[NtSetDefaultHardErrorPort]
1=HANDLE DefaultHardErrorPort
ParamCount=1
@=NtSetDefaultHardErrorPort(HANDLE DefaultHardErrorPort);
[NtSetDefaultLocale]
1=BOOLEAN UserProfile
2=LCID DefaultLocaleId
ParamCount=2
@=NtSetDefaultLocale(BOOLEAN UserProfile, LCID DefaultLocaleId);
[NtSetDefaultUILanguage]
1=LANGID DefaultUILanguageId
ParamCount=1
@=NtSetDefaultUILanguage(LANGID DefaultUILanguageId);
[NtSetDriverEntryOrder]
1=PULONG Ids
2=ULONG Count
ParamCount=2
@=NtSetDriverEntryOrder(PULONG Ids, ULONG Count);
[NtSetEaFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
ParamCount=4
@=NtSetEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
[NtSetEvent]
1=HANDLE EventHandle
2=PLONG PreviousState
ParamCount=2
@=NtSetEvent(HANDLE EventHandle, PLONG PreviousState);
[NtSetEventBoostPriority]
1=HANDLE EventHandle
ParamCount=1
@=NtSetEventBoostPriority(HANDLE EventHandle);
[NtSetHighEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=NtSetHighEventPair(HANDLE EventPairHandle);
[NtSetHighWaitLowEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=NtSetHighWaitLowEventPair(HANDLE EventPairHandle);
[NtSetInformationDebugObject]
1=HANDLE DebugObjectHandle
2=DEBUGOBJECTINFOCLASS DebugObjectInformationClass
3=PVOID DebugInformation
4=ULONG DebugInformationLength
5=PULONG ReturnLength
ParamCount=5
@=NtSetInformationDebugObject(HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);
[NtSetInformationEnlistment]
1=HANDLE EnlistmentHandle
2=ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass
3=PVOID EnlistmentInformation
4=ULONG EnlistmentInformationLength
ParamCount=4
@=NtSetInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
[NtSetInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FileInformation
4=ULONG Length
5=FILE_INFORMATION_CLASS FileInformationClass
ParamCount=5
@=NtSetInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
[NtSetInformationJobObject]
1=HANDLE JobHandle
2=JOBOBJECTINFOCLASS JobObjectInformationClass
3=PVOID JobObjectInformation
4=ULONG JobObjectInformationLength
ParamCount=4
@=NtSetInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);
[NtSetInformationKey]
1=HANDLE KeyHandle
2=KEY_SET_INFORMATION_CLASS KeySetInformationClass
3=PVOID KeySetInformation
4=ULONG KeySetInformationLength
ParamCount=4
@=NtSetInformationKey(HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);
[NtSetInformationObject]
1=HANDLE Handle
2=OBJECT_INFORMATION_CLASS ObjectInformationClass
3=PVOID ObjectInformation
4=ULONG ObjectInformationLength
ParamCount=4
@=NtSetInformationObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);
[NtSetInformationProcess]
1=HANDLE ProcessHandle
2=PROCESSINFOCLASS ProcessInformationClass
3=PVOID ProcessInformation
4=ULONG ProcessInformationLength
ParamCount=4
@=NtSetInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);
[NtSetInformationResourceManager]
1=HANDLE ResourceManagerHandle
2=RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass
3=PVOID ResourceManagerInformation
4=ULONG ResourceManagerInformationLength
ParamCount=4
@=NtSetInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
[NtSetInformationThread]
1=HANDLE ThreadHandle
2=THREADINFOCLASS ThreadInformationClass
3=PVOID ThreadInformation
4=ULONG ThreadInformationLength
ParamCount=4
@=NtSetInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);
[NtSetInformationToken]
1=HANDLE TokenHandle
2=TOKEN_INFORMATION_CLASS TokenInformationClass
3=PVOID TokenInformation
4=ULONG TokenInformationLength
ParamCount=4
@=NtSetInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);
[NtSetInformationTransaction]
1=HANDLE TransactionHandle
2=TRANSACTION_INFORMATION_CLASS TransactionInformationClass
3=PVOID TransactionInformation
4=ULONG TransactionInformationLength
ParamCount=4
@=NtSetInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
[NtSetInformationTransactionManager]
1=HANDLE TmHandle
2=TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass
3=PVOID TransactionManagerInformation
4=ULONG TransactionManagerInformationLength
ParamCount=4
@=NtSetInformationTransactionManager(HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);
[NtSetInformationVirtualMemory]
1=HANDLE ProcessHandle
2=VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass
3=ULONG_PTR NumberOfEntries
4=PMEMORY_RANGE_ENTRY VirtualAddresses
5=PVOID VmInformation
6=ULONG VmInformationLength
ParamCount=6
@=NtSetInformationVirtualMemory(HANDLE ProcessHandle, VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass, ULONG_PTR NumberOfEntries, PMEMORY_RANGE_ENTRY VirtualAddresses, PVOID VmInformation, ULONG VmInformationLength);
[NtSetInformationWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=WORKERFACTORYINFOCLASS WorkerFactoryInformationClass
3=PVOID WorkerFactoryInformation
4=ULONG WorkerFactoryInformationLength
ParamCount=4
@=NtSetInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);
[NtSetIntervalProfile]
1=ULONG Interval
2=KPROFILE_SOURCE Source
ParamCount=2
@=NtSetIntervalProfile(ULONG Interval, KPROFILE_SOURCE Source);
[NtSetIoCompletion]
1=HANDLE IoCompletionHandle
2=PVOID KeyContext
3=PVOID ApcContext
4=NTSTATUS IoStatus
5=ULONG_PTR IoStatusInformation
ParamCount=5
@=NtSetIoCompletion(HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);
[NtSetIoCompletionEx]
1=HANDLE IoCompletionHandle
2=HANDLE IoCompletionPacketHandle
3=PVOID KeyContext
4=PVOID ApcContext
5=NTSTATUS IoStatus
6=ULONG_PTR IoStatusInformation
ParamCount=6
@=NtSetIoCompletionEx(HANDLE IoCompletionHandle, HANDLE IoCompletionPacketHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);
[NtSetIRTimer]
1=HANDLE TimerHandle
2=PLARGE_INTEGER DueTime
ParamCount=2
@=NtSetIRTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime);
[NtSetLdtEntries]
1=ULONG Selector0
2=ULONG Entry0Low
3=ULONG Entry0Hi
4=ULONG Selector1
5=ULONG Entry1Low
6=ULONG Entry1Hi
ParamCount=6
@=NtSetLdtEntries(ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);
[NtSetLowEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=NtSetLowEventPair(HANDLE EventPairHandle);
[NtSetLowWaitHighEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=NtSetLowWaitHighEventPair(HANDLE EventPairHandle);
[NtSetQuotaInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
ParamCount=4
@=NtSetQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
[NtSetSecurityObject]
1=HANDLE Handle
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=3
@=NtSetSecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
[NtSetSystemEnvironmentValue]
1=PUNICODE_STRING VariableName
2=PUNICODE_STRING VariableValue
ParamCount=2
@=NtSetSystemEnvironmentValue(PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);
[NtSetSystemEnvironmentValueEx]
1=PUNICODE_STRING VariableName
2=LPGUID VendorGuid
3=PVOID Value
4=ULONG ValueLength
5=ULONG Attributes
ParamCount=5
@=NtSetSystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);
[NtSetSystemInformation]
1=SYSTEM_INFORMATION_CLASS SystemInformationClass
2=PVOID SystemInformation
3=ULONG SystemInformationLength
ParamCount=3
@=NtSetSystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);
[NtSetSystemPowerState]
1=POWER_ACTION SystemAction
2=SYSTEM_POWER_STATE LightestSystemState
3=ULONG Flags
ParamCount=3
@=NtSetSystemPowerState(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags);
[NtSetSystemTime]
1=PLARGE_INTEGER SystemTime
2=PLARGE_INTEGER PreviousTime
ParamCount=2
@=NtSetSystemTime(PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);
[NtSetThreadExecutionState]
1=EXECUTION_STATE NewFlags
2=EXECUTION_STATE *PreviousFlags
ParamCount=2
@=NtSetThreadExecutionState(EXECUTION_STATE NewFlags, EXECUTION_STATE *PreviousFlags);
[NtSetTimer]
1=HANDLE TimerHandle
2=PLARGE_INTEGER DueTime
3=PTIMER_APC_ROUTINE TimerApcRoutine
4=PVOID TimerContext
5=BOOLEAN ResumeTimer
6=LONG Period
7=PBOOLEAN PreviousState
ParamCount=7
@=NtSetTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN ResumeTimer, LONG Period, PBOOLEAN PreviousState);
[NtSetTimer2]
1=HANDLE TimerHandle
2=PLARGE_INTEGER DueTime
3=PLARGE_INTEGER Period
4=PT2_SET_PARAMETERS Parameters
ParamCount=4
@=NtSetTimer2(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PLARGE_INTEGER Period, PT2_SET_PARAMETERS Parameters);
[NtSetTimerEx]
1=HANDLE TimerHandle
2=TIMER_SET_INFORMATION_CLASS TimerSetInformationClass
3=PVOID TimerSetInformation
4=ULONG TimerSetInformationLength
ParamCount=4
@=NtSetTimerEx(HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);
[NtSetTimerResolution]
1=ULONG DesiredTime
2=BOOLEAN SetResolution
3=PULONG ActualTime
ParamCount=3
@=NtSetTimerResolution(ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);
[NtSetUuidSeed]
1=PCHAR Seed
ParamCount=1
@=NtSetUuidSeed(PCHAR Seed);
[NtSetValueKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING ValueName
3=ULONG TitleIndex
4=ULONG Type
5=PVOID Data
6=ULONG DataSize
ParamCount=6
@=NtSetValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);
[NtSetVolumeInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FsInformation
4=ULONG Length
5=FS_INFORMATION_CLASS FsInformationClass
ParamCount=5
@=NtSetVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
[NtSetWnfProcessNotificationEvent]
1=HANDLE NotificationEvent
ParamCount=1
@=NtSetWnfProcessNotificationEvent(HANDLE NotificationEvent);
[NtShutdownSystem]
1=SHUTDOWN_ACTION Action
ParamCount=1
@=NtShutdownSystem(SHUTDOWN_ACTION Action);
[NtShutdownWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=LONG *PendingWorkerCount
ParamCount=2
@=NtShutdownWorkerFactory(HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);
[NtSignalAndWaitForSingleObject]
1=HANDLE SignalHandle
2=HANDLE WaitHandle
3=BOOLEAN Alertable
4=PLARGE_INTEGER Timeout
ParamCount=4
@=NtSignalAndWaitForSingleObject(HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[NtSinglePhaseReject]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=NtSinglePhaseReject(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[NtStartProfile]
1=HANDLE ProfileHandle
ParamCount=1
@=NtStartProfile(HANDLE ProfileHandle);
[NtStopProfile]
1=HANDLE ProfileHandle
ParamCount=1
@=NtStopProfile(HANDLE ProfileHandle);
[NtSubscribeWnfStateChange]
1=PCWNF_STATE_NAME StateName
2=WNF_CHANGE_STAMP ChangeStamp
3=ULONG EventMask
4=PULONG64 SubscriptionId
ParamCount=4
@=NtSubscribeWnfStateChange(PCWNF_STATE_NAME StateName, WNF_CHANGE_STAMP ChangeStamp, ULONG EventMask, PULONG64 SubscriptionId);
[NtSuspendProcess]
1=HANDLE ProcessHandle
ParamCount=1
@=NtSuspendProcess(HANDLE ProcessHandle);
[NtSuspendThread]
1=HANDLE ThreadHandle
2=PULONG PreviousSuspendCount
ParamCount=2
@=NtSuspendThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
[NtSystemDebugControl]
1=SYSDBG_COMMAND Command
2=PVOID InputBuffer
3=ULONG InputBufferLength
4=PVOID OutputBuffer
5=ULONG OutputBufferLength
6=PULONG ReturnLength
ParamCount=6
@=NtSystemDebugControl(SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);
[NtTerminateJobObject]
1=HANDLE JobHandle
2=NTSTATUS ExitStatus
ParamCount=2
@=NtTerminateJobObject(HANDLE JobHandle, NTSTATUS ExitStatus);
[NtTerminateProcess]
1=HANDLE ProcessHandle
2=NTSTATUS ExitStatus
ParamCount=2
@=NtTerminateProcess(HANDLE ProcessHandle, NTSTATUS ExitStatus);
[NtTerminateThread]
1=HANDLE ThreadHandle
2=NTSTATUS ExitStatus
ParamCount=2
@=NtTerminateThread(HANDLE ThreadHandle, NTSTATUS ExitStatus);
[NtTestAlert]
ParamCount=0
@=NtTestAlert();
[NtThawRegistry]
ParamCount=0
@=NtThawRegistry();
[NtThawTransactions]
ParamCount=0
@=NtThawTransactions();
[NtTraceControl]
1=ULONG FunctionCode
2=PVOID InBuffer
3=ULONG InBufferLen
4=PVOID OutBuffer
5=ULONG OutBufferLen
6=PULONG ReturnLength
ParamCount=6
@=NtTraceControl(ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);
[NtTraceEvent]
1=HANDLE TraceHandle
2=ULONG Flags
3=ULONG FieldSize
4=PVOID Fields
ParamCount=4
@=NtTraceEvent(HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);
[NtTranslateFilePath]
1=PFILE_PATH InputFilePath
2=ULONG OutputType
3=PFILE_PATH OutputFilePath
4=PULONG OutputFilePathLength
ParamCount=4
@=NtTranslateFilePath(PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);
[NtUmsThreadYield]
1=PVOID SchedulerParam
ParamCount=1
@=NtUmsThreadYield(PVOID SchedulerParam);
[NtUnloadDriver]
1=PUNICODE_STRING DriverServiceName
ParamCount=1
@=NtUnloadDriver(PUNICODE_STRING DriverServiceName);
[NtUnloadKey]
1=POBJECT_ATTRIBUTES TargetKey
ParamCount=1
@=NtUnloadKey(POBJECT_ATTRIBUTES TargetKey);
[NtUnloadKey2]
1=POBJECT_ATTRIBUTES TargetKey
2=ULONG Flags
ParamCount=2
@=NtUnloadKey2(POBJECT_ATTRIBUTES TargetKey, ULONG Flags);
[NtUnloadKeyEx]
1=POBJECT_ATTRIBUTES TargetKey
2=HANDLE Event
ParamCount=2
@=NtUnloadKeyEx(POBJECT_ATTRIBUTES TargetKey, HANDLE Event);
[NtUnlockFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PLARGE_INTEGER ByteOffset
4=PLARGE_INTEGER Length
5=ULONG Key
ParamCount=5
@=NtUnlockFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);
[NtUnlockVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG MapType
ParamCount=4
@=NtUnlockVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);
[NtUnmapViewOfSection]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
ParamCount=2
@=NtUnmapViewOfSection(HANDLE ProcessHandle, PVOID BaseAddress);
[NtUnmapViewOfSectionEx]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=ULONG Flags
ParamCount=3
@=NtUnmapViewOfSectionEx(HANDLE ProcessHandle, PVOID BaseAddress, ULONG Flags);
[NtUnsubscribeWnfStateChange]
1=PCWNF_STATE_NAME StateName
ParamCount=1
@=NtUnsubscribeWnfStateChange(PCWNF_STATE_NAME StateName);
[NtUpdateWnfStateData]
1=PCWNF_STATE_NAME StateName
2=VOID *Buffer
3=ULONG Length
4=PCWNF_TYPE_ID TypeId
5=VOID *ExplicitScope
6=WNF_CHANGE_STAMP MatchingChangeStamp
7=LOGICAL CheckStamp
ParamCount=7
@=NtUpdateWnfStateData(PCWNF_STATE_NAME StateName, VOID *Buffer, ULONG Length, PCWNF_TYPE_ID TypeId, VOID *ExplicitScope, WNF_CHANGE_STAMP MatchingChangeStamp, LOGICAL CheckStamp);
[NtVdmControl]
1=VDMSERVICECLASS Service
2=PVOID ServiceData
ParamCount=2
@=NtVdmControl(VDMSERVICECLASS Service, PVOID ServiceData);
[NtWaitForAlertByThreadId]
1=PVOID Address
2=PLARGE_INTEGER Timeout
ParamCount=2
@=NtWaitForAlertByThreadId(PVOID Address, PLARGE_INTEGER Timeout);
[NtWaitForDebugEvent]
1=HANDLE DebugObjectHandle
2=BOOLEAN Alertable
3=PLARGE_INTEGER Timeout
4=PVOID WaitStateChange
ParamCount=4
@=NtWaitForDebugEvent(HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PVOID WaitStateChange);
[NtWaitForKeyedEvent]
1=HANDLE KeyedEventHandle
2=PVOID KeyValue
3=BOOLEAN Alertable
4=PLARGE_INTEGER Timeout
ParamCount=4
@=NtWaitForKeyedEvent(HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[NtWaitForMultipleObjects]
1=ULONG Count
2=HANDLE Handles[]
3=WAIT_TYPE WaitType
4=BOOLEAN Alertable
5=PLARGE_INTEGER Timeout
ParamCount=5
@=NtWaitForMultipleObjects(ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[NtWaitForMultipleObjects32]
1=ULONG Count
2=LONG Handles[]
3=WAIT_TYPE WaitType
4=BOOLEAN Alertable
5=PLARGE_INTEGER Timeout
ParamCount=5
@=NtWaitForMultipleObjects32(ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[NtWaitForSingleObject]
1=HANDLE Handle
2=BOOLEAN Alertable
3=PLARGE_INTEGER Timeout
ParamCount=3
@=NtWaitForSingleObject(HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[NtWaitForWorkViaWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=_FILE_IO_COMPLETION_INFORMATION *MiniPacket
ParamCount=2
@=NtWaitForWorkViaWorkerFactory(HANDLE WorkerFactoryHandle, _FILE_IO_COMPLETION_INFORMATION *MiniPacket);
[NtWaitHighEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=NtWaitHighEventPair(HANDLE EventPairHandle);
[NtWaitLowEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=NtWaitLowEventPair(HANDLE EventPairHandle);
[NtWorkerFactoryWorkerReady]
1=HANDLE WorkerFactoryHandle
ParamCount=1
@=NtWorkerFactoryWorkerReady(HANDLE WorkerFactoryHandle);
[NtWriteFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PVOID Buffer
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=NtWriteFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[NtWriteFileGather]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PFILE_SEGMENT_ELEMENT SegmentArray
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=NtWriteFileGather(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[NtWriteRequestData]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=ULONG DataEntryIndex
4=PVOID Buffer
5=SIZE_T BufferSize
6=PSIZE_T NumberOfBytesWritten
ParamCount=6
@=NtWriteRequestData(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);
[NtWriteVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=PVOID Buffer
4=SIZE_T BufferSize
5=PSIZE_T NumberOfBytesWritten
ParamCount=5
@=NtWriteVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);
[NtYieldExecution]
ParamCount=0
@=NtYieldExecution();
[PfxFindPrefix]
1=PPREFIX_TABLE PrefixTable
2=PSTRING FullName
ParamCount=2
@=PfxFindPrefix(PPREFIX_TABLE PrefixTable, PSTRING FullName);
[PfxInitialize]
1=PPREFIX_TABLE PrefixTable
ParamCount=1
@=PfxInitialize(PPREFIX_TABLE PrefixTable);
[PfxInsertPrefix]
1=PPREFIX_TABLE PrefixTable
2=PSTRING Prefix
3=PPREFIX_TABLE_ENTRY PrefixTableEntry
ParamCount=3
@=PfxInsertPrefix(PPREFIX_TABLE PrefixTable, PSTRING Prefix, PPREFIX_TABLE_ENTRY PrefixTableEntry);
[PfxRemovePrefix]
1=PPREFIX_TABLE PrefixTable
2=PPREFIX_TABLE_ENTRY PrefixTableEntry
ParamCount=2
@=PfxRemovePrefix(PPREFIX_TABLE PrefixTable, PPREFIX_TABLE_ENTRY PrefixTableEntry);
[RtlAbortRXact]
1=PRTL_RXACT_CONTEXT RXactContext
ParamCount=1
@=RtlAbortRXact(PRTL_RXACT_CONTEXT RXactContext);
[RtlAbsoluteToSelfRelativeSD]
1=PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor
2=PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor
3=PULONG BufferLength
ParamCount=3
@=RtlAbsoluteToSelfRelativeSD(PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor, PULONG BufferLength);
[RtlAcquirePebLock]
ParamCount=0
@=RtlAcquirePebLock();
[RtlAcquirePrivilege]
1=PULONG Privilege
2=ULONG NumPriv
3=ULONG Flags
4=PVOID *ReturnedState
ParamCount=4
@=RtlAcquirePrivilege(PULONG Privilege, ULONG NumPriv, ULONG Flags, PVOID *ReturnedState);
[RtlAcquireReleaseSRWLockExclusive]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlAcquireReleaseSRWLockExclusive(PRTL_SRWLOCK SRWLock);
[RtlAcquireResourceExclusive]
1=PRTL_RESOURCE Resource
2=BOOLEAN Wait
ParamCount=2
@=RtlAcquireResourceExclusive(PRTL_RESOURCE Resource, BOOLEAN Wait);
[RtlAcquireResourceShared]
1=PRTL_RESOURCE Resource
2=BOOLEAN Wait
ParamCount=2
@=RtlAcquireResourceShared(PRTL_RESOURCE Resource, BOOLEAN Wait);
[RtlAcquireSRWLockExclusive]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlAcquireSRWLockExclusive(PRTL_SRWLOCK SRWLock);
[RtlAcquireSRWLockShared]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlAcquireSRWLockShared(PRTL_SRWLOCK SRWLock);
[RtlActivateActivationContext]
1=ULONG Flags
2=PACTIVATION_CONTEXT ActivationContext
3=ULONG_PTR *Cookie
ParamCount=3
@=RtlActivateActivationContext(ULONG Flags, PACTIVATION_CONTEXT ActivationContext, ULONG_PTR *Cookie);
[RtlActivateActivationContextEx]
1=ULONG Flags
2=PTEB Teb
3=PACTIVATION_CONTEXT ActivationContext
4=PULONG_PTR Cookie
ParamCount=4
@=RtlActivateActivationContextEx(ULONG Flags, PTEB Teb, PACTIVATION_CONTEXT ActivationContext, PULONG_PTR Cookie);
[RtlActivateActivationContextUnsafeFast]
1=PRTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME Frame
2=PACTIVATION_CONTEXT ActivationContext
ParamCount=2
@=RtlActivateActivationContextUnsafeFast(PRTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME Frame, PACTIVATION_CONTEXT ActivationContext);
[RtlAddAccessAllowedAce]
1=PACL Acl
2=ULONG AceRevision
3=ACCESS_MASK AccessMask
4=PSID Sid
ParamCount=4
@=RtlAddAccessAllowedAce(PACL Acl, ULONG AceRevision, ACCESS_MASK AccessMask, PSID Sid);
[RtlAddAccessAllowedAceEx]
1=PACL Acl
2=ULONG AceRevision
3=ULONG AceFlags
4=ACCESS_MASK AccessMask
5=PSID Sid
ParamCount=5
@=RtlAddAccessAllowedAceEx(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, PSID Sid);
[RtlAddAccessAllowedObjectAce]
1=PACL Acl
2=ULONG AceRevision
3=ULONG AceFlags
4=ACCESS_MASK AccessMask
5=GUID *ObjectTypeGuid
6=GUID *InheritedObjectTypeGuid
7=PSID Sid
ParamCount=7
@=RtlAddAccessAllowedObjectAce(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID Sid);
[RtlAddAccessDeniedAce]
1=PACL Acl
2=ULONG AceRevision
3=ACCESS_MASK AccessMask
4=PSID Sid
ParamCount=4
@=RtlAddAccessDeniedAce(PACL Acl, ULONG AceRevision, ACCESS_MASK AccessMask, PSID Sid);
[RtlAddAccessDeniedAceEx]
1=PACL Acl
2=ULONG AceRevision
3=ULONG AceFlags
4=ACCESS_MASK AccessMask
5=PSID Sid
ParamCount=5
@=RtlAddAccessDeniedAceEx(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, PSID Sid);
[RtlAddAccessDeniedObjectAce]
1=PACL Acl
2=ULONG AceRevision
3=ULONG AceFlags
4=ACCESS_MASK AccessMask
5=GUID *ObjectTypeGuid
6=GUID *InheritedObjectTypeGuid
7=PSID Sid
ParamCount=7
@=RtlAddAccessDeniedObjectAce(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID Sid);
[RtlAddAce]
1=PACL Acl
2=ULONG AceRevision
3=ULONG StartingAceIndex
4=PVOID AceList
5=ULONG AceListLength
ParamCount=5
@=RtlAddAce(PACL Acl, ULONG AceRevision, ULONG StartingAceIndex, PVOID AceList, ULONG AceListLength);
[RtlAddActionToRXact]
1=PRTL_RXACT_CONTEXT RXactContext
2=RTL_RXACT_OPERATION Operation
3=PUNICODE_STRING SubKeyName
4=ULONG NewKeyValueType
5=PVOID NewKeyValue
6=ULONG NewKeyValueLength
ParamCount=6
@=RtlAddActionToRXact(PRTL_RXACT_CONTEXT RXactContext, RTL_RXACT_OPERATION Operation, PUNICODE_STRING SubKeyName, ULONG NewKeyValueType, PVOID NewKeyValue, ULONG NewKeyValueLength);
[RtlAddAtomToAtomTable]
1=PVOID AtomTableHandle
2=PWSTR AtomName
3=PRTL_ATOM Atom
ParamCount=3
@=RtlAddAtomToAtomTable(PVOID AtomTableHandle, PWSTR AtomName, PRTL_ATOM Atom);
[RtlAddAttributeActionToRXact]
1=PRTL_RXACT_CONTEXT RXactContext
2=RTL_RXACT_OPERATION Operation
3=PUNICODE_STRING SubKeyName
4=HANDLE KeyHandle
5=PUNICODE_STRING AttributeName
6=ULONG NewValueType
7=PVOID NewValue
8=ULONG NewValueLength
ParamCount=8
@=RtlAddAttributeActionToRXact(PRTL_RXACT_CONTEXT RXactContext, RTL_RXACT_OPERATION Operation, PUNICODE_STRING SubKeyName, HANDLE KeyHandle, PUNICODE_STRING AttributeName, ULONG NewValueType, PVOID NewValue, ULONG NewValueLength);
[RtlAddAuditAccessAce]
1=PACL Acl
2=ULONG AceRevision
3=ACCESS_MASK AccessMask
4=PSID Sid
5=BOOLEAN AuditSuccess
6=BOOLEAN AuditFailure
ParamCount=6
@=RtlAddAuditAccessAce(PACL Acl, ULONG AceRevision, ACCESS_MASK AccessMask, PSID Sid, BOOLEAN AuditSuccess, BOOLEAN AuditFailure);
[RtlAddAuditAccessAceEx]
1=PACL Acl
2=ULONG AceRevision
3=ULONG AceFlags
4=ACCESS_MASK AccessMask
5=PSID Sid
6=BOOLEAN AuditSuccess
7=BOOLEAN AuditFailure
ParamCount=7
@=RtlAddAuditAccessAceEx(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, PSID Sid, BOOLEAN AuditSuccess, BOOLEAN AuditFailure);
[RtlAddAuditAccessObjectAce]
1=PACL Acl
2=ULONG AceRevision
3=ULONG AceFlags
4=ACCESS_MASK AccessMask
5=GUID *ObjectTypeGuid
6=GUID *InheritedObjectTypeGuid
7=PSID Sid
8=BOOLEAN AuditSuccess
9=BOOLEAN AuditFailure
ParamCount=9
@=RtlAddAuditAccessObjectAce(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID Sid, BOOLEAN AuditSuccess, BOOLEAN AuditFailure);
[RtlAddCompoundAce]
1=PACL Acl
2=ULONG AceRevision
3=UCHAR AceType
4=ACCESS_MASK AccessMask
5=PSID ServerSid
6=PSID ClientSid
ParamCount=6
@=RtlAddCompoundAce(PACL Acl, ULONG AceRevision, UCHAR AceType, ACCESS_MASK AccessMask, PSID ServerSid, PSID ClientSid);
[RtlAddRefActivationContext]
1=PACTIVATION_CONTEXT AppCtx
ParamCount=1
@=RtlAddRefActivationContext(PACTIVATION_CONTEXT AppCtx);
[RtlAddRefMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
ParamCount=1
@=RtlAddRefMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream);
[RtlAddressInSectionTable]
1=PIMAGE_NT_HEADERS NtHeaders
2=PVOID BaseOfImage
3=ULONG VirtualAddress
ParamCount=3
@=RtlAddressInSectionTable(PIMAGE_NT_HEADERS NtHeaders, PVOID BaseOfImage, ULONG VirtualAddress);
[RtlAddVectoredContinueHandler]
1=ULONG First
2=PVECTORED_EXCEPTION_HANDLER Handler
ParamCount=2
@=RtlAddVectoredContinueHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
[RtlAddVectoredExceptionHandler]
1=ULONG First
2=PVECTORED_EXCEPTION_HANDLER Handler
ParamCount=2
@=RtlAddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
[RtlAdjustPrivilege]
1=ULONG Privilege
2=BOOLEAN Enable
3=BOOLEAN Client
4=PBOOLEAN WasEnabled
ParamCount=4
@=RtlAdjustPrivilege(ULONG Privilege, BOOLEAN Enable, BOOLEAN Client, PBOOLEAN WasEnabled);
[RtlAllocateActivationContextStack]
1=PACTIVATION_CONTEXT_STACK *ActivationContextStackPointer
ParamCount=1
@=RtlAllocateActivationContextStack(PACTIVATION_CONTEXT_STACK *ActivationContextStackPointer);
[RtlAllocateAndInitializeSid]
1=PSID_IDENTIFIER_AUTHORITY IdentifierAuthority
2=UCHAR SubAuthorityCount
3=ULONG SubAuthority0
4=ULONG SubAuthority1
5=ULONG SubAuthority2
6=ULONG SubAuthority3
7=ULONG SubAuthority4
8=ULONG SubAuthority5
9=ULONG SubAuthority6
10=ULONG SubAuthority7
11=PSID *Sid
ParamCount=11
@=RtlAllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY IdentifierAuthority, UCHAR SubAuthorityCount, ULONG SubAuthority0, ULONG SubAuthority1, ULONG SubAuthority2, ULONG SubAuthority3, ULONG SubAuthority4, ULONG SubAuthority5, ULONG SubAuthority6, ULONG SubAuthority7, PSID *Sid);
[RtlAllocateHandle]
1=PRTL_HANDLE_TABLE HandleTable
2=PULONG HandleIndex
ParamCount=2
@=RtlAllocateHandle(PRTL_HANDLE_TABLE HandleTable, PULONG HandleIndex);
[RtlAllocateHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=SIZE_T Size
ParamCount=3
@=RtlAllocateHeap(PVOID HeapHandle, ULONG Flags, SIZE_T Size);
[RtlAnsiCharToUnicodeChar]
1=PUCHAR *SourceCharacter
ParamCount=1
@=RtlAnsiCharToUnicodeChar(PUCHAR *SourceCharacter);
[RtlAnsiStringToUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCANSI_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlAnsiStringToUnicodeString(PUNICODE_STRING DestinationString, PCANSI_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlAppendAsciizToString]
1=PSTRING Destination
2=PCSZ Source
ParamCount=2
@=RtlAppendAsciizToString(PSTRING Destination, PCSZ Source);
[RtlAppendStringToString]
1=PSTRING Destination
2=STRING *Source
ParamCount=2
@=RtlAppendStringToString(PSTRING Destination, STRING *Source);
[RtlAppendUnicodeStringToString]
1=PUNICODE_STRING Destination
2=PCUNICODE_STRING Source
ParamCount=2
@=RtlAppendUnicodeStringToString(PUNICODE_STRING Destination, PCUNICODE_STRING Source);
[RtlAppendUnicodeToString]
1=PUNICODE_STRING Destination
2=PCWSTR Source
ParamCount=2
@=RtlAppendUnicodeToString(PUNICODE_STRING Destination, PCWSTR Source);
[RtlApplicationVerifierStop]
1=ULONG_PTR Code
2=PSTR Message
3=ULONG_PTR Param1
4=PSTR Description1
5=ULONG_PTR Param2
6=PSTR Description2
7=ULONG_PTR Param3
8=PSTR Description3
9=ULONG_PTR Param4
10=PSTR Description4
ParamCount=10
@=RtlApplicationVerifierStop(ULONG_PTR Code, PSTR Message, ULONG_PTR Param1, PSTR Description1, ULONG_PTR Param2, PSTR Description2, ULONG_PTR Param3, PSTR Description3, ULONG_PTR Param4, PSTR Description4);
[RtlApplyRXact]
1=PRTL_RXACT_CONTEXT RXactContext
ParamCount=1
@=RtlApplyRXact(PRTL_RXACT_CONTEXT RXactContext);
[RtlApplyRXactNoFlush]
1=PRTL_RXACT_CONTEXT RXactContext
ParamCount=1
@=RtlApplyRXactNoFlush(PRTL_RXACT_CONTEXT RXactContext);
[RtlAreAllAccessesGranted]
1=ACCESS_MASK GrantedAccess
2=ACCESS_MASK DesiredAccess
ParamCount=2
@=RtlAreAllAccessesGranted(ACCESS_MASK GrantedAccess, ACCESS_MASK DesiredAccess);
[RtlAreAnyAccessesGranted]
1=ACCESS_MASK GrantedAccess
2=ACCESS_MASK DesiredAccess
ParamCount=2
@=RtlAreAnyAccessesGranted(ACCESS_MASK GrantedAccess, ACCESS_MASK DesiredAccess);
[RtlAreBitsClear]
1=PRTL_BITMAP BitMapHeader
2=ULONG StartingIndex
3=ULONG Length
ParamCount=3
@=RtlAreBitsClear(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG Length);
[RtlAreBitsSet]
1=PRTL_BITMAP BitMapHeader
2=ULONG StartingIndex
3=ULONG Length
ParamCount=3
@=RtlAreBitsSet(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG Length);
[RtlAssert]
1=PVOID VoidFailedAssertion
2=PVOID VoidFileName
3=ULONG LineNumber
4=PSTR MutableMessage
ParamCount=4
@=RtlAssert(PVOID VoidFailedAssertion, PVOID VoidFileName, ULONG LineNumber, PSTR MutableMessage);
[RtlBarrier]
1=PRTL_BARRIER Barrier
2=ULONG Flags
ParamCount=2
@=RtlBarrier(PRTL_BARRIER Barrier, ULONG Flags);
[RtlBarrierForDelete]
1=PRTL_BARRIER Barrier
2=ULONG Flags
ParamCount=2
@=RtlBarrierForDelete(PRTL_BARRIER Barrier, ULONG Flags);
[RtlCancelTimer]
1=HANDLE TimerQueueHandle
2=HANDLE TimerToCancel
ParamCount=2
@=RtlCancelTimer(HANDLE TimerQueueHandle, HANDLE TimerToCancel);
[RtlCaptureContext]
1=PCONTEXT ContextRecord
ParamCount=1
@=RtlCaptureContext(PCONTEXT ContextRecord);
[RtlCaptureStackBackTrace]
1=ULONG FramesToSkip
2=ULONG FramesToCapture
3=PVOID *BackTrace
4=PULONG BackTraceHash
ParamCount=4
@=RtlCaptureStackBackTrace(ULONG FramesToSkip, ULONG FramesToCapture, PVOID *BackTrace, PULONG BackTraceHash);
[RtlCharToInteger]
1=PCSZ String
2=ULONG Base
3=PULONG Value
ParamCount=3
@=RtlCharToInteger(PCSZ String, ULONG Base, PULONG Value);
[RtlCheckForOrphanedCriticalSections]
1=HANDLE hThread
ParamCount=1
@=RtlCheckForOrphanedCriticalSections(HANDLE hThread);
[RtlCheckRegistryKey]
1=ULONG RelativeTo
2=PWSTR Path
ParamCount=2
@=RtlCheckRegistryKey(ULONG RelativeTo, PWSTR Path);
[RtlClearAllBits]
1=PRTL_BITMAP BitMapHeader
ParamCount=1
@=RtlClearAllBits(PRTL_BITMAP BitMapHeader);
[RtlClearBit]
1=PRTL_BITMAP BitMapHeader
2=ULONG BitNumber
ParamCount=2
@=RtlClearBit(PRTL_BITMAP BitMapHeader, ULONG BitNumber);
[RtlClearBits]
1=PRTL_BITMAP BitMapHeader
2=ULONG StartingIndex
3=ULONG NumberToClear
ParamCount=3
@=RtlClearBits(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG NumberToClear);
[RtlCloneMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=IStream** NewStream
ParamCount=2
@=RtlCloneMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, IStream** NewStream);
[RtlCommitDebugInfo]
1=PRTL_DEBUG_INFORMATION Buffer
2=SIZE_T Size
ParamCount=2
@=RtlCommitDebugInfo(PRTL_DEBUG_INFORMATION Buffer, SIZE_T Size);
[RtlCommitMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=ULONG Flags
ParamCount=2
@=RtlCommitMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, ULONG Flags);
[RtlCompactHeap]
1=PVOID HeapHandle
2=ULONG Flags
ParamCount=2
@=RtlCompactHeap(PVOID HeapHandle, ULONG Flags);
[RtlCompareAltitudes]
1=PUNICODE_STRING Altitude1
2=PUNICODE_STRING Altitude2
ParamCount=2
@=RtlCompareAltitudes(PUNICODE_STRING Altitude1, PUNICODE_STRING Altitude2);
[RtlCompareMemory]
1=VOID *Source1
2=VOID *Source2
3=SIZE_T Length
ParamCount=3
@=RtlCompareMemory(VOID *Source1, VOID *Source2, SIZE_T Length);
[RtlCompareMemoryUlong]
1=PVOID Source
2=SIZE_T Length
3=ULONG Pattern
ParamCount=3
@=RtlCompareMemoryUlong(PVOID Source, SIZE_T Length, ULONG Pattern);
[RtlCompareString]
1=STRING *String1
2=STRING *String2
3=BOOLEAN CaseInSensitive
ParamCount=3
@=RtlCompareString(STRING *String1, STRING *String2, BOOLEAN CaseInSensitive);
[RtlCompareUnicodeString]
1=PCUNICODE_STRING String1
2=PCUNICODE_STRING String2
3=BOOLEAN CaseInSensitive
ParamCount=3
@=RtlCompareUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
[RtlCompressBuffer]
1=USHORT CompressionFormatAndEngine
2=PUCHAR UncompressedBuffer
3=ULONG UncompressedBufferSize
4=PUCHAR CompressedBuffer
5=ULONG CompressedBufferSize
6=ULONG UncompressedChunkSize
7=PULONG FinalCompressedSize
8=PVOID WorkSpace
ParamCount=8
@=RtlCompressBuffer(USHORT CompressionFormatAndEngine, PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, ULONG UncompressedChunkSize, PULONG FinalCompressedSize, PVOID WorkSpace);
[RtlComputeCrc32]
1=ULONG32 PartialCrc
2=PVOID Buffer
3=ULONG Length
ParamCount=3
@=RtlComputeCrc32(ULONG32 PartialCrc, PVOID Buffer, ULONG Length);
[RtlComputeImportTableHash]
1=HANDLE hFile
2=PCHAR Hash
3=ULONG ImportTableHashRevision
ParamCount=3
@=RtlComputeImportTableHash(HANDLE hFile, PCHAR Hash, ULONG ImportTableHashRevision);
[RtlComputePrivatizedDllName_U]
1=PCUNICODE_STRING DllName
2=PUNICODE_STRING NewDllNameUnderImageDir
3=PUNICODE_STRING NewDllNameUnderLocalDir
ParamCount=3
@=RtlComputePrivatizedDllName_U(PCUNICODE_STRING DllName, PUNICODE_STRING NewDllNameUnderImageDir, PUNICODE_STRING NewDllNameUnderLocalDir);
[RtlConsoleMultiByteToUnicodeN]
1=PWCH UnicodeString
2=ULONG MaxBytesInUnicodeString
3=PULONG BytesInUnicodeString
4=PCH MultiByteString
5=ULONG BytesInMultiByteString
6=PULONG pdwSpecialChar
ParamCount=6
@=RtlConsoleMultiByteToUnicodeN(PWCH UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, PCH MultiByteString, ULONG BytesInMultiByteString, PULONG pdwSpecialChar);
[RtlConvertExclusiveToShared]
1=PRTL_RESOURCE Resource
ParamCount=1
@=RtlConvertExclusiveToShared(PRTL_RESOURCE Resource);
[RtlConvertSharedToExclusive]
1=PRTL_RESOURCE Resource
ParamCount=1
@=RtlConvertSharedToExclusive(PRTL_RESOURCE Resource);
[RtlConvertSidToUnicodeString]
1=PUNICODE_STRING UnicodeString
2=PSID Sid
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlConvertSidToUnicodeString(PUNICODE_STRING UnicodeString, PSID Sid, BOOLEAN AllocateDestinationString);
[RtlConvertToAutoInheritSecurityObject]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CurrentSecurityDescriptor
3=PSECURITY_DESCRIPTOR *NewSecurityDescriptor
4=GUID *ObjectType
5=BOOLEAN IsDirectoryObject
6=PGENERIC_MAPPING GenericMapping
ParamCount=6
@=RtlConvertToAutoInheritSecurityObject(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
[RtlCopyLuid]
1=PLUID DestinationLuid
2=PLUID SourceLuid
ParamCount=2
@=RtlCopyLuid(PLUID DestinationLuid, PLUID SourceLuid);
[RtlCopyLuidAndAttributesArray]
1=ULONG ArrayLength
2=PLUID_AND_ATTRIBUTES Source
3=PLUID_AND_ATTRIBUTES Target
ParamCount=3
@=RtlCopyLuidAndAttributesArray(ULONG ArrayLength, PLUID_AND_ATTRIBUTES Source, PLUID_AND_ATTRIBUTES Target);
[RtlCopyMemoryNonTemporal]
1=VOID *Destination
2=VOID *Source
3=SIZE_T Length
ParamCount=3
@=RtlCopyMemoryNonTemporal(VOID *Destination, VOID *Source, SIZE_T Length);
[RtlCopyMemoryStreamTo]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=IStream* AnotherStream
3=ULARGE_INTEGER NumberOfBytesToCopy
4=ULARGE_INTEGER* NumberOfBytesRead
5=ULARGE_INTEGER* NumberOfBytesWritten
ParamCount=5
@=RtlCopyMemoryStreamTo(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, IStream* AnotherStream, ULARGE_INTEGER NumberOfBytesToCopy, ULARGE_INTEGER* NumberOfBytesRead, ULARGE_INTEGER* NumberOfBytesWritten);
[RtlCopyOutOfProcessMemoryStreamTo]
1=PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=IStream* AnotherStream
3=ULARGE_INTEGER NumberOfBytesToCopy
4=ULARGE_INTEGER* NumberOfBytesRead
5=ULARGE_INTEGER* NumberOfBytesWritten
ParamCount=5
@=RtlCopyOutOfProcessMemoryStreamTo(PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream, IStream* AnotherStream, ULARGE_INTEGER NumberOfBytesToCopy, ULARGE_INTEGER* NumberOfBytesRead, ULARGE_INTEGER* NumberOfBytesWritten);
[RtlCopySecurityDescriptor]
1=PSECURITY_DESCRIPTOR InputSecurityDescriptor
2=PSECURITY_DESCRIPTOR *OutputSecurityDescriptor
ParamCount=2
@=RtlCopySecurityDescriptor(PSECURITY_DESCRIPTOR InputSecurityDescriptor, PSECURITY_DESCRIPTOR *OutputSecurityDescriptor);
[RtlCopySid]
1=ULONG DestinationSidLength
2=PSID DestinationSid
3=PSID SourceSid
ParamCount=3
@=RtlCopySid(ULONG DestinationSidLength, PSID DestinationSid, PSID SourceSid);
[RtlCopySidAndAttributesArray]
1=ULONG ArrayLength
2=PSID_AND_ATTRIBUTES Source
3=ULONG TargetSidBufferSize
4=PSID_AND_ATTRIBUTES TargetArrayElement
5=PSID TargetSid
6=PSID *NextTargetSid
7=PULONG RemainingTargetSidSize
ParamCount=7
@=RtlCopySidAndAttributesArray(ULONG ArrayLength, PSID_AND_ATTRIBUTES Source, ULONG TargetSidBufferSize, PSID_AND_ATTRIBUTES TargetArrayElement, PSID TargetSid, PSID *NextTargetSid, PULONG RemainingTargetSidSize);
[RtlCopyString]
1=PSTRING DestinationString
2=STRING *SourceString
ParamCount=2
@=RtlCopyString(PSTRING DestinationString, STRING *SourceString);
[RtlCopyUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCUNICODE_STRING SourceString
ParamCount=2
@=RtlCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
[RtlCreateAcl]
1=PACL Acl
2=ULONG AclLength
3=ULONG AclRevision
ParamCount=3
@=RtlCreateAcl(PACL Acl, ULONG AclLength, ULONG AclRevision);
[RtlCreateActivationContext]
1=ULONG Flags
2=ACTIVATION_CONTEXT_DATA *ActivationContextData
3=ULONG ExtraBytes
4=PACTIVATION_CONTEXT_NOTIFY_ROUTINE NotificationRoutine
5=PVOID NotificationContext
6=PACTIVATION_CONTEXT *ActivationContext
ParamCount=6
@=RtlCreateActivationContext(ULONG Flags, ACTIVATION_CONTEXT_DATA *ActivationContextData, ULONG ExtraBytes, PACTIVATION_CONTEXT_NOTIFY_ROUTINE NotificationRoutine, PVOID NotificationContext, PACTIVATION_CONTEXT *ActivationContext);
[RtlCreateAndSetSD]
1=PRTL_ACE_DATA AceData
2=ULONG AceCount
3=PSID OwnerSid
4=PSID GroupSid
5=PSECURITY_DESCRIPTOR *NewDescriptor
ParamCount=5
@=RtlCreateAndSetSD(PRTL_ACE_DATA AceData, ULONG AceCount, PSID OwnerSid, PSID GroupSid, PSECURITY_DESCRIPTOR *NewDescriptor);
[RtlCreateAtomTable]
1=ULONG NumberOfBuckets
2=PVOID *AtomTableHandle
ParamCount=2
@=RtlCreateAtomTable(ULONG NumberOfBuckets, PVOID *AtomTableHandle);
[RtlCreateBootStatusDataFile]
ParamCount=0
@=RtlCreateBootStatusDataFile();
[RtlCreateEnvironment]
1=BOOLEAN CloneCurrentEnvironment
2=PVOID *Environment
ParamCount=2
@=RtlCreateEnvironment(BOOLEAN CloneCurrentEnvironment, PVOID *Environment);
[RtlCreateEnvironmentEx]
1=PVOID SourceEnv
2=PVOID *Environment
3=ULONG Flags
ParamCount=3
@=RtlCreateEnvironmentEx(PVOID SourceEnv, PVOID *Environment, ULONG Flags);
[RtlCreateHeap]
1=ULONG Flags
2=PVOID HeapBase
3=SIZE_T ReserveSize
4=SIZE_T CommitSize
5=PVOID Lock
6=PRTL_HEAP_PARAMETERS Parameters
ParamCount=6
@=RtlCreateHeap(ULONG Flags, PVOID HeapBase, SIZE_T ReserveSize, SIZE_T CommitSize, PVOID Lock, PRTL_HEAP_PARAMETERS Parameters);
[RtlCreateProcessParameters]
1=PRTL_USER_PROCESS_PARAMETERS *ProcessParameters
2=PUNICODE_STRING ImagePathName
3=PUNICODE_STRING DllPath
4=PUNICODE_STRING CurrentDirectory
5=PUNICODE_STRING CommandLine
6=PVOID Environment
7=PUNICODE_STRING WindowTitle
8=PUNICODE_STRING DesktopInfo
9=PUNICODE_STRING ShellInfo
10=PUNICODE_STRING RuntimeData
ParamCount=10
@=RtlCreateProcessParameters(PRTL_USER_PROCESS_PARAMETERS *ProcessParameters, PUNICODE_STRING ImagePathName, PUNICODE_STRING DllPath, PUNICODE_STRING CurrentDirectory, PUNICODE_STRING CommandLine, PVOID Environment, PUNICODE_STRING WindowTitle, PUNICODE_STRING DesktopInfo, PUNICODE_STRING ShellInfo, PUNICODE_STRING RuntimeData);
[RtlCreateProcessParametersEx]
1=PRTL_USER_PROCESS_PARAMETERS *pProcessParameters
2=PUNICODE_STRING ImagePathName
3=PUNICODE_STRING DllPath
4=PUNICODE_STRING CurrentDirectory
5=PUNICODE_STRING CommandLine
6=PVOID Environment
7=PUNICODE_STRING WindowTitle
8=PUNICODE_STRING DesktopInfo
9=PUNICODE_STRING ShellInfo
10=PUNICODE_STRING RuntimeData
11=ULONG Flags
ParamCount=11
@=RtlCreateProcessParametersEx(PRTL_USER_PROCESS_PARAMETERS *pProcessParameters, PUNICODE_STRING ImagePathName, PUNICODE_STRING DllPath, PUNICODE_STRING CurrentDirectory, PUNICODE_STRING CommandLine, PVOID Environment, PUNICODE_STRING WindowTitle, PUNICODE_STRING DesktopInfo, PUNICODE_STRING ShellInfo, PUNICODE_STRING RuntimeData, ULONG Flags);
[RtlCreateProcessReflection]
1=HANDLE ProcessHandle
2=ULONG Flags
3=PVOID StartRoutine
4=PVOID StartContext
5=HANDLE EventHandle
6=PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation
ParamCount=6
@=RtlCreateProcessReflection(HANDLE ProcessHandle, ULONG Flags, PVOID StartRoutine, PVOID StartContext, HANDLE EventHandle, PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation);
[RtlCreateQueryDebugBuffer]
1=ULONG MaximumCommit
2=BOOLEAN UseEventPair
ParamCount=2
@=RtlCreateQueryDebugBuffer(ULONG MaximumCommit, BOOLEAN UseEventPair);
[RtlCreateRegistryKey]
1=ULONG RelativeTo
2=PWSTR Path
ParamCount=2
@=RtlCreateRegistryKey(ULONG RelativeTo, PWSTR Path);
[RtlCreateSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=ULONG Revision
ParamCount=2
@=RtlCreateSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Revision);
[RtlCreateSystemVolumeInformationFolder]
1=PUNICODE_STRING VolumeRootPath
ParamCount=1
@=RtlCreateSystemVolumeInformationFolder(PUNICODE_STRING VolumeRootPath);
[RtlCreateTagHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PWSTR TagPrefix
4=PWSTR TagNames
ParamCount=4
@=RtlCreateTagHeap(PVOID HeapHandle, ULONG Flags, PWSTR TagPrefix, PWSTR TagNames);
[RtlCreateTimer]
1=HANDLE TimerQueueHandle
2=HANDLE *Handle
3=WAITORTIMERCALLBACKFUNC Function
4=PVOID Context
5=ULONG DueTime
6=ULONG Period
7=ULONG Flags
ParamCount=7
@=RtlCreateTimer(HANDLE TimerQueueHandle, HANDLE *Handle, WAITORTIMERCALLBACKFUNC Function, PVOID Context, ULONG DueTime, ULONG Period, ULONG Flags);
[RtlCreateTimerQueue]
1=PHANDLE TimerQueueHandle
ParamCount=1
@=RtlCreateTimerQueue(PHANDLE TimerQueueHandle);
[RtlCreateUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCWSTR SourceString
ParamCount=2
@=RtlCreateUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
[RtlCreateUnicodeStringFromAsciiz]
1=PUNICODE_STRING DestinationString
2=PCSZ SourceString
ParamCount=2
@=RtlCreateUnicodeStringFromAsciiz(PUNICODE_STRING DestinationString, PCSZ SourceString);
[RtlCreateUserProcess]
1=PUNICODE_STRING NtImagePathName
2=ULONG Attributes
3=PRTL_USER_PROCESS_PARAMETERS ProcessParameters
4=PSECURITY_DESCRIPTOR ProcessSecurityDescriptor
5=PSECURITY_DESCRIPTOR ThreadSecurityDescriptor
6=HANDLE ParentProcess
7=BOOLEAN InheritHandles
8=HANDLE DebugPort
9=HANDLE ExceptionPort
10=PRTL_USER_PROCESS_INFORMATION ProcessInformation
ParamCount=10
@=RtlCreateUserProcess(PUNICODE_STRING NtImagePathName, ULONG Attributes, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PSECURITY_DESCRIPTOR ProcessSecurityDescriptor, PSECURITY_DESCRIPTOR ThreadSecurityDescriptor, HANDLE ParentProcess, BOOLEAN InheritHandles, HANDLE DebugPort, HANDLE ExceptionPort, PRTL_USER_PROCESS_INFORMATION ProcessInformation);
[RtlCreateUserSecurityObject]
1=PRTL_ACE_DATA AceData
2=ULONG AceCount
3=PSID OwnerSid
4=PSID GroupSid
5=BOOLEAN IsDirectoryObject
6=PGENERIC_MAPPING GenericMapping
7=PSECURITY_DESCRIPTOR *NewDescriptor
ParamCount=7
@=RtlCreateUserSecurityObject(PRTL_ACE_DATA AceData, ULONG AceCount, PSID OwnerSid, PSID GroupSid, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping, PSECURITY_DESCRIPTOR *NewDescriptor);
[RtlCreateUserStack]
1=SIZE_T CommittedStackSize
2=SIZE_T MaximumStackSize
3=ULONG_PTR ZeroBits
4=SIZE_T PageSize
5=ULONG_PTR ReserveAlignment
6=PINITIAL_TEB InitialTeb
ParamCount=6
@=RtlCreateUserStack(SIZE_T CommittedStackSize, SIZE_T MaximumStackSize, ULONG_PTR ZeroBits, SIZE_T PageSize, ULONG_PTR ReserveAlignment, PINITIAL_TEB InitialTeb);
[RtlCreateUserThread]
1=HANDLE Process
2=PSECURITY_DESCRIPTOR ThreadSecurityDescriptor
3=BOOLEAN CreateSuspended
4=ULONG StackZeroBits
5=SIZE_T MaximumStackSize
6=SIZE_T InitialStackSize
7=PUSER_THREAD_START_ROUTINE StartAddress
8=PVOID Parameter
9=PHANDLE Thread
10=PCLIENT_ID ClientId
ParamCount=10
@=RtlCreateUserThread(HANDLE Process, PSECURITY_DESCRIPTOR ThreadSecurityDescriptor, BOOLEAN CreateSuspended, ULONG StackZeroBits, SIZE_T MaximumStackSize, SIZE_T InitialStackSize, PUSER_THREAD_START_ROUTINE StartAddress, PVOID Parameter, PHANDLE Thread, PCLIENT_ID ClientId);
[RtlCustomCPToUnicodeN]
1=PCPTABLEINFO CustomCP
2=PWCH UnicodeString
3=ULONG MaxBytesInUnicodeString
4=PULONG BytesInUnicodeString
5=PCH CustomCPString
6=ULONG BytesInCustomCPString
ParamCount=6
@=RtlCustomCPToUnicodeN(PCPTABLEINFO CustomCP, PWCH UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, PCH CustomCPString, ULONG BytesInCustomCPString);
[RtlCutoverTimeToSystemTime]
1=PTIME_FIELDS CutoverTime
2=PLARGE_INTEGER SystemTime
3=PLARGE_INTEGER CurrentSystemTime
4=BOOLEAN ThisYear
ParamCount=4
@=RtlCutoverTimeToSystemTime(PTIME_FIELDS CutoverTime, PLARGE_INTEGER SystemTime, PLARGE_INTEGER CurrentSystemTime, BOOLEAN ThisYear);
[RtlDeactivateActivationContext]
1=ULONG Flags
2=ULONG_PTR Cookie
ParamCount=2
@=RtlDeactivateActivationContext(ULONG Flags, ULONG_PTR Cookie);
[RtlDeactivateActivationContextUnsafeFast]
1=PRTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME Frame
ParamCount=1
@=RtlDeactivateActivationContextUnsafeFast(PRTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME Frame);
[RtlDebugPrintTimes]
ParamCount=0
@=RtlDebugPrintTimes();
[RtlDecodePointer]
1=PVOID Ptr
ParamCount=1
@=RtlDecodePointer(PVOID Ptr);
[RtlDecodeSystemPointer]
1=PVOID Ptr
ParamCount=1
@=RtlDecodeSystemPointer(PVOID Ptr);
[RtlDeCommitDebugInfo]
1=PRTL_DEBUG_INFORMATION Buffer
2=PVOID p
3=SIZE_T Size
ParamCount=3
@=RtlDeCommitDebugInfo(PRTL_DEBUG_INFORMATION Buffer, PVOID p, SIZE_T Size);
[RtlDecompressBuffer]
1=USHORT CompressionFormat
2=PUCHAR UncompressedBuffer
3=ULONG UncompressedBufferSize
4=PUCHAR CompressedBuffer
5=ULONG CompressedBufferSize
6=PULONG FinalUncompressedSize
ParamCount=6
@=RtlDecompressBuffer(USHORT CompressionFormat, PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, PULONG FinalUncompressedSize);
[RtlDecompressFragment]
1=USHORT CompressionFormat
2=PUCHAR UncompressedFragment
3=ULONG UncompressedFragmentSize
4=PUCHAR CompressedBuffer
5=ULONG CompressedBufferSize
6=ULONG FragmentOffset
7=PULONG FinalUncompressedSize
8=PVOID WorkSpace
ParamCount=8
@=RtlDecompressFragment(USHORT CompressionFormat, PUCHAR UncompressedFragment, ULONG UncompressedFragmentSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, ULONG FragmentOffset, PULONG FinalUncompressedSize, PVOID WorkSpace);
[RtlDefaultNpAcl]
1=PACL *pAcl
ParamCount=1
@=RtlDefaultNpAcl(PACL *pAcl);
[RtlDelete]
1=PRTL_SPLAY_LINKS Links
ParamCount=1
@=RtlDelete(PRTL_SPLAY_LINKS Links);
[RtlDeleteAce]
1=PACL Acl
2=ULONG AceIndex
ParamCount=2
@=RtlDeleteAce(PACL Acl, ULONG AceIndex);
[RtlDeleteAtomFromAtomTable]
1=PVOID AtomTableHandle
2=RTL_ATOM Atom
ParamCount=2
@=RtlDeleteAtomFromAtomTable(PVOID AtomTableHandle, RTL_ATOM Atom);
[RtlDeleteBarrier]
1=PRTL_BARRIER Barrier
ParamCount=1
@=RtlDeleteBarrier(PRTL_BARRIER Barrier);
[RtlDeleteCriticalSection]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlDeleteCriticalSection(PRTL_CRITICAL_SECTION CriticalSection);
[RtlDeleteElementGenericTable]
1=PRTL_GENERIC_TABLE Table
2=PVOID Buffer
ParamCount=2
@=RtlDeleteElementGenericTable(PRTL_GENERIC_TABLE Table, PVOID Buffer);
[RtlDeleteElementGenericTableAvl]
1=PRTL_AVL_TABLE Table
2=PVOID Buffer
ParamCount=2
@=RtlDeleteElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer);
[RtlDeleteNoSplay]
1=PRTL_SPLAY_LINKS Links
2=PRTL_SPLAY_LINKS *Root
ParamCount=2
@=RtlDeleteNoSplay(PRTL_SPLAY_LINKS Links, PRTL_SPLAY_LINKS *Root);
[RtlDeleteRegistryValue]
1=ULONG RelativeTo
2=PCWSTR Path
3=PCWSTR ValueName
ParamCount=3
@=RtlDeleteRegistryValue(ULONG RelativeTo, PCWSTR Path, PCWSTR ValueName);
[RtlDeleteResource]
1=PRTL_RESOURCE Resource
ParamCount=1
@=RtlDeleteResource(PRTL_RESOURCE Resource);
[RtlDeleteSecurityObject]
1=PSECURITY_DESCRIPTOR *ObjectDescriptor
ParamCount=1
@=RtlDeleteSecurityObject(PSECURITY_DESCRIPTOR *ObjectDescriptor);
[RtlDeleteTimer]
1=HANDLE TimerQueueHandle
2=HANDLE TimerToCancel
3=HANDLE Event
ParamCount=3
@=RtlDeleteTimer(HANDLE TimerQueueHandle, HANDLE TimerToCancel, HANDLE Event);
[RtlDeleteTimerQueue]
1=HANDLE TimerQueueHandle
ParamCount=1
@=RtlDeleteTimerQueue(HANDLE TimerQueueHandle);
[RtlDeleteTimerQueueEx]
1=HANDLE TimerQueueHandle
2=HANDLE Event
ParamCount=2
@=RtlDeleteTimerQueueEx(HANDLE TimerQueueHandle, HANDLE Event);
[RtlDeNormalizeProcessParams]
1=PRTL_USER_PROCESS_PARAMETERS ProcessParameters
ParamCount=1
@=RtlDeNormalizeProcessParams(PRTL_USER_PROCESS_PARAMETERS ProcessParameters);
[RtlDeregisterWait]
1=HANDLE WaitHandle
ParamCount=1
@=RtlDeregisterWait(HANDLE WaitHandle);
[RtlDeregisterWaitEx]
1=HANDLE WaitHandle
2=HANDLE Event
ParamCount=2
@=RtlDeregisterWaitEx(HANDLE WaitHandle, HANDLE Event);
[RtlDestroyAtomTable]
1=PVOID AtomTableHandle
ParamCount=1
@=RtlDestroyAtomTable(PVOID AtomTableHandle);
[RtlDestroyEnvironment]
1=PVOID Environment
ParamCount=1
@=RtlDestroyEnvironment(PVOID Environment);
[RtlDestroyHandleTable]
1=PRTL_HANDLE_TABLE HandleTable
ParamCount=1
@=RtlDestroyHandleTable(PRTL_HANDLE_TABLE HandleTable);
[RtlDestroyHeap]
1=PVOID HeapHandle
ParamCount=1
@=RtlDestroyHeap(PVOID HeapHandle);
[RtlDestroyProcessParameters]
1=PRTL_USER_PROCESS_PARAMETERS ProcessParameters
ParamCount=1
@=RtlDestroyProcessParameters(PRTL_USER_PROCESS_PARAMETERS ProcessParameters);
[RtlDestroyQueryDebugBuffer]
1=PRTL_DEBUG_INFORMATION Buffer
ParamCount=1
@=RtlDestroyQueryDebugBuffer(PRTL_DEBUG_INFORMATION Buffer);
[RtlDetermineDosPathNameType_U]
1=PCWSTR DosFileName
ParamCount=1
@=RtlDetermineDosPathNameType_U(PCWSTR DosFileName);
[RtlDllShutdownInProgress]
ParamCount=0
@=RtlDllShutdownInProgress();
[RtlDnsHostNameToComputerName]
1=PUNICODE_STRING ComputerNameString
2=PCUNICODE_STRING DnsHostNameString
3=BOOLEAN AllocateComputerNameString
ParamCount=3
@=RtlDnsHostNameToComputerName(PUNICODE_STRING ComputerNameString, PCUNICODE_STRING DnsHostNameString, BOOLEAN AllocateComputerNameString);
[RtlDoesFileExists_U]
1=PCWSTR FileName
ParamCount=1
@=RtlDoesFileExists_U(PCWSTR FileName);
[RtlDosApplyFileIsolationRedirection_Ustr]
1=ULONG Flags
2=PCUNICODE_STRING FileName
3=PCUNICODE_STRING DefaultExtension
4=PUNICODE_STRING PreAllocatedString
5=PUNICODE_STRING DynamicallyAllocatedString
6=PUNICODE_STRING *FullPath
7=ULONG *OutFlags
8=SIZE_T *FilePartPrefixCch
9=SIZE_T *BytesRequired
ParamCount=9
@=RtlDosApplyFileIsolationRedirection_Ustr(ULONG Flags, PCUNICODE_STRING FileName, PCUNICODE_STRING DefaultExtension, PUNICODE_STRING PreAllocatedString, PUNICODE_STRING DynamicallyAllocatedString, PUNICODE_STRING *FullPath, ULONG *OutFlags, SIZE_T *FilePartPrefixCch, SIZE_T *BytesRequired);
[RtlDosPathNameToNtPathName_U]
1=PCWSTR DosFileName
2=PUNICODE_STRING NtFileName
3=PWSTR *FilePart
4=PVOID Reserved
ParamCount=4
@=RtlDosPathNameToNtPathName_U(PCWSTR DosFileName, PUNICODE_STRING NtFileName, PWSTR *FilePart, PVOID Reserved);
[RtlDosPathNameToNtPathName_U_WithStatus]
1=PCWSTR DosFileName
2=PUNICODE_STRING NtFileName
3=PWSTR *FilePart
4=PVOID Reserved
ParamCount=4
@=RtlDosPathNameToNtPathName_U_WithStatus(PCWSTR DosFileName, PUNICODE_STRING NtFileName, PWSTR *FilePart, PVOID Reserved);
[RtlDosPathNameToRelativeNtPathName_U]
1=PCWSTR DosFileName
2=PUNICODE_STRING NtFileName
3=PWSTR *FilePart
4=PRTL_RELATIVE_NAME_U RelativeName
ParamCount=4
@=RtlDosPathNameToRelativeNtPathName_U(PCWSTR DosFileName, PUNICODE_STRING NtFileName, PWSTR *FilePart, PRTL_RELATIVE_NAME_U RelativeName);
[RtlDosPathNameToRelativeNtPathName_U_WithStatus]
1=PCWSTR DosFileName
2=PUNICODE_STRING NtFileName
3=PWSTR *FilePart
4=PRTL_RELATIVE_NAME_U RelativeName
ParamCount=4
@=RtlDosPathNameToRelativeNtPathName_U_WithStatus(PCWSTR DosFileName, PUNICODE_STRING NtFileName, PWSTR *FilePart, PRTL_RELATIVE_NAME_U RelativeName);
[RtlDosSearchPath_U]
1=PCWSTR lpPath
2=PCWSTR lpFileName
3=PCWSTR lpExtension
4=ULONG nBufferLength
5=PWSTR lpBuffer
6=PWSTR *lpFilePart
ParamCount=6
@=RtlDosSearchPath_U(PCWSTR lpPath, PCWSTR lpFileName, PCWSTR lpExtension, ULONG nBufferLength, PWSTR lpBuffer, PWSTR *lpFilePart);
[RtlDosSearchPath_Ustr]
1=ULONG Flags
2=PCUNICODE_STRING Path
3=PCUNICODE_STRING FileName
4=PCUNICODE_STRING DefaultExtension
5=PUNICODE_STRING StaticString
6=PUNICODE_STRING DynamicString
7=PCUNICODE_STRING *FullFileNameOut
8=SIZE_T *FilePartPrefixCch
9=SIZE_T *BytesRequired
ParamCount=9
@=RtlDosSearchPath_Ustr(ULONG Flags, PCUNICODE_STRING Path, PCUNICODE_STRING FileName, PCUNICODE_STRING DefaultExtension, PUNICODE_STRING StaticString, PUNICODE_STRING DynamicString, PCUNICODE_STRING *FullFileNameOut, SIZE_T *FilePartPrefixCch, SIZE_T *BytesRequired);
[RtlDowncaseUnicodeChar]
1=WCHAR SourceCharacter
ParamCount=1
@=RtlDowncaseUnicodeChar(WCHAR SourceCharacter);
[RtlDowncaseUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlDowncaseUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlDuplicateUnicodeString]
1=ULONG Flags
2=UNICODE_STRING *StringIn
3=UNICODE_STRING *StringOut
ParamCount=3
@=RtlDuplicateUnicodeString(ULONG Flags, UNICODE_STRING *StringIn, UNICODE_STRING *StringOut);
[RtlEmptyAtomTable]
1=PVOID AtomTableHandle
2=BOOLEAN IncludePinnedAtoms
ParamCount=2
@=RtlEmptyAtomTable(PVOID AtomTableHandle, BOOLEAN IncludePinnedAtoms);
[RtlEnableEarlyCriticalSectionEventCreation]
ParamCount=0
@=RtlEnableEarlyCriticalSectionEventCreation();
[RtlEncodePointer]
1=PVOID Ptr
ParamCount=1
@=RtlEncodePointer(PVOID Ptr);
[RtlEncodeSystemPointer]
1=PVOID Ptr
ParamCount=1
@=RtlEncodeSystemPointer(PVOID Ptr);
[RtlEnterCriticalSection]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlEnterCriticalSection(PRTL_CRITICAL_SECTION CriticalSection);
[RtlEnumerateGenericTable]
1=PRTL_GENERIC_TABLE Table
2=BOOLEAN Restart
ParamCount=2
@=RtlEnumerateGenericTable(PRTL_GENERIC_TABLE Table, BOOLEAN Restart);
[RtlEnumerateGenericTableAvl]
1=PRTL_AVL_TABLE Table
2=BOOLEAN Restart
ParamCount=2
@=RtlEnumerateGenericTableAvl(PRTL_AVL_TABLE Table, BOOLEAN Restart);
[RtlEnumerateGenericTableLikeADirectory]
1=PRTL_AVL_TABLE Table
2=PRTL_AVL_MATCH_FUNCTION MatchFunction
3=PVOID MatchData
4=ULONG NextFlag
5=PVOID *RestartKey
6=PULONG DeleteCount
7=PVOID Buffer
ParamCount=7
@=RtlEnumerateGenericTableLikeADirectory(PRTL_AVL_TABLE Table, PRTL_AVL_MATCH_FUNCTION MatchFunction, PVOID MatchData, ULONG NextFlag, PVOID *RestartKey, PULONG DeleteCount, PVOID Buffer);
[RtlEnumerateGenericTableWithoutSplaying]
1=PRTL_GENERIC_TABLE Table
2=PVOID *RestartKey
ParamCount=2
@=RtlEnumerateGenericTableWithoutSplaying(PRTL_GENERIC_TABLE Table, PVOID *RestartKey);
[RtlEnumerateGenericTableWithoutSplayingAvl]
1=PRTL_AVL_TABLE Table
2=PVOID *RestartKey
ParamCount=2
@=RtlEnumerateGenericTableWithoutSplayingAvl(PRTL_AVL_TABLE Table, PVOID *RestartKey);
[RtlEnumProcessHeaps]
1=PRTL_ENUM_HEAPS_ROUTINE EnumRoutine
2=PVOID Parameter
ParamCount=2
@=RtlEnumProcessHeaps(PRTL_ENUM_HEAPS_ROUTINE EnumRoutine, PVOID Parameter);
[RtlEqualComputerName]
1=PCUNICODE_STRING String1
2=PCUNICODE_STRING String2
ParamCount=2
@=RtlEqualComputerName(PCUNICODE_STRING String1, PCUNICODE_STRING String2);
[RtlEqualDomainName]
1=PCUNICODE_STRING String1
2=PCUNICODE_STRING String2
ParamCount=2
@=RtlEqualDomainName(PCUNICODE_STRING String1, PCUNICODE_STRING String2);
[RtlEqualPrefixSid]
1=PSID Sid1
2=PSID Sid2
ParamCount=2
@=RtlEqualPrefixSid(PSID Sid1, PSID Sid2);
[RtlEqualSid]
1=PSID Sid1
2=PSID Sid2
ParamCount=2
@=RtlEqualSid(PSID Sid1, PSID Sid2);
[RtlEqualString]
1=STRING *String1
2=STRING *String2
3=BOOLEAN CaseInSensitive
ParamCount=3
@=RtlEqualString(STRING *String1, STRING *String2, BOOLEAN CaseInSensitive);
[RtlEqualUnicodeString]
1=PCUNICODE_STRING String1
2=PCUNICODE_STRING String2
3=BOOLEAN CaseInSensitive
ParamCount=3
@=RtlEqualUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
[RtlEraseUnicodeString]
1=PUNICODE_STRING String
ParamCount=1
@=RtlEraseUnicodeString(PUNICODE_STRING String);
[RtlExitUserProcess]
1=NTSTATUS ExitStatus
ParamCount=1
@=RtlExitUserProcess(NTSTATUS ExitStatus);
[RtlExitUserThread]
1=NTSTATUS ExitStatus
ParamCount=1
@=RtlExitUserThread(NTSTATUS ExitStatus);
[RtlExpandEnvironmentStrings]
1=PVOID Environment
2=PWSTR Src
3=SIZE_T SrcLength
4=PWSTR Dst
5=SIZE_T DstLength
6=PSIZE_T ReturnLength
ParamCount=6
@=RtlExpandEnvironmentStrings(PVOID Environment, PWSTR Src, SIZE_T SrcLength, PWSTR Dst, SIZE_T DstLength, PSIZE_T ReturnLength);
[RtlExpandEnvironmentStrings_U]
1=PVOID Environment
2=PCUNICODE_STRING Source
3=PUNICODE_STRING Destination
4=PULONG ReturnedLength
ParamCount=4
@=RtlExpandEnvironmentStrings_U(PVOID Environment, PCUNICODE_STRING Source, PUNICODE_STRING Destination, PULONG ReturnedLength);
[RtlFinalReleaseOutOfProcessMemoryStream]
1=PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream
ParamCount=1
@=RtlFinalReleaseOutOfProcessMemoryStream(PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream);
[RtlFindActivationContextSectionGuid]
1=ULONG Flags
2=GUID *ExtensionGuid
3=ULONG SectionId
4=GUID *GuidToFind
5=PACTIVATION_CONTEXT_SECTION_KEYED_DATA ReturnedData
ParamCount=5
@=RtlFindActivationContextSectionGuid(ULONG Flags, GUID *ExtensionGuid, ULONG SectionId, GUID *GuidToFind, PACTIVATION_CONTEXT_SECTION_KEYED_DATA ReturnedData);
[RtlFindActivationContextSectionString]
1=ULONG Flags
2=GUID *ExtensionGuid
3=ULONG SectionId
4=PCUNICODE_STRING StringToFind
5=PACTIVATION_CONTEXT_SECTION_KEYED_DATA ReturnedData
ParamCount=5
@=RtlFindActivationContextSectionString(ULONG Flags, GUID *ExtensionGuid, ULONG SectionId, PCUNICODE_STRING StringToFind, PACTIVATION_CONTEXT_SECTION_KEYED_DATA ReturnedData);
[RtlFindCharInUnicodeString]
1=ULONG Flags
2=PCUNICODE_STRING StringToSearch
3=PCUNICODE_STRING CharSet
4=USHORT *NonInclusivePrefixLength
ParamCount=4
@=RtlFindCharInUnicodeString(ULONG Flags, PCUNICODE_STRING StringToSearch, PCUNICODE_STRING CharSet, USHORT *NonInclusivePrefixLength);
[RtlFindClearBits]
1=PRTL_BITMAP BitMapHeader
2=ULONG NumberToFind
3=ULONG HintIndex
ParamCount=3
@=RtlFindClearBits(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
[RtlFindClearBitsAndSet]
1=PRTL_BITMAP BitMapHeader
2=ULONG NumberToFind
3=ULONG HintIndex
ParamCount=3
@=RtlFindClearBitsAndSet(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
[RtlFindClearRuns]
1=PRTL_BITMAP BitMapHeader
2=PRTL_BITMAP_RUN RunArray
3=ULONG SizeOfRunArray
4=BOOLEAN LocateLongestRuns
ParamCount=4
@=RtlFindClearRuns(PRTL_BITMAP BitMapHeader, PRTL_BITMAP_RUN RunArray, ULONG SizeOfRunArray, BOOLEAN LocateLongestRuns);
[RtlFindLastBackwardRunClear]
1=PRTL_BITMAP BitMapHeader
2=ULONG FromIndex
3=PULONG StartingRunIndex
ParamCount=3
@=RtlFindLastBackwardRunClear(PRTL_BITMAP BitMapHeader, ULONG FromIndex, PULONG StartingRunIndex);
[RtlFindLeastSignificantBit]
1=ULONGLONG Set
ParamCount=1
@=RtlFindLeastSignificantBit(ULONGLONG Set);
[RtlFindLongestRunClear]
1=PRTL_BITMAP BitMapHeader
2=PULONG StartingIndex
ParamCount=2
@=RtlFindLongestRunClear(PRTL_BITMAP BitMapHeader, PULONG StartingIndex);
[RtlFindMessage]
1=PVOID DllHandle
2=ULONG MessageTableId
3=ULONG MessageLanguageId
4=ULONG MessageId
5=PMESSAGE_RESOURCE_ENTRY *MessageEntry
ParamCount=5
@=RtlFindMessage(PVOID DllHandle, ULONG MessageTableId, ULONG MessageLanguageId, ULONG MessageId, PMESSAGE_RESOURCE_ENTRY *MessageEntry);
[RtlFindMostSignificantBit]
1=ULONGLONG Set
ParamCount=1
@=RtlFindMostSignificantBit(ULONGLONG Set);
[RtlFindNextForwardRunClear]
1=PRTL_BITMAP BitMapHeader
2=ULONG FromIndex
3=PULONG StartingRunIndex
ParamCount=3
@=RtlFindNextForwardRunClear(PRTL_BITMAP BitMapHeader, ULONG FromIndex, PULONG StartingRunIndex);
[RtlFindSetBits]
1=PRTL_BITMAP BitMapHeader
2=ULONG NumberToFind
3=ULONG HintIndex
ParamCount=3
@=RtlFindSetBits(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
[RtlFindSetBitsAndClear]
1=PRTL_BITMAP BitMapHeader
2=ULONG NumberToFind
3=ULONG HintIndex
ParamCount=3
@=RtlFindSetBitsAndClear(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
[RtlFirstEntrySList]
1=SLIST_HEADER *ListHead
ParamCount=1
@=RtlFirstEntrySList(SLIST_HEADER *ListHead);
[RtlFirstFreeAce]
1=PACL Acl
2=PVOID *FirstFree
ParamCount=2
@=RtlFirstFreeAce(PACL Acl, PVOID *FirstFree);
[RtlFlushSecureMemoryCache]
1=PVOID lpAddr
2=SIZE_T size
ParamCount=2
@=RtlFlushSecureMemoryCache(PVOID lpAddr, SIZE_T size);
[RtlFormatCurrentUserKeyPath]
1=PUNICODE_STRING CurrentUserKeyPath
ParamCount=1
@=RtlFormatCurrentUserKeyPath(PUNICODE_STRING CurrentUserKeyPath);
[RtlFormatMessage]
1=PWSTR MessageFormat
2=ULONG MaximumWidth
3=BOOLEAN IgnoreInserts
4=BOOLEAN ArgumentsAreAnsi
5=BOOLEAN ArgumentsAreAnArray
6=va_list *Arguments
7=PWSTR Buffer
8=ULONG Length
9=PULONG ReturnLength
ParamCount=9
@=RtlFormatMessage(PWSTR MessageFormat, ULONG MaximumWidth, BOOLEAN IgnoreInserts, BOOLEAN ArgumentsAreAnsi, BOOLEAN ArgumentsAreAnArray, va_list *Arguments, PWSTR Buffer, ULONG Length, PULONG ReturnLength);
[RtlFormatMessageEx]
1=PWSTR MessageFormat
2=ULONG MaximumWidth
3=BOOLEAN IgnoreInserts
4=BOOLEAN ArgumentsAreAnsi
5=BOOLEAN ArgumentsAreAnArray
6=va_list *Arguments
7=PWSTR Buffer
8=ULONG Length
9=PULONG ReturnLength
10=PPARSE_MESSAGE_CONTEXT ParseContext
ParamCount=10
@=RtlFormatMessageEx(PWSTR MessageFormat, ULONG MaximumWidth, BOOLEAN IgnoreInserts, BOOLEAN ArgumentsAreAnsi, BOOLEAN ArgumentsAreAnArray, va_list *Arguments, PWSTR Buffer, ULONG Length, PULONG ReturnLength, PPARSE_MESSAGE_CONTEXT ParseContext);
[RtlFreeActivationContextStack]
1=PACTIVATION_CONTEXT_STACK ActivationContextStackPointer
ParamCount=1
@=RtlFreeActivationContextStack(PACTIVATION_CONTEXT_STACK ActivationContextStackPointer);
[RtlFreeAnsiString]
1=PANSI_STRING AnsiString
ParamCount=1
@=RtlFreeAnsiString(PANSI_STRING AnsiString);
[RtlFreeHandle]
1=PRTL_HANDLE_TABLE HandleTable
2=PRTL_HANDLE_TABLE_ENTRY Handle
ParamCount=2
@=RtlFreeHandle(PRTL_HANDLE_TABLE HandleTable, PRTL_HANDLE_TABLE_ENTRY Handle);
[RtlFreeHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
ParamCount=3
@=RtlFreeHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress);
[RtlFreeOemString]
1=POEM_STRING OemString
ParamCount=1
@=RtlFreeOemString(POEM_STRING OemString);
[RtlFreeSid]
1=PSID Sid
ParamCount=1
@=RtlFreeSid(PSID Sid);
[RtlFreeThreadActivationContextStack]
ParamCount=0
@=RtlFreeThreadActivationContextStack();
[RtlFreeUnicodeString]
1=PUNICODE_STRING UnicodeString
ParamCount=1
@=RtlFreeUnicodeString(PUNICODE_STRING UnicodeString);
[RtlFreeUserStack]
1=PVOID AllocationBase
ParamCount=1
@=RtlFreeUserStack(PVOID AllocationBase);
[RtlGenerate8dot3Name]
1=PUNICODE_STRING Name
2=BOOLEAN AllowExtendedCharacters
3=PGENERATE_NAME_CONTEXT Context
4=PUNICODE_STRING Name8dot3
ParamCount=4
@=RtlGenerate8dot3Name(PUNICODE_STRING Name, BOOLEAN AllowExtendedCharacters, PGENERATE_NAME_CONTEXT Context, PUNICODE_STRING Name8dot3);
[RtlGetAce]
1=PACL Acl
2=ULONG AceIndex
3=PVOID *Ace
ParamCount=3
@=RtlGetAce(PACL Acl, ULONG AceIndex, PVOID *Ace);
[RtlGetActiveActivationContext]
1=PACTIVATION_CONTEXT *ActivationContext
ParamCount=1
@=RtlGetActiveActivationContext(PACTIVATION_CONTEXT *ActivationContext);
[RtlGetCallersAddress]
1=PVOID *CallersAddress
2=PVOID *CallersCaller
ParamCount=2
@=RtlGetCallersAddress(PVOID *CallersAddress, PVOID *CallersCaller);
[RtlGetCompressionWorkSpaceSize]
1=USHORT CompressionFormatAndEngine
2=PULONG CompressBufferWorkSpaceSize
3=PULONG CompressFragmentWorkSpaceSize
ParamCount=3
@=RtlGetCompressionWorkSpaceSize(USHORT CompressionFormatAndEngine, PULONG CompressBufferWorkSpaceSize, PULONG CompressFragmentWorkSpaceSize);
[RtlGetControlSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSECURITY_DESCRIPTOR_CONTROL Control
3=PULONG Revision
ParamCount=3
@=RtlGetControlSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL Control, PULONG Revision);
[RtlGetCriticalSectionRecursionCount]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlGetCriticalSectionRecursionCount(PRTL_CRITICAL_SECTION CriticalSection);
[RtlGetCurrentDirectory_U]
1=ULONG nBufferLength
2=PWSTR lpBuffer
ParamCount=2
@=RtlGetCurrentDirectory_U(ULONG nBufferLength, PWSTR lpBuffer);
[RtlGetCurrentPeb]
ParamCount=0
@=RtlGetCurrentPeb();
[RtlGetCurrentProcessorNumber]
ParamCount=0
@=RtlGetCurrentProcessorNumber();
[RtlGetDaclSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PBOOLEAN DaclPresent
3=PACL *Dacl
4=PBOOLEAN DaclDefaulted
ParamCount=4
@=RtlGetDaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PBOOLEAN DaclPresent, PACL *Dacl, PBOOLEAN DaclDefaulted);
[RtlGetElementGenericTable]
1=PRTL_GENERIC_TABLE Table
2=ULONG I
ParamCount=2
@=RtlGetElementGenericTable(PRTL_GENERIC_TABLE Table, ULONG I);
[RtlGetElementGenericTableAvl]
1=PRTL_AVL_TABLE Table
2=ULONG I
ParamCount=2
@=RtlGetElementGenericTableAvl(PRTL_AVL_TABLE Table, ULONG I);
[RtlGetFrame]
ParamCount=0
@=RtlGetFrame();
[RtlGetFullPathName_U]
1=PCWSTR lpFileName
2=ULONG nBufferLength
3=PWSTR lpBuffer
4=PWSTR *lpFilePart
ParamCount=4
@=RtlGetFullPathName_U(PCWSTR lpFileName, ULONG nBufferLength, PWSTR lpBuffer, PWSTR *lpFilePart);
[RtlGetFullPathName_UstrEx]
1=PCUNICODE_STRING FileName
2=PUNICODE_STRING StaticString
3=PUNICODE_STRING DynamicString
4=PUNICODE_STRING *StringUsed
5=SIZE_T *FilePartPrefixCch
6=PBOOLEAN NameInvalid
7=RTL_PATH_TYPE *InputPathType
8=SIZE_T *BytesRequired
ParamCount=8
@=RtlGetFullPathName_UstrEx(PCUNICODE_STRING FileName, PUNICODE_STRING StaticString, PUNICODE_STRING DynamicString, PUNICODE_STRING *StringUsed, SIZE_T *FilePartPrefixCch, PBOOLEAN NameInvalid, RTL_PATH_TYPE *InputPathType, SIZE_T *BytesRequired);
[RtlGetGroupSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID *Group
3=PBOOLEAN GroupDefaulted
ParamCount=3
@=RtlGetGroupSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID *Group, PBOOLEAN GroupDefaulted);
[RtlGetLastNtStatus]
ParamCount=0
@=RtlGetLastNtStatus();
[RtlGetLastWin32Error]
ParamCount=0
@=RtlGetLastWin32Error();
[RtlGetLongestNtPathLength]
ParamCount=0
@=RtlGetLongestNtPathLength();
[RtlGetNativeSystemInformation]
1=ULONG SystemInformationClass
2=PVOID NativeSystemInformation
3=ULONG InformationLength
4=PULONG ReturnLength
ParamCount=4
@=RtlGetNativeSystemInformation(ULONG SystemInformationClass, PVOID NativeSystemInformation, ULONG InformationLength, PULONG ReturnLength);
[RtlGetNtProductType]
1=PNT_PRODUCT_TYPE NtProductType
ParamCount=1
@=RtlGetNtProductType(PNT_PRODUCT_TYPE NtProductType);
[RtlGetOwnerSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID *Owner
3=PBOOLEAN OwnerDefaulted
ParamCount=3
@=RtlGetOwnerSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID *Owner, PBOOLEAN OwnerDefaulted);
[RtlGetProcessHeaps]
1=ULONG NumberOfHeaps
2=PVOID *ProcessHeaps
ParamCount=2
@=RtlGetProcessHeaps(ULONG NumberOfHeaps, PVOID *ProcessHeaps);
[RtlGetSaclSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PBOOLEAN SaclPresent
3=PACL *Sacl
4=PBOOLEAN SaclDefaulted
ParamCount=4
@=RtlGetSaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PBOOLEAN SaclPresent, PACL *Sacl, PBOOLEAN SaclDefaulted);
[RtlGetSecurityDescriptorRMControl]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PUCHAR RMControl
ParamCount=2
@=RtlGetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
[RtlGetSetBootStatusData]
1=HANDLE Handle
2=BOOLEAN Get
3=RTL_BSD_ITEM_TYPE DataItem
4=PVOID DataBuffer
5=ULONG DataBufferLength
6=PULONG ByteRead
ParamCount=6
@=RtlGetSetBootStatusData(HANDLE Handle, BOOLEAN Get, RTL_BSD_ITEM_TYPE DataItem, PVOID DataBuffer, ULONG DataBufferLength, PULONG ByteRead);
[RtlGetThreadErrorMode]
ParamCount=0
@=RtlGetThreadErrorMode();
[RtlGetUnloadEventTrace]
ParamCount=0
@=RtlGetUnloadEventTrace();
[RtlGetUserInfoHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
4=PVOID *UserValue
5=PULONG UserFlags
ParamCount=5
@=RtlGetUserInfoHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress, PVOID *UserValue, PULONG UserFlags);
[RtlGetVersion]
1=PRTL_OSVERSIONINFOW lpVersionInformation
ParamCount=1
@=RtlGetVersion(PRTL_OSVERSIONINFOW lpVersionInformation);
[RtlGUIDFromString]
1=PUNICODE_STRING GuidString
2=GUID* Guid
ParamCount=2
@=RtlGUIDFromString(PUNICODE_STRING GuidString, GUID* Guid);
[RtlHashUnicodeString]
1=UNICODE_STRING *String
2=BOOLEAN CaseInSensitive
3=ULONG HashAlgorithm
4=PULONG HashValue
ParamCount=4
@=RtlHashUnicodeString(UNICODE_STRING *String, BOOLEAN CaseInSensitive, ULONG HashAlgorithm, PULONG HashValue);
[RtlIdentifierAuthoritySid]
1=PSID Sid
ParamCount=1
@=RtlIdentifierAuthoritySid(PSID Sid);
[RtlImageDirectoryEntryToData]
1=PVOID BaseOfImage
2=BOOLEAN MappedAsImage
3=USHORT DirectoryEntry
4=PULONG Size
ParamCount=4
@=RtlImageDirectoryEntryToData(PVOID BaseOfImage, BOOLEAN MappedAsImage, USHORT DirectoryEntry, PULONG Size);
[RtlImageNtHeader]
1=PVOID Base
ParamCount=1
@=RtlImageNtHeader(PVOID Base);
[RtlImageNtHeaderEx]
1=ULONG Flags
2=PVOID Base
3=ULONG64 Size
4=PIMAGE_NT_HEADERS *OutHeaders
ParamCount=4
@=RtlImageNtHeaderEx(ULONG Flags, PVOID Base, ULONG64 Size, PIMAGE_NT_HEADERS *OutHeaders);
[RtlImageRvaToSection]
1=PIMAGE_NT_HEADERS NtHeaders
2=PVOID Base
3=ULONG Rva
ParamCount=3
@=RtlImageRvaToSection(PIMAGE_NT_HEADERS NtHeaders, PVOID Base, ULONG Rva);
[RtlImageRvaToVa]
1=PIMAGE_NT_HEADERS NtHeaders
2=PVOID Base
3=ULONG Rva
4=PIMAGE_SECTION_HEADER *LastRvaSection
ParamCount=4
@=RtlImageRvaToVa(PIMAGE_NT_HEADERS NtHeaders, PVOID Base, ULONG Rva, PIMAGE_SECTION_HEADER *LastRvaSection);
[RtlImpersonateSelf]
1=SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
ParamCount=1
@=RtlImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
[RtlInitAnsiString]
1=PANSI_STRING DestinationString
2=PCSZ SourceString
ParamCount=2
@=RtlInitAnsiString(PANSI_STRING DestinationString, PCSZ SourceString);
[RtlInitAnsiStringEx]
1=PANSI_STRING DestinationString
2=PCSZ SourceString
ParamCount=2
@=RtlInitAnsiStringEx(PANSI_STRING DestinationString, PCSZ SourceString);
[RtlInitBarrier]
1=PRTL_BARRIER Barrier
2=ULONG TotalThreads
3=ULONG SpinCount
ParamCount=3
@=RtlInitBarrier(PRTL_BARRIER Barrier, ULONG TotalThreads, ULONG SpinCount);
[RtlInitCodePageTable]
1=PUSHORT TableBase
2=PCPTABLEINFO CodePageTable
ParamCount=2
@=RtlInitCodePageTable(PUSHORT TableBase, PCPTABLEINFO CodePageTable);
[RtlInitializeAtomPackage]
1=ULONG AllocationTag
ParamCount=1
@=RtlInitializeAtomPackage(ULONG AllocationTag);
[RtlInitializeBitMap]
1=PRTL_BITMAP BitMapHeader
2=PULONG BitMapBuffer
3=ULONG SizeOfBitMap
ParamCount=3
@=RtlInitializeBitMap(PRTL_BITMAP BitMapHeader, PULONG BitMapBuffer, ULONG SizeOfBitMap);
[RtlInitializeConditionVariable]
1=PRTL_CONDITION_VARIABLE ConditionVariable
ParamCount=1
@=RtlInitializeConditionVariable(PRTL_CONDITION_VARIABLE ConditionVariable);
[RtlInitializeContext]
1=HANDLE Process
2=PCONTEXT Context
3=PVOID Parameter
4=PVOID InitialPc
5=PVOID InitialSp
ParamCount=5
@=RtlInitializeContext(HANDLE Process, PCONTEXT Context, PVOID Parameter, PVOID InitialPc, PVOID InitialSp);
[RtlInitializeCriticalSection]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlInitializeCriticalSection(PRTL_CRITICAL_SECTION CriticalSection);
[RtlInitializeCriticalSectionAndSpinCount]
1=PRTL_CRITICAL_SECTION CriticalSection
2=ULONG SpinCount
ParamCount=2
@=RtlInitializeCriticalSectionAndSpinCount(PRTL_CRITICAL_SECTION CriticalSection, ULONG SpinCount);
[RtlInitializeGenericTable]
1=PRTL_GENERIC_TABLE Table
2=PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine
3=PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine
4=PRTL_GENERIC_FREE_ROUTINE FreeRoutine
5=PVOID TableContext
ParamCount=5
@=RtlInitializeGenericTable(PRTL_GENERIC_TABLE Table, PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine, PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine, PRTL_GENERIC_FREE_ROUTINE FreeRoutine, PVOID TableContext);
[RtlInitializeGenericTableAvl]
1=PRTL_AVL_TABLE Table
2=PRTL_AVL_COMPARE_ROUTINE CompareRoutine
3=PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine
4=PRTL_AVL_FREE_ROUTINE FreeRoutine
5=PVOID TableContext
ParamCount=5
@=RtlInitializeGenericTableAvl(PRTL_AVL_TABLE Table, PRTL_AVL_COMPARE_ROUTINE CompareRoutine, PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine, PRTL_AVL_FREE_ROUTINE FreeRoutine, PVOID TableContext);
[RtlInitializeHandleTable]
1=ULONG MaximumNumberOfHandles
2=ULONG SizeOfHandleTableEntry
3=PRTL_HANDLE_TABLE HandleTable
ParamCount=3
@=RtlInitializeHandleTable(ULONG MaximumNumberOfHandles, ULONG SizeOfHandleTableEntry, PRTL_HANDLE_TABLE HandleTable);
[RtlInitializeResource]
1=PRTL_RESOURCE Resource
ParamCount=1
@=RtlInitializeResource(PRTL_RESOURCE Resource);
[RtlInitializeRXact]
1=HANDLE RootRegistryKey
2=BOOLEAN CommitIfNecessary
3=PRTL_RXACT_CONTEXT *RXactContext
ParamCount=3
@=RtlInitializeRXact(HANDLE RootRegistryKey, BOOLEAN CommitIfNecessary, PRTL_RXACT_CONTEXT *RXactContext);
[RtlInitializeSid]
1=PSID Sid
2=PSID_IDENTIFIER_AUTHORITY IdentifierAuthority
3=UCHAR SubAuthorityCount
ParamCount=3
@=RtlInitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY IdentifierAuthority, UCHAR SubAuthorityCount);
[RtlInitializeSListHead]
1=PSLIST_HEADER ListHead
ParamCount=1
@=RtlInitializeSListHead(PSLIST_HEADER ListHead);
[RtlInitializeSRWLock]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlInitializeSRWLock(PRTL_SRWLOCK SRWLock);
[RtlInitMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
ParamCount=1
@=RtlInitMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream);
[RtlInitNlsTables]
1=PUSHORT AnsiNlsBase
2=PUSHORT OemNlsBase
3=PUSHORT LanguageNlsBase
4=PNLSTABLEINFO TableInfo
ParamCount=4
@=RtlInitNlsTables(PUSHORT AnsiNlsBase, PUSHORT OemNlsBase, PUSHORT LanguageNlsBase, PNLSTABLEINFO TableInfo);
[RtlInitOutOfProcessMemoryStream]
1=PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream
ParamCount=1
@=RtlInitOutOfProcessMemoryStream(PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream);
[RtlInitString]
1=PSTRING DestinationString
2=PCSZ SourceString
ParamCount=2
@=RtlInitString(PSTRING DestinationString, PCSZ SourceString);
[RtlInitUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCWSTR SourceString
ParamCount=2
@=RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
[RtlInitUnicodeStringEx]
1=PUNICODE_STRING DestinationString
2=PCWSTR SourceString
ParamCount=2
@=RtlInitUnicodeStringEx(PUNICODE_STRING DestinationString, PCWSTR SourceString);
[RtlInsertElementGenericTable]
1=PRTL_GENERIC_TABLE Table
2=PVOID Buffer
3=CLONG BufferSize
4=PBOOLEAN NewElement
ParamCount=4
@=RtlInsertElementGenericTable(PRTL_GENERIC_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement);
[RtlInsertElementGenericTableAvl]
1=PRTL_AVL_TABLE Table
2=PVOID Buffer
3=CLONG BufferSize
4=PBOOLEAN NewElement
ParamCount=4
@=RtlInsertElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement);
[RtlInsertElementGenericTableFull]
1=PRTL_GENERIC_TABLE Table
2=PVOID Buffer
3=CLONG BufferSize
4=PBOOLEAN NewElement
5=PVOID NodeOrParent
6=TABLE_SEARCH_RESULT SearchResult
ParamCount=6
@=RtlInsertElementGenericTableFull(PRTL_GENERIC_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement, PVOID NodeOrParent, TABLE_SEARCH_RESULT SearchResult);
[RtlInsertElementGenericTableFullAvl]
1=PRTL_AVL_TABLE Table
2=PVOID Buffer
3=CLONG BufferSize
4=PBOOLEAN NewElement
5=PVOID NodeOrParent
6=TABLE_SEARCH_RESULT SearchResult
ParamCount=6
@=RtlInsertElementGenericTableFullAvl(PRTL_AVL_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement, PVOID NodeOrParent, TABLE_SEARCH_RESULT SearchResult);
[RtlInt64ToUnicodeString]
1=ULONGLONG Value
2=ULONG Base
3=PUNICODE_STRING String
ParamCount=3
@=RtlInt64ToUnicodeString(ULONGLONG Value, ULONG Base, PUNICODE_STRING String);
[RtlIntegerToChar]
1=ULONG Value
2=ULONG Base
3=LONG OutputLength
4=PSZ String
ParamCount=4
@=RtlIntegerToChar(ULONG Value, ULONG Base, LONG OutputLength, PSZ String);
[RtlIntegerToUnicodeString]
1=ULONG Value
2=ULONG Base
3=PUNICODE_STRING String
ParamCount=3
@=RtlIntegerToUnicodeString(ULONG Value, ULONG Base, PUNICODE_STRING String);
[RtlInterlockedFlushSList]
1=PSLIST_HEADER ListHead
ParamCount=1
@=RtlInterlockedFlushSList(PSLIST_HEADER ListHead);
[RtlInterlockedPopEntrySList]
1=PSLIST_HEADER ListHead
ParamCount=1
@=RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead);
[RtlInterlockedPushEntrySList]
1=PSLIST_HEADER ListHead
2=PSLIST_ENTRY ListEntry
ParamCount=2
@=RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
[RtlInterlockedPushListSList]
1=PSLIST_HEADER ListHead
2=PSLIST_ENTRY List
3=PSLIST_ENTRY ListEnd
4=ULONG Count
ParamCount=4
@=RtlInterlockedPushListSList(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, ULONG Count);
[RtlIpv4AddressToStringA]
1=in_addr *Addr
2=PSTR S
ParamCount=2
@=RtlIpv4AddressToStringA(in_addr *Addr, PSTR S);
[RtlIpv4AddressToStringExA]
1=in_addr *Address
2=USHORT Port
3=PSTR AddressString
4=PULONG AddressStringLength
ParamCount=4
@=RtlIpv4AddressToStringExA(in_addr *Address, USHORT Port, PSTR AddressString, PULONG AddressStringLength);
[RtlIpv4AddressToStringExW]
1=in_addr *Address
2=USHORT Port
3=PWSTR AddressString
4=PULONG AddressStringLength
ParamCount=4
@=RtlIpv4AddressToStringExW(in_addr *Address, USHORT Port, PWSTR AddressString, PULONG AddressStringLength);
[RtlIpv4AddressToStringW]
1=in_addr *Addr
2=PWSTR S
ParamCount=2
@=RtlIpv4AddressToStringW(in_addr *Addr, PWSTR S);
[RtlIpv4StringToAddressA]
1=PCSTR S
2=BOOLEAN Strict
3=PCSTR *Terminator
4=in_addr *Addr
ParamCount=4
@=RtlIpv4StringToAddressA(PCSTR S, BOOLEAN Strict, PCSTR *Terminator, in_addr *Addr);
[RtlIpv4StringToAddressExA]
1=PCSTR AddressString
2=BOOLEAN Strict
3=in_addr *Address
4=PUSHORT Port
ParamCount=4
@=RtlIpv4StringToAddressExA(PCSTR AddressString, BOOLEAN Strict, in_addr *Address, PUSHORT Port);
[RtlIpv4StringToAddressExW]
1=PCWSTR AddressString
2=BOOLEAN Strict
3=in_addr *Address
4=PUSHORT Port
ParamCount=4
@=RtlIpv4StringToAddressExW(PCWSTR AddressString, BOOLEAN Strict, in_addr *Address, PUSHORT Port);
[RtlIpv4StringToAddressW]
1=PCWSTR S
2=BOOLEAN Strict
3=LPCWSTR *Terminator
4=in_addr *Addr
ParamCount=4
@=RtlIpv4StringToAddressW(PCWSTR S, BOOLEAN Strict, LPCWSTR *Terminator, in_addr *Addr);
[RtlIpv6AddressToStringA]
1=in6_addr *Addr
2=PSTR S
ParamCount=2
@=RtlIpv6AddressToStringA(in6_addr *Addr, PSTR S);
[RtlIpv6AddressToStringExA]
1=in6_addr *Address
2=ULONG ScopeId
3=USHORT Port
4=PSTR AddressString
5=PULONG AddressStringLength
ParamCount=5
@=RtlIpv6AddressToStringExA(in6_addr *Address, ULONG ScopeId, USHORT Port, PSTR AddressString, PULONG AddressStringLength);
[RtlIpv6AddressToStringExW]
1=in6_addr *Address
2=ULONG ScopeId
3=USHORT Port
4=PWSTR AddressString
5=PULONG AddressStringLength
ParamCount=5
@=RtlIpv6AddressToStringExW(in6_addr *Address, ULONG ScopeId, USHORT Port, PWSTR AddressString, PULONG AddressStringLength);
[RtlIpv6AddressToStringW]
1=in6_addr *Addr
2=PWSTR S
ParamCount=2
@=RtlIpv6AddressToStringW(in6_addr *Addr, PWSTR S);
[RtlIpv6StringToAddressA]
1=PCSTR S
2=PCSTR *Terminator
3=in6_addr *Addr
ParamCount=3
@=RtlIpv6StringToAddressA(PCSTR S, PCSTR *Terminator, in6_addr *Addr);
[RtlIpv6StringToAddressExA]
1=PCSTR AddressString
2=in6_addr *Address
3=PULONG ScopeId
4=PUSHORT Port
ParamCount=4
@=RtlIpv6StringToAddressExA(PCSTR AddressString, in6_addr *Address, PULONG ScopeId, PUSHORT Port);
[RtlIpv6StringToAddressExW]
1=PCWSTR AddressString
2=in6_addr *Address
3=PULONG ScopeId
4=PUSHORT Port
ParamCount=4
@=RtlIpv6StringToAddressExW(PCWSTR AddressString, in6_addr *Address, PULONG ScopeId, PUSHORT Port);
[RtlIpv6StringToAddressW]
1=PCWSTR S
2=PCWSTR *Terminator
3=in6_addr *Addr
ParamCount=3
@=RtlIpv6StringToAddressW(PCWSTR S, PCWSTR *Terminator, in6_addr *Addr);
[RtlIsActivationContextActive]
1=PACTIVATION_CONTEXT ActivationContext
ParamCount=1
@=RtlIsActivationContextActive(PACTIVATION_CONTEXT ActivationContext);
[RtlIsCriticalSectionLocked]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlIsCriticalSectionLocked(PRTL_CRITICAL_SECTION CriticalSection);
[RtlIsCriticalSectionLockedByThread]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlIsCriticalSectionLockedByThread(PRTL_CRITICAL_SECTION CriticalSection);
[RtlIsDosDeviceName_U]
1=PCWSTR DosFileName
ParamCount=1
@=RtlIsDosDeviceName_U(PCWSTR DosFileName);
[RtlIsGenericTableEmpty]
1=PRTL_GENERIC_TABLE Table
ParamCount=1
@=RtlIsGenericTableEmpty(PRTL_GENERIC_TABLE Table);
[RtlIsGenericTableEmptyAvl]
1=PRTL_AVL_TABLE Table
ParamCount=1
@=RtlIsGenericTableEmptyAvl(PRTL_AVL_TABLE Table);
[RtlIsNameInExpression]
1=PUNICODE_STRING Expression
2=PUNICODE_STRING Name
3=BOOLEAN IgnoreCase
4=PWCH UpcaseTable
ParamCount=4
@=RtlIsNameInExpression(PUNICODE_STRING Expression, PUNICODE_STRING Name, BOOLEAN IgnoreCase, PWCH UpcaseTable);
[RtlIsNameLegalDOS8Dot3]
1=PUNICODE_STRING Name
2=POEM_STRING OemName
3=PBOOLEAN NameContainsSpaces
ParamCount=3
@=RtlIsNameLegalDOS8Dot3(PUNICODE_STRING Name, POEM_STRING OemName, PBOOLEAN NameContainsSpaces);
[RtlIsNormalizedString]
1=ULONG NormForm
2=PCWSTR SourceString
3=LONG SourceStringLength
4=PBOOLEAN Normalized
ParamCount=4
@=RtlIsNormalizedString(ULONG NormForm, PCWSTR SourceString, LONG SourceStringLength, PBOOLEAN Normalized);
[RtlIsTextUnicode]
1=VOID *Buffer
2=ULONG Size
3=PULONG Result
ParamCount=3
@=RtlIsTextUnicode(VOID *Buffer, ULONG Size, PULONG Result);
[RtlIsThreadWithinLoaderCallout]
ParamCount=0
@=RtlIsThreadWithinLoaderCallout();
[RtlIsValidHandle]
1=PRTL_HANDLE_TABLE HandleTable
2=PRTL_HANDLE_TABLE_ENTRY Handle
ParamCount=2
@=RtlIsValidHandle(PRTL_HANDLE_TABLE HandleTable, PRTL_HANDLE_TABLE_ENTRY Handle);
[RtlIsValidIndexHandle]
1=PRTL_HANDLE_TABLE HandleTable
2=ULONG HandleIndex
3=PRTL_HANDLE_TABLE_ENTRY *Handle
ParamCount=3
@=RtlIsValidIndexHandle(PRTL_HANDLE_TABLE HandleTable, ULONG HandleIndex, PRTL_HANDLE_TABLE_ENTRY *Handle);
[RtlLargeIntegerToChar]
1=PLARGE_INTEGER Value
2=ULONG Base
3=LONG OutputLength
4=PSZ String
ParamCount=4
@=RtlLargeIntegerToChar(PLARGE_INTEGER Value, ULONG Base, LONG OutputLength, PSZ String);
[RtlLeaveCriticalSection]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlLeaveCriticalSection(PRTL_CRITICAL_SECTION CriticalSection);
[RtlLengthRequiredSid]
1=ULONG SubAuthorityCount
ParamCount=1
@=RtlLengthRequiredSid(ULONG SubAuthorityCount);
[RtlLengthSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=1
@=RtlLengthSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor);
[RtlLengthSid]
1=PSID Sid
ParamCount=1
@=RtlLengthSid(PSID Sid);
[RtlLengthSidAsUnicodeString]
1=PSID Sid
2=PULONG StringLength
ParamCount=2
@=RtlLengthSidAsUnicodeString(PSID Sid, PULONG StringLength);
[RtlLocalTimeToSystemTime]
1=PLARGE_INTEGER LocalTime
2=PLARGE_INTEGER SystemTime
ParamCount=2
@=RtlLocalTimeToSystemTime(PLARGE_INTEGER LocalTime, PLARGE_INTEGER SystemTime);
[RtlLockBootStatusData]
1=PHANDLE BootStatusDataHandle
ParamCount=1
@=RtlLockBootStatusData(PHANDLE BootStatusDataHandle);
[RtlLockHeap]
1=PVOID HeapHandle
ParamCount=1
@=RtlLockHeap(PVOID HeapHandle);
[RtlLockMemoryStreamRegion]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=ULARGE_INTEGER Offset
3=ULARGE_INTEGER NumberOfBytes
4=ULONG LockType
ParamCount=4
@=RtlLockMemoryStreamRegion(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, ULARGE_INTEGER Offset, ULARGE_INTEGER NumberOfBytes, ULONG LockType);
[RtlLogStackBackTrace]
ParamCount=0
@=RtlLogStackBackTrace();
[RtlLookupAtomInAtomTable]
1=PVOID AtomTableHandle
2=PWSTR AtomName
3=PRTL_ATOM Atom
ParamCount=3
@=RtlLookupAtomInAtomTable(PVOID AtomTableHandle, PWSTR AtomName, PRTL_ATOM Atom);
[RtlLookupElementGenericTable]
1=PRTL_GENERIC_TABLE Table
2=PVOID Buffer
ParamCount=2
@=RtlLookupElementGenericTable(PRTL_GENERIC_TABLE Table, PVOID Buffer);
[RtlLookupElementGenericTableAvl]
1=PRTL_AVL_TABLE Table
2=PVOID Buffer
ParamCount=2
@=RtlLookupElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer);
[RtlLookupElementGenericTableFull]
1=PRTL_GENERIC_TABLE Table
2=PVOID Buffer
3=PVOID *NodeOrParent
4=TABLE_SEARCH_RESULT *SearchResult
ParamCount=4
@=RtlLookupElementGenericTableFull(PRTL_GENERIC_TABLE Table, PVOID Buffer, PVOID *NodeOrParent, TABLE_SEARCH_RESULT *SearchResult);
[RtlLookupElementGenericTableFullAvl]
1=PRTL_AVL_TABLE Table
2=PVOID Buffer
3=PVOID *NodeOrParent
4=TABLE_SEARCH_RESULT *SearchResult
ParamCount=4
@=RtlLookupElementGenericTableFullAvl(PRTL_AVL_TABLE Table, PVOID Buffer, PVOID *NodeOrParent, TABLE_SEARCH_RESULT *SearchResult);
[RtlMakeSelfRelativeSD]
1=PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor
2=PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor
3=PULONG BufferLength
ParamCount=3
@=RtlMakeSelfRelativeSD(PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor, PULONG BufferLength);
[RtlMapGenericMask]
1=PACCESS_MASK AccessMask
2=PGENERIC_MAPPING GenericMapping
ParamCount=2
@=RtlMapGenericMask(PACCESS_MASK AccessMask, PGENERIC_MAPPING GenericMapping);
[RtlMapSecurityErrorToNtStatus]
1=SECURITY_STATUS Error
ParamCount=1
@=RtlMapSecurityErrorToNtStatus(SECURITY_STATUS Error);
[RtlMultiByteToUnicodeN]
1=PWCH UnicodeString
2=ULONG MaxBytesInUnicodeString
3=PULONG BytesInUnicodeString
4=PCSTR MultiByteString
5=ULONG BytesInMultiByteString
ParamCount=5
@=RtlMultiByteToUnicodeN(PWCH UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, PCSTR MultiByteString, ULONG BytesInMultiByteString);
[RtlMultiByteToUnicodeSize]
1=PULONG BytesInUnicodeString
2=PCSTR MultiByteString
3=ULONG BytesInMultiByteString
ParamCount=3
@=RtlMultiByteToUnicodeSize(PULONG BytesInUnicodeString, PCSTR MultiByteString, ULONG BytesInMultiByteString);
[RtlMultipleAllocateHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=SIZE_T Size
4=ULONG Count
5=PVOID *Array
ParamCount=5
@=RtlMultipleAllocateHeap(PVOID HeapHandle, ULONG Flags, SIZE_T Size, ULONG Count, PVOID *Array);
[RtlMultipleFreeHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=ULONG Count
4=PVOID *Array
ParamCount=4
@=RtlMultipleFreeHeap(PVOID HeapHandle, ULONG Flags, ULONG Count, PVOID *Array);
[RtlNewInstanceSecurityObject]
1=BOOLEAN ParentDescriptorChanged
2=BOOLEAN CreatorDescriptorChanged
3=PLUID OldClientTokenModifiedId
4=PLUID NewClientTokenModifiedId
5=PSECURITY_DESCRIPTOR ParentDescriptor
6=PSECURITY_DESCRIPTOR CreatorDescriptor
7=PSECURITY_DESCRIPTOR *NewDescriptor
8=BOOLEAN IsDirectoryObject
9=HANDLE Token
10=PGENERIC_MAPPING GenericMapping
ParamCount=10
@=RtlNewInstanceSecurityObject(BOOLEAN ParentDescriptorChanged, BOOLEAN CreatorDescriptorChanged, PLUID OldClientTokenModifiedId, PLUID NewClientTokenModifiedId, PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, BOOLEAN IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[RtlNewSecurityGrantedAccess]
1=ACCESS_MASK DesiredAccess
2=PPRIVILEGE_SET Privileges
3=PULONG Length
4=HANDLE Token
5=PGENERIC_MAPPING GenericMapping
6=PACCESS_MASK RemainingDesiredAccess
ParamCount=6
@=RtlNewSecurityGrantedAccess(ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, PULONG Length, HANDLE Token, PGENERIC_MAPPING GenericMapping, PACCESS_MASK RemainingDesiredAccess);
[RtlNewSecurityObject]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CreatorDescriptor
3=PSECURITY_DESCRIPTOR *NewDescriptor
4=BOOLEAN IsDirectoryObject
5=HANDLE Token
6=PGENERIC_MAPPING GenericMapping
ParamCount=6
@=RtlNewSecurityObject(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, BOOLEAN IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[RtlNewSecurityObjectEx]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CreatorDescriptor
3=PSECURITY_DESCRIPTOR *NewDescriptor
4=GUID *ObjectType
5=BOOLEAN IsDirectoryObject
6=ULONG AutoInheritFlags
7=HANDLE Token
8=PGENERIC_MAPPING GenericMapping
ParamCount=8
@=RtlNewSecurityObjectEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[RtlNewSecurityObjectWithMultipleInheritance]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CreatorDescriptor
3=PSECURITY_DESCRIPTOR *NewDescriptor
4=GUID **pObjectType
5=ULONG GuidCount
6=BOOLEAN IsDirectoryObject
7=ULONG AutoInheritFlags
8=HANDLE Token
9=PGENERIC_MAPPING GenericMapping
ParamCount=9
@=RtlNewSecurityObjectWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **pObjectType, ULONG GuidCount, BOOLEAN IsDirectoryObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[RtlNormalizeProcessParams]
1=PRTL_USER_PROCESS_PARAMETERS ProcessParameters
ParamCount=1
@=RtlNormalizeProcessParams(PRTL_USER_PROCESS_PARAMETERS ProcessParameters);
[RtlNormalizeString]
1=ULONG NormForm
2=PCWSTR SourceString
3=LONG SourceStringLength
4=PWSTR DestinationString
5=PLONG DestinationStringLength
ParamCount=5
@=RtlNormalizeString(ULONG NormForm, PCWSTR SourceString, LONG SourceStringLength, PWSTR DestinationString, PLONG DestinationStringLength);
[RtlNtPathNameToDosPathName]
1=ULONG Flags
2=PRTL_UNICODE_STRING_BUFFER Path
3=PULONG Disposition
4=PWSTR* FilePart
ParamCount=4
@=RtlNtPathNameToDosPathName(ULONG Flags, PRTL_UNICODE_STRING_BUFFER Path, PULONG Disposition, PWSTR* FilePart);
[RtlNtStatusToDosError]
1=NTSTATUS Status
ParamCount=1
@=RtlNtStatusToDosError(NTSTATUS Status);
[RtlNtStatusToDosErrorNoTeb]
1=NTSTATUS Status
ParamCount=1
@=RtlNtStatusToDosErrorNoTeb(NTSTATUS Status);
[RtlNumberGenericTableElements]
1=PRTL_GENERIC_TABLE Table
ParamCount=1
@=RtlNumberGenericTableElements(PRTL_GENERIC_TABLE Table);
[RtlNumberGenericTableElementsAvl]
1=PRTL_AVL_TABLE Table
ParamCount=1
@=RtlNumberGenericTableElementsAvl(PRTL_AVL_TABLE Table);
[RtlNumberOfClearBits]
1=PRTL_BITMAP BitMapHeader
ParamCount=1
@=RtlNumberOfClearBits(PRTL_BITMAP BitMapHeader);
[RtlNumberOfSetBits]
1=PRTL_BITMAP BitMapHeader
ParamCount=1
@=RtlNumberOfSetBits(PRTL_BITMAP BitMapHeader);
[RtlOemStringToUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCOEM_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlOemStringToUnicodeString(PUNICODE_STRING DestinationString, PCOEM_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlOemToUnicodeN]
1=PWSTR UnicodeString
2=ULONG MaxBytesInUnicodeString
3=PULONG BytesInUnicodeString
4=PCH OemString
5=ULONG BytesInOemString
ParamCount=5
@=RtlOemToUnicodeN(PWSTR UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, PCH OemString, ULONG BytesInOemString);
[RtlOpenCurrentUser]
1=ULONG DesiredAccess
2=PHANDLE CurrentUserKey
ParamCount=2
@=RtlOpenCurrentUser(ULONG DesiredAccess, PHANDLE CurrentUserKey);
[RtlPcToFileHeader]
1=PVOID PcValue
2=PVOID *BaseOfImage
ParamCount=2
@=RtlPcToFileHeader(PVOID PcValue, PVOID *BaseOfImage);
[RtlPinAtomInAtomTable]
1=PVOID AtomTableHandle
2=RTL_ATOM Atom
ParamCount=2
@=RtlPinAtomInAtomTable(PVOID AtomTableHandle, RTL_ATOM Atom);
[RtlpNtCreateKey]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Options
5=PUNICODE_STRING Provider
6=PULONG Disposition
ParamCount=6
@=RtlpNtCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Options, PUNICODE_STRING Provider, PULONG Disposition);
[RtlpNtEnumerateSubKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING SubKeyName
3=ULONG Index
4=PLARGE_INTEGER LastWriteTime
ParamCount=4
@=RtlpNtEnumerateSubKey(HANDLE KeyHandle, PUNICODE_STRING SubKeyName, ULONG Index, PLARGE_INTEGER LastWriteTime);
[RtlpNtMakeTemporaryKey]
1=HANDLE KeyHandle
ParamCount=1
@=RtlpNtMakeTemporaryKey(HANDLE KeyHandle);
[RtlpNtOpenKey]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Options
ParamCount=4
@=RtlpNtOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Options);
[RtlpNtQueryValueKey]
1=HANDLE KeyHandle
2=PULONG KeyValueType
3=PVOID KeyValue
4=PULONG KeyValueLength
5=PLARGE_INTEGER LastWriteTime
ParamCount=5
@=RtlpNtQueryValueKey(HANDLE KeyHandle, PULONG KeyValueType, PVOID KeyValue, PULONG KeyValueLength, PLARGE_INTEGER LastWriteTime);
[RtlpNtSetValueKey]
1=HANDLE KeyHandle
2=ULONG KeyValueType
3=PVOID KeyValue
4=ULONG KeyValueLength
ParamCount=4
@=RtlpNtSetValueKey(HANDLE KeyHandle, ULONG KeyValueType, PVOID KeyValue, ULONG KeyValueLength);
[RtlPopFrame]
1=PTEB_ACTIVE_FRAME Frame
ParamCount=1
@=RtlPopFrame(PTEB_ACTIVE_FRAME Frame);
[RtlPrefixString]
1=STRING *String1
2=STRING *String2
3=BOOLEAN CaseInSensitive
ParamCount=3
@=RtlPrefixString(STRING *String1, STRING *String2, BOOLEAN CaseInSensitive);
[RtlPrefixUnicodeString]
1=PCUNICODE_STRING String1
2=PCUNICODE_STRING String2
3=BOOLEAN CaseInSensitive
ParamCount=3
@=RtlPrefixUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
[RtlProcessFlsData]
1=PRTL_UNKNOWN_FLS_DATA Buffer
ParamCount=1
@=RtlProcessFlsData(PRTL_UNKNOWN_FLS_DATA Buffer);
[RtlProtectHeap]
1=PVOID HeapHandle
2=BOOLEAN MakeReadOnly
ParamCount=2
@=RtlProtectHeap(PVOID HeapHandle, BOOLEAN MakeReadOnly);
[RtlPushFrame]
1=PTEB_ACTIVE_FRAME Frame
ParamCount=1
@=RtlPushFrame(PTEB_ACTIVE_FRAME Frame);
[RtlQueryAtomInAtomTable]
1=PVOID AtomTableHandle
2=RTL_ATOM Atom
3=PULONG AtomUsage
4=PULONG AtomFlags
5=PWSTR AtomName
6=PULONG AtomNameLength
ParamCount=6
@=RtlQueryAtomInAtomTable(PVOID AtomTableHandle, RTL_ATOM Atom, PULONG AtomUsage, PULONG AtomFlags, PWSTR AtomName, PULONG AtomNameLength);
[RtlQueryDepthSList]
1=PSLIST_HEADER ListHead
ParamCount=1
@=RtlQueryDepthSList(PSLIST_HEADER ListHead);
[RtlQueryEnvironmentVariable]
1=PVOID Environment
2=PWSTR Name
3=SIZE_T NameLength
4=PWSTR Value
5=SIZE_T ValueLength
6=PSIZE_T ReturnLength
ParamCount=6
@=RtlQueryEnvironmentVariable(PVOID Environment, PWSTR Name, SIZE_T NameLength, PWSTR Value, SIZE_T ValueLength, PSIZE_T ReturnLength);
[RtlQueryEnvironmentVariable_U]
1=PVOID Environment
2=PCUNICODE_STRING Name
3=PUNICODE_STRING Value
ParamCount=3
@=RtlQueryEnvironmentVariable_U(PVOID Environment, PCUNICODE_STRING Name, PUNICODE_STRING Value);
[RtlQueryHeapInformation]
1=PVOID HeapHandle
2=HEAP_INFORMATION_CLASS HeapInformationClass
3=PVOID HeapInformation
4=SIZE_T HeapInformationLength
5=PSIZE_T ReturnLength
ParamCount=5
@=RtlQueryHeapInformation(PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
[RtlQueryInformationAcl]
1=PACL Acl
2=PVOID AclInformation
3=ULONG AclInformationLength
4=ACL_INFORMATION_CLASS AclInformationClass
ParamCount=4
@=RtlQueryInformationAcl(PACL Acl, PVOID AclInformation, ULONG AclInformationLength, ACL_INFORMATION_CLASS AclInformationClass);
[RtlQueryInformationActivationContext]
1=ULONG Flags
2=PCACTIVATION_CONTEXT ActivationContext
3=PVOID SubInstanceIndex
4=ACTIVATION_CONTEXT_INFO_CLASS ActivationContextInformationClass
5=PVOID ActivationContextInformation
6=SIZE_T ActivationContextInformationLength
7=PSIZE_T ReturnLength
ParamCount=7
@=RtlQueryInformationActivationContext(ULONG Flags, PCACTIVATION_CONTEXT ActivationContext, PVOID SubInstanceIndex, ACTIVATION_CONTEXT_INFO_CLASS ActivationContextInformationClass, PVOID ActivationContextInformation, SIZE_T ActivationContextInformationLength, PSIZE_T ReturnLength);
[RtlQueryInformationActiveActivationContext]
1=ACTIVATION_CONTEXT_INFO_CLASS ActivationContextInformationClass
2=PVOID ActivationContextInformation
3=SIZE_T ActivationContextInformationLength
4=PSIZE_T ReturnLength
ParamCount=4
@=RtlQueryInformationActiveActivationContext(ACTIVATION_CONTEXT_INFO_CLASS ActivationContextInformationClass, PVOID ActivationContextInformation, SIZE_T ActivationContextInformationLength, PSIZE_T ReturnLength);
[RtlQueryInterfaceMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=IID* Interface
3=PVOID* Object
ParamCount=3
@=RtlQueryInterfaceMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, IID* Interface, PVOID* Object);
[RtlQueryPerformanceCounter]
1=PLARGE_INTEGER PerformanceCounter
ParamCount=1
@=RtlQueryPerformanceCounter(PLARGE_INTEGER PerformanceCounter);
[RtlQueryPerformanceFrequency]
1=PLARGE_INTEGER PerformanceFrequency
ParamCount=1
@=RtlQueryPerformanceFrequency(PLARGE_INTEGER PerformanceFrequency);
[RtlQueryProcessBackTraceInformation]
1=PRTL_DEBUG_INFORMATION Buffer
ParamCount=1
@=RtlQueryProcessBackTraceInformation(PRTL_DEBUG_INFORMATION Buffer);
[RtlQueryProcessDebugInformation]
1=HANDLE UniqueProcessId
2=ULONG Flags
3=PRTL_DEBUG_INFORMATION Buffer
ParamCount=3
@=RtlQueryProcessDebugInformation(HANDLE UniqueProcessId, ULONG Flags, PRTL_DEBUG_INFORMATION Buffer);
[RtlQueryProcessHeapInformation]
1=PRTL_DEBUG_INFORMATION Buffer
ParamCount=1
@=RtlQueryProcessHeapInformation(PRTL_DEBUG_INFORMATION Buffer);
[RtlQueryProcessLockInformation]
1=PRTL_DEBUG_INFORMATION Buffer
ParamCount=1
@=RtlQueryProcessLockInformation(PRTL_DEBUG_INFORMATION Buffer);
[RtlQueryRegistryValues]
1=ULONG RelativeTo
2=PCWSTR Path
3=PRTL_QUERY_REGISTRY_TABLE QueryTable
4=PVOID Context
5=PVOID Environment
ParamCount=5
@=RtlQueryRegistryValues(ULONG RelativeTo, PCWSTR Path, PRTL_QUERY_REGISTRY_TABLE QueryTable, PVOID Context, PVOID Environment);
[RtlQuerySecurityObject]
1=PSECURITY_DESCRIPTOR ObjectDescriptor
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR ResultantDescriptor
4=ULONG DescriptorLength
5=PULONG ReturnLength
ParamCount=5
@=RtlQuerySecurityObject(PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, ULONG DescriptorLength, PULONG ReturnLength);
[RtlQueryTagHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=USHORT TagIndex
4=BOOLEAN ResetCounters
5=PRTL_HEAP_TAG_INFO TagInfo
ParamCount=5
@=RtlQueryTagHeap(PVOID HeapHandle, ULONG Flags, USHORT TagIndex, BOOLEAN ResetCounters, PRTL_HEAP_TAG_INFO TagInfo);
[RtlQueryTimeZoneInformation]
1=PRTL_TIME_ZONE_INFORMATION TimeZoneInformation
ParamCount=1
@=RtlQueryTimeZoneInformation(PRTL_TIME_ZONE_INFORMATION TimeZoneInformation);
[RtlQueueApcWow64Thread]
1=HANDLE ThreadHandle
2=PPS_APC_ROUTINE ApcRoutine
3=PVOID ApcArgument1
4=PVOID ApcArgument2
5=PVOID ApcArgument3
ParamCount=5
@=RtlQueueApcWow64Thread(HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
[RtlQueueWorkItem]
1=WORKERCALLBACKFUNC Function
2=PVOID Context
3=ULONG Flags
ParamCount=3
@=RtlQueueWorkItem(WORKERCALLBACKFUNC Function, PVOID Context, ULONG Flags);
[RtlRaiseException]
1=PEXCEPTION_RECORD ExceptionRecord
ParamCount=1
@=RtlRaiseException(PEXCEPTION_RECORD ExceptionRecord);
[RtlRaiseStatus]
1=NTSTATUS Status
ParamCount=1
@=RtlRaiseStatus(NTSTATUS Status);
[RtlRandom]
1=PULONG Seed
ParamCount=1
@=RtlRandom(PULONG Seed);
[RtlRandomEx]
1=PULONG Seed
ParamCount=1
@=RtlRandomEx(PULONG Seed);
[RtlReadMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=PVOID Buffer
3=ULONG BytesToRead
4=ULONG* BytesRead
ParamCount=4
@=RtlReadMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, PVOID Buffer, ULONG BytesToRead, ULONG* BytesRead);
[RtlReadOutOfProcessMemoryStream]
1=PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=PVOID Buffer
3=ULONG BytesToRead
4=ULONG* BytesRead
ParamCount=4
@=RtlReadOutOfProcessMemoryStream(PRTL_OUT_OF_PROCESS_MEMORY_STREAM_WITH_VTABLE MemoryStream, PVOID Buffer, ULONG BytesToRead, ULONG* BytesRead);
[RtlReAllocateHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
4=SIZE_T Size
ParamCount=4
@=RtlReAllocateHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress, SIZE_T Size);
[RtlRealPredecessor]
1=PRTL_SPLAY_LINKS Links
ParamCount=1
@=RtlRealPredecessor(PRTL_SPLAY_LINKS Links);
[RtlRealSuccessor]
1=PRTL_SPLAY_LINKS Links
ParamCount=1
@=RtlRealSuccessor(PRTL_SPLAY_LINKS Links);
[RtlRegisterSecureMemoryCacheCallback]
1=PRTL_SECURE_MEMORY_CACHE_CALLBACK CallBack
ParamCount=1
@=RtlRegisterSecureMemoryCacheCallback(PRTL_SECURE_MEMORY_CACHE_CALLBACK CallBack);
[RtlRegisterWait]
1=PHANDLE WaitHandle
2=HANDLE Handle
3=WAITORTIMERCALLBACKFUNC Function
4=PVOID Context
5=ULONG Milliseconds
6=ULONG Flags
ParamCount=6
@=RtlRegisterWait(PHANDLE WaitHandle, HANDLE Handle, WAITORTIMERCALLBACKFUNC Function, PVOID Context, ULONG Milliseconds, ULONG Flags);
[RtlReleaseActivationContext]
1=PACTIVATION_CONTEXT AppCtx
ParamCount=1
@=RtlReleaseActivationContext(PACTIVATION_CONTEXT AppCtx);
[RtlReleaseMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
ParamCount=1
@=RtlReleaseMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream);
[RtlReleasePebLock]
ParamCount=0
@=RtlReleasePebLock();
[RtlReleasePrivilege]
1=PVOID StatePointer
ParamCount=1
@=RtlReleasePrivilege(PVOID StatePointer);
[RtlReleaseRelativeName]
1=PRTL_RELATIVE_NAME_U RelativeName
ParamCount=1
@=RtlReleaseRelativeName(PRTL_RELATIVE_NAME_U RelativeName);
[RtlReleaseResource]
1=PRTL_RESOURCE Resource
ParamCount=1
@=RtlReleaseResource(PRTL_RESOURCE Resource);
[RtlReleaseSRWLockExclusive]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlReleaseSRWLockExclusive(PRTL_SRWLOCK SRWLock);
[RtlReleaseSRWLockShared]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlReleaseSRWLockShared(PRTL_SRWLOCK SRWLock);
[RtlRemoteCall]
1=HANDLE Process
2=HANDLE Thread
3=PVOID CallSite
4=ULONG ArgumentCount
5=PULONG_PTR Arguments
6=BOOLEAN PassContext
7=BOOLEAN AlreadySuspended
ParamCount=7
@=RtlRemoteCall(HANDLE Process, HANDLE Thread, PVOID CallSite, ULONG ArgumentCount, PULONG_PTR Arguments, BOOLEAN PassContext, BOOLEAN AlreadySuspended);
[RtlRemoveVectoredContinueHandler]
1=PVOID Handle
ParamCount=1
@=RtlRemoveVectoredContinueHandler(PVOID Handle);
[RtlRemoveVectoredExceptionHandler]
1=PVOID Handle
ParamCount=1
@=RtlRemoveVectoredExceptionHandler(PVOID Handle);
[RtlResetRtlTranslations]
1=PNLSTABLEINFO TableInfo
ParamCount=1
@=RtlResetRtlTranslations(PNLSTABLEINFO TableInfo);
[RtlRestoreContext]
1=PCONTEXT ContextRecord
2=PEXCEPTION_RECORD ExceptionRecord
ParamCount=2
@=RtlRestoreContext(PCONTEXT ContextRecord, PEXCEPTION_RECORD ExceptionRecord);
[RtlRestoreLastWin32Error]
1=LONG Win32Error
ParamCount=1
@=RtlRestoreLastWin32Error(LONG Win32Error);
[RtlRevertMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
ParamCount=1
@=RtlRevertMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream);
[RtlRunDecodeUnicodeString]
1=UCHAR Seed
2=PUNICODE_STRING String
ParamCount=2
@=RtlRunDecodeUnicodeString(UCHAR Seed, PUNICODE_STRING String);
[RtlRunEncodeUnicodeString]
1=PUCHAR Seed
2=PUNICODE_STRING String
ParamCount=2
@=RtlRunEncodeUnicodeString(PUCHAR Seed, PUNICODE_STRING String);
[RtlSecondsSince1970ToTime]
1=ULONG ElapsedSeconds
2=PLARGE_INTEGER Time
ParamCount=2
@=RtlSecondsSince1970ToTime(ULONG ElapsedSeconds, PLARGE_INTEGER Time);
[RtlSecondsSince1980ToTime]
1=ULONG ElapsedSeconds
2=PLARGE_INTEGER Time
ParamCount=2
@=RtlSecondsSince1980ToTime(ULONG ElapsedSeconds, PLARGE_INTEGER Time);
[RtlSeekMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=LARGE_INTEGER Distance
3=ULONG Origin
4=ULARGE_INTEGER* NewPosition
ParamCount=4
@=RtlSeekMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, LARGE_INTEGER Distance, ULONG Origin, ULARGE_INTEGER* NewPosition);
[RtlSelfRelativeToAbsoluteSD]
1=PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor
2=PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor
3=PULONG AbsoluteSecurityDescriptorSize
4=PACL Dacl
5=PULONG DaclSize
6=PACL Sacl
7=PULONG SaclSize
8=PSID Owner
9=PULONG OwnerSize
10=PSID PrimaryGroup
11=PULONG PrimaryGroupSize
ParamCount=11
@=RtlSelfRelativeToAbsoluteSD(PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor, PULONG AbsoluteSecurityDescriptorSize, PACL Dacl, PULONG DaclSize, PACL Sacl, PULONG SaclSize, PSID Owner, PULONG OwnerSize, PSID PrimaryGroup, PULONG PrimaryGroupSize);
[RtlSelfRelativeToAbsoluteSD2]
1=PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor
2=PULONG pBufferSize
ParamCount=2
@=RtlSelfRelativeToAbsoluteSD2(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PULONG pBufferSize);
[RtlSetAllBits]
1=PRTL_BITMAP BitMapHeader
ParamCount=1
@=RtlSetAllBits(PRTL_BITMAP BitMapHeader);
[RtlSetAttributesSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=SECURITY_DESCRIPTOR_CONTROL Control
3=PULONG Revision
ParamCount=3
@=RtlSetAttributesSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL Control, PULONG Revision);
[RtlSetBit]
1=PRTL_BITMAP BitMapHeader
2=ULONG BitNumber
ParamCount=2
@=RtlSetBit(PRTL_BITMAP BitMapHeader, ULONG BitNumber);
[RtlSetBits]
1=PRTL_BITMAP BitMapHeader
2=ULONG StartingIndex
3=ULONG NumberToSet
ParamCount=3
@=RtlSetBits(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG NumberToSet);
[RtlSetControlSecurityDescriptor]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest
3=SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
ParamCount=3
@=RtlSetControlSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
[RtlSetCriticalSectionSpinCount]
1=PRTL_CRITICAL_SECTION CriticalSection
2=ULONG SpinCount
ParamCount=2
@=RtlSetCriticalSectionSpinCount(PRTL_CRITICAL_SECTION CriticalSection, ULONG SpinCount);
[RtlSetCurrentDirectory_U]
1=PCUNICODE_STRING PathName
ParamCount=1
@=RtlSetCurrentDirectory_U(PCUNICODE_STRING PathName);
[RtlSetCurrentEnvironment]
1=PVOID Environment
2=PVOID *PreviousEnvironment
ParamCount=2
@=RtlSetCurrentEnvironment(PVOID Environment, PVOID *PreviousEnvironment);
[RtlSetDaclSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=BOOLEAN DaclPresent
3=PACL Dacl
4=BOOLEAN DaclDefaulted
ParamCount=4
@=RtlSetDaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, BOOLEAN DaclPresent, PACL Dacl, BOOLEAN DaclDefaulted);
[RtlSetEnvironmentStrings]
1=PWCHAR NewEnvironment
2=SIZE_T NewEnvironmentSize
ParamCount=2
@=RtlSetEnvironmentStrings(PWCHAR NewEnvironment, SIZE_T NewEnvironmentSize);
[RtlSetEnvironmentVar]
1=PWSTR *Environment
2=PWSTR Name
3=SIZE_T NameLength
4=PWSTR Value
5=SIZE_T ValueLength
ParamCount=5
@=RtlSetEnvironmentVar(PWSTR *Environment, PWSTR Name, SIZE_T NameLength, PWSTR Value, SIZE_T ValueLength);
[RtlSetEnvironmentVariable]
1=PVOID *Environment
2=PCUNICODE_STRING Name
3=PCUNICODE_STRING Value
ParamCount=3
@=RtlSetEnvironmentVariable(PVOID *Environment, PCUNICODE_STRING Name, PCUNICODE_STRING Value);
[RtlSetGroupSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID Group
3=BOOLEAN GroupDefaulted
ParamCount=3
@=RtlSetGroupSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID Group, BOOLEAN GroupDefaulted);
[RtlSetHeapInformation]
1=PVOID HeapHandle
2=HEAP_INFORMATION_CLASS HeapInformationClass
3=PVOID HeapInformation
4=SIZE_T HeapInformationLength
ParamCount=4
@=RtlSetHeapInformation(PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
[RtlSetInformationAcl]
1=PACL Acl
2=PVOID AclInformation
3=ULONG AclInformationLength
4=ACL_INFORMATION_CLASS AclInformationClass
ParamCount=4
@=RtlSetInformationAcl(PACL Acl, PVOID AclInformation, ULONG AclInformationLength, ACL_INFORMATION_CLASS AclInformationClass);
[RtlSetIoCompletionCallback]
1=HANDLE FileHandle
2=APC_CALLBACK_FUNCTION CompletionProc
3=ULONG Flags
ParamCount=3
@=RtlSetIoCompletionCallback(HANDLE FileHandle, APC_CALLBACK_FUNCTION CompletionProc, ULONG Flags);
[RtlSetLastWin32Error]
1=LONG Win32Error
ParamCount=1
@=RtlSetLastWin32Error(LONG Win32Error);
[RtlSetLastWin32ErrorAndNtStatusFromNtStatus]
1=NTSTATUS Status
ParamCount=1
@=RtlSetLastWin32ErrorAndNtStatusFromNtStatus(NTSTATUS Status);
[RtlSetMemoryStreamSize]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=ULARGE_INTEGER NewSize
ParamCount=2
@=RtlSetMemoryStreamSize(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, ULARGE_INTEGER NewSize);
[RtlSetOwnerSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID Owner
3=BOOLEAN OwnerDefaulted
ParamCount=3
@=RtlSetOwnerSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID Owner, BOOLEAN OwnerDefaulted);
[RtlSetProcessIsCritical]
1=BOOLEAN NewValue
2=PBOOLEAN OldValue
3=BOOLEAN CheckFlag
ParamCount=3
@=RtlSetProcessIsCritical(BOOLEAN NewValue, PBOOLEAN OldValue, BOOLEAN CheckFlag);
[RtlSetSaclSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=BOOLEAN SaclPresent
3=PACL Sacl
4=BOOLEAN SaclDefaulted
ParamCount=4
@=RtlSetSaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, BOOLEAN SaclPresent, PACL Sacl, BOOLEAN SaclDefaulted);
[RtlSetSecurityDescriptorRMControl]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PUCHAR RMControl
ParamCount=2
@=RtlSetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
[RtlSetSecurityObject]
1=SECURITY_INFORMATION SecurityInformation
2=PSECURITY_DESCRIPTOR ModificationDescriptor
3=PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor
4=PGENERIC_MAPPING GenericMapping
5=HANDLE Token
ParamCount=5
@=RtlSetSecurityObject(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
[RtlSetSecurityObjectEx]
1=SECURITY_INFORMATION SecurityInformation
2=PSECURITY_DESCRIPTOR ModificationDescriptor
3=PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor
4=ULONG AutoInheritFlags
5=PGENERIC_MAPPING GenericMapping
6=HANDLE Token
ParamCount=6
@=RtlSetSecurityObjectEx(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);
[RtlSetThreadErrorMode]
1=ULONG NewMode
2=PULONG OldMode
ParamCount=2
@=RtlSetThreadErrorMode(ULONG NewMode, PULONG OldMode);
[RtlSetThreadIsCritical]
1=BOOLEAN NewValue
2=PBOOLEAN OldValue
3=BOOLEAN CheckFlag
ParamCount=3
@=RtlSetThreadIsCritical(BOOLEAN NewValue, PBOOLEAN OldValue, BOOLEAN CheckFlag);
[RtlSetThreadPoolStartFunc]
1=PRTLP_START_THREAD StartFunc
2=PRTLP_EXIT_THREAD ExitFunc
ParamCount=2
@=RtlSetThreadPoolStartFunc(PRTLP_START_THREAD StartFunc, PRTLP_EXIT_THREAD ExitFunc);
[RtlSetTimer]
1=HANDLE TimerQueueHandle
2=HANDLE *Handle
3=WAITORTIMERCALLBACKFUNC Function
4=PVOID Context
5=ULONG DueTime
6=ULONG Period
7=ULONG Flags
ParamCount=7
@=RtlSetTimer(HANDLE TimerQueueHandle, HANDLE *Handle, WAITORTIMERCALLBACKFUNC Function, PVOID Context, ULONG DueTime, ULONG Period, ULONG Flags);
[RtlSetTimeZoneInformation]
1=PRTL_TIME_ZONE_INFORMATION TimeZoneInformation
ParamCount=1
@=RtlSetTimeZoneInformation(PRTL_TIME_ZONE_INFORMATION TimeZoneInformation);
[RtlSetUnhandledExceptionFilter]
1=PRTLP_UNHANDLED_EXCEPTION_FILTER UnhandledExceptionFilter
ParamCount=1
@=RtlSetUnhandledExceptionFilter(PRTLP_UNHANDLED_EXCEPTION_FILTER UnhandledExceptionFilter);
[RtlSetUserFlagsHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
4=ULONG UserFlagsReset
5=ULONG UserFlagsSet
ParamCount=5
@=RtlSetUserFlagsHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress, ULONG UserFlagsReset, ULONG UserFlagsSet);
[RtlSetUserValueHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
4=PVOID UserValue
ParamCount=4
@=RtlSetUserValueHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress, PVOID UserValue);
[RtlSizeHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
ParamCount=3
@=RtlSizeHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress);
[RtlSleepConditionVariableCS]
1=PRTL_CONDITION_VARIABLE ConditionVariable
2=PRTL_CRITICAL_SECTION CriticalSection
3=PLARGE_INTEGER Timeout
ParamCount=3
@=RtlSleepConditionVariableCS(PRTL_CONDITION_VARIABLE ConditionVariable, PRTL_CRITICAL_SECTION CriticalSection, PLARGE_INTEGER Timeout);
[RtlSleepConditionVariableSRW]
1=PRTL_CONDITION_VARIABLE ConditionVariable
2=PRTL_SRWLOCK SRWLock
3=PLARGE_INTEGER Timeout
4=ULONG Flags
ParamCount=4
@=RtlSleepConditionVariableSRW(PRTL_CONDITION_VARIABLE ConditionVariable, PRTL_SRWLOCK SRWLock, PLARGE_INTEGER Timeout, ULONG Flags);
[RtlSplay]
1=PRTL_SPLAY_LINKS Links
ParamCount=1
@=RtlSplay(PRTL_SPLAY_LINKS Links);
[RtlStartRXact]
1=PRTL_RXACT_CONTEXT RXactContext
ParamCount=1
@=RtlStartRXact(PRTL_RXACT_CONTEXT RXactContext);
[RtlStatMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=STATSTG* StatusInformation
3=ULONG Flags
ParamCount=3
@=RtlStatMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, STATSTG* StatusInformation, ULONG Flags);
[RtlStringFromGUID]
1=REFGUID Guid
2=PUNICODE_STRING GuidString
ParamCount=2
@=RtlStringFromGUID(REFGUID Guid, PUNICODE_STRING GuidString);
[RtlSubAuthorityCountSid]
1=PSID Sid
ParamCount=1
@=RtlSubAuthorityCountSid(PSID Sid);
[RtlSubAuthoritySid]
1=PSID Sid
2=ULONG SubAuthority
ParamCount=2
@=RtlSubAuthoritySid(PSID Sid, ULONG SubAuthority);
[RtlSubtreePredecessor]
1=PRTL_SPLAY_LINKS Links
ParamCount=1
@=RtlSubtreePredecessor(PRTL_SPLAY_LINKS Links);
[RtlSubtreeSuccessor]
1=PRTL_SPLAY_LINKS Links
ParamCount=1
@=RtlSubtreeSuccessor(PRTL_SPLAY_LINKS Links);
[RtlSystemTimeToLocalTime]
1=PLARGE_INTEGER SystemTime
2=PLARGE_INTEGER LocalTime
ParamCount=2
@=RtlSystemTimeToLocalTime(PLARGE_INTEGER SystemTime, PLARGE_INTEGER LocalTime);
[RtlTestBit]
1=PRTL_BITMAP BitMapHeader
2=ULONG BitNumber
ParamCount=2
@=RtlTestBit(PRTL_BITMAP BitMapHeader, ULONG BitNumber);
[RtlTimeFieldsToTime]
1=PTIME_FIELDS TimeFields
2=PLARGE_INTEGER Time
ParamCount=2
@=RtlTimeFieldsToTime(PTIME_FIELDS TimeFields, PLARGE_INTEGER Time);
[RtlTimeToElapsedTimeFields]
1=PLARGE_INTEGER Time
2=PTIME_FIELDS TimeFields
ParamCount=2
@=RtlTimeToElapsedTimeFields(PLARGE_INTEGER Time, PTIME_FIELDS TimeFields);
[RtlTimeToSecondsSince1970]
1=PLARGE_INTEGER Time
2=PULONG ElapsedSeconds
ParamCount=2
@=RtlTimeToSecondsSince1970(PLARGE_INTEGER Time, PULONG ElapsedSeconds);
[RtlTimeToSecondsSince1980]
1=PLARGE_INTEGER Time
2=PULONG ElapsedSeconds
ParamCount=2
@=RtlTimeToSecondsSince1980(PLARGE_INTEGER Time, PULONG ElapsedSeconds);
[RtlTimeToTimeFields]
1=PLARGE_INTEGER Time
2=PTIME_FIELDS TimeFields
ParamCount=2
@=RtlTimeToTimeFields(PLARGE_INTEGER Time, PTIME_FIELDS TimeFields);
[RtlTraceDatabaseAdd]
1=PRTL_TRACE_DATABASE Database
2=ULONG Count
3=PVOID *Trace
4=PRTL_TRACE_BLOCK *TraceBlock
ParamCount=4
@=RtlTraceDatabaseAdd(PRTL_TRACE_DATABASE Database, ULONG Count, PVOID *Trace, PRTL_TRACE_BLOCK *TraceBlock);
[RtlTraceDatabaseCreate]
1=ULONG Buckets
2=SIZE_T MaximumSize
3=ULONG Flags
4=ULONG Tag
5=RTL_TRACE_HASH_FUNCTION HashFunction
ParamCount=5
@=RtlTraceDatabaseCreate(ULONG Buckets, SIZE_T MaximumSize, ULONG Flags, ULONG Tag, RTL_TRACE_HASH_FUNCTION HashFunction);
[RtlTraceDatabaseDestroy]
1=PRTL_TRACE_DATABASE Database
ParamCount=1
@=RtlTraceDatabaseDestroy(PRTL_TRACE_DATABASE Database);
[RtlTraceDatabaseEnumerate]
1=PRTL_TRACE_DATABASE Database
2=PRTL_TRACE_ENUMERATE Enumerate
3=PRTL_TRACE_BLOCK *TraceBlock
ParamCount=3
@=RtlTraceDatabaseEnumerate(PRTL_TRACE_DATABASE Database, PRTL_TRACE_ENUMERATE Enumerate, PRTL_TRACE_BLOCK *TraceBlock);
[RtlTraceDatabaseFind]
1=PRTL_TRACE_DATABASE Database
2=ULONG Count
3=PVOID *Trace
4=PRTL_TRACE_BLOCK *TraceBlock
ParamCount=4
@=RtlTraceDatabaseFind(PRTL_TRACE_DATABASE Database, ULONG Count, PVOID *Trace, PRTL_TRACE_BLOCK *TraceBlock);
[RtlTraceDatabaseLock]
1=PRTL_TRACE_DATABASE Database
ParamCount=1
@=RtlTraceDatabaseLock(PRTL_TRACE_DATABASE Database);
[RtlTraceDatabaseUnlock]
1=PRTL_TRACE_DATABASE Database
ParamCount=1
@=RtlTraceDatabaseUnlock(PRTL_TRACE_DATABASE Database);
[RtlTraceDatabaseValidate]
1=PRTL_TRACE_DATABASE Database
ParamCount=1
@=RtlTraceDatabaseValidate(PRTL_TRACE_DATABASE Database);
[RtlTryAcquirePebLock]
ParamCount=0
@=RtlTryAcquirePebLock();
[RtlTryAcquireSRWLockExclusive]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlTryAcquireSRWLockExclusive(PRTL_SRWLOCK SRWLock);
[RtlTryAcquireSRWLockShared]
1=PRTL_SRWLOCK SRWLock
ParamCount=1
@=RtlTryAcquireSRWLockShared(PRTL_SRWLOCK SRWLock);
[RtlTryEnterCriticalSection]
1=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=1
@=RtlTryEnterCriticalSection(PRTL_CRITICAL_SECTION CriticalSection);
[RtlUnhandledExceptionFilter]
1=_EXCEPTION_POINTERS *ExceptionInfo
ParamCount=1
@=RtlUnhandledExceptionFilter(_EXCEPTION_POINTERS *ExceptionInfo);
[RtlUnhandledExceptionFilter2]
1=_EXCEPTION_POINTERS *ExceptionInfo
2=PCSTR Function
ParamCount=2
@=RtlUnhandledExceptionFilter2(_EXCEPTION_POINTERS *ExceptionInfo, PCSTR Function);
[RtlUnicodeStringToAnsiString]
1=PANSI_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUnicodeStringToAnsiString(PANSI_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUnicodeStringToCountedOemString]
1=POEM_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUnicodeStringToCountedOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUnicodeStringToInteger]
1=PCUNICODE_STRING String
2=ULONG Base
3=PULONG Value
ParamCount=3
@=RtlUnicodeStringToInteger(PCUNICODE_STRING String, ULONG Base, PULONG Value);
[RtlUnicodeStringToOemString]
1=POEM_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUnicodeStringToOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUnicodeToCustomCPN]
1=PCPTABLEINFO CustomCP
2=PCH CustomCPString
3=ULONG MaxBytesInCustomCPString
4=PULONG BytesInCustomCPString
5=PWCH UnicodeString
6=ULONG BytesInUnicodeString
ParamCount=6
@=RtlUnicodeToCustomCPN(PCPTABLEINFO CustomCP, PCH CustomCPString, ULONG MaxBytesInCustomCPString, PULONG BytesInCustomCPString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUnicodeToMultiByteN]
1=PCHAR MultiByteString
2=ULONG MaxBytesInMultiByteString
3=PULONG BytesInMultiByteString
4=PWCH UnicodeString
5=ULONG BytesInUnicodeString
ParamCount=5
@=RtlUnicodeToMultiByteN(PCHAR MultiByteString, ULONG MaxBytesInMultiByteString, PULONG BytesInMultiByteString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUnicodeToMultiByteSize]
1=PULONG BytesInMultiByteString
2=PWCH UnicodeString
3=ULONG BytesInUnicodeString
ParamCount=3
@=RtlUnicodeToMultiByteSize(PULONG BytesInMultiByteString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUnicodeToOemN]
1=PCHAR OemString
2=ULONG MaxBytesInOemString
3=PULONG BytesInOemString
4=PWCH UnicodeString
5=ULONG BytesInUnicodeString
ParamCount=5
@=RtlUnicodeToOemN(PCHAR OemString, ULONG MaxBytesInOemString, PULONG BytesInOemString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUniform]
1=PULONG Seed
ParamCount=1
@=RtlUniform(PULONG Seed);
[RtlUnlockBootStatusData]
1=HANDLE BootStatusDataHandle
ParamCount=1
@=RtlUnlockBootStatusData(HANDLE BootStatusDataHandle);
[RtlUnlockHeap]
1=PVOID HeapHandle
ParamCount=1
@=RtlUnlockHeap(PVOID HeapHandle);
[RtlUnlockMemoryStreamRegion]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=ULARGE_INTEGER Offset
3=ULARGE_INTEGER NumberOfBytes
4=ULONG LockType
ParamCount=4
@=RtlUnlockMemoryStreamRegion(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, ULARGE_INTEGER Offset, ULARGE_INTEGER NumberOfBytes, ULONG LockType);
[RtlUpcaseUnicodeChar]
1=WCHAR SourceCharacter
ParamCount=1
@=RtlUpcaseUnicodeChar(WCHAR SourceCharacter);
[RtlUpcaseUnicodeString]
1=PUNICODE_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUpcaseUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUpcaseUnicodeStringToAnsiString]
1=PANSI_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUpcaseUnicodeStringToAnsiString(PANSI_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUpcaseUnicodeStringToCountedOemString]
1=POEM_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUpcaseUnicodeStringToCountedOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUpcaseUnicodeStringToOemString]
1=POEM_STRING DestinationString
2=PCUNICODE_STRING SourceString
3=BOOLEAN AllocateDestinationString
ParamCount=3
@=RtlUpcaseUnicodeStringToOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
[RtlUpcaseUnicodeToCustomCPN]
1=PCPTABLEINFO CustomCP
2=PCH CustomCPString
3=ULONG MaxBytesInCustomCPString
4=PULONG BytesInCustomCPString
5=PWCH UnicodeString
6=ULONG BytesInUnicodeString
ParamCount=6
@=RtlUpcaseUnicodeToCustomCPN(PCPTABLEINFO CustomCP, PCH CustomCPString, ULONG MaxBytesInCustomCPString, PULONG BytesInCustomCPString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUpcaseUnicodeToMultiByteN]
1=PCHAR MultiByteString
2=ULONG MaxBytesInMultiByteString
3=PULONG BytesInMultiByteString
4=PWCH UnicodeString
5=ULONG BytesInUnicodeString
ParamCount=5
@=RtlUpcaseUnicodeToMultiByteN(PCHAR MultiByteString, ULONG MaxBytesInMultiByteString, PULONG BytesInMultiByteString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUpcaseUnicodeToOemN]
1=PCHAR OemString
2=ULONG MaxBytesInOemString
3=PULONG BytesInOemString
4=PWCH UnicodeString
5=ULONG BytesInUnicodeString
ParamCount=5
@=RtlUpcaseUnicodeToOemN(PCHAR OemString, ULONG MaxBytesInOemString, PULONG BytesInOemString, PWCH UnicodeString, ULONG BytesInUnicodeString);
[RtlUpdateTimer]
1=HANDLE TimerQueueHandle
2=HANDLE TimerHandle
3=ULONG DueTime
4=ULONG Period
ParamCount=4
@=RtlUpdateTimer(HANDLE TimerQueueHandle, HANDLE TimerHandle, ULONG DueTime, ULONG Period);
[RtlUpperChar]
1=CHAR Character
ParamCount=1
@=RtlUpperChar(CHAR Character);
[RtlUpperString]
1=PSTRING DestinationString
2=STRING *SourceString
ParamCount=2
@=RtlUpperString(PSTRING DestinationString, STRING *SourceString);
[RtlValidAcl]
1=PACL Acl
ParamCount=1
@=RtlValidAcl(PACL Acl);
[RtlValidateHeap]
1=PVOID HeapHandle
2=ULONG Flags
3=PVOID BaseAddress
ParamCount=3
@=RtlValidateHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress);
[RtlValidateProcessHeaps]
ParamCount=0
@=RtlValidateProcessHeaps();
[RtlValidateUnicodeString]
1=ULONG Flags
2=UNICODE_STRING *String
ParamCount=2
@=RtlValidateUnicodeString(ULONG Flags, UNICODE_STRING *String);
[RtlValidRelativeSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptorInput
2=ULONG SecurityDescriptorLength
3=SECURITY_INFORMATION RequiredInformation
ParamCount=3
@=RtlValidRelativeSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptorInput, ULONG SecurityDescriptorLength, SECURITY_INFORMATION RequiredInformation);
[RtlValidSecurityDescriptor]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=1
@=RtlValidSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor);
[RtlValidSid]
1=PSID Sid
ParamCount=1
@=RtlValidSid(PSID Sid);
[RtlVerifyVersionInfo]
1=PRTL_OSVERSIONINFOEXW VersionInfo
2=ULONG TypeMask
3=ULONGLONG ConditionMask
ParamCount=3
@=RtlVerifyVersionInfo(PRTL_OSVERSIONINFOEXW VersionInfo, ULONG TypeMask, ULONGLONG ConditionMask);
[RtlWakeAllConditionVariable]
1=PRTL_CONDITION_VARIABLE ConditionVariable
ParamCount=1
@=RtlWakeAllConditionVariable(PRTL_CONDITION_VARIABLE ConditionVariable);
[RtlWakeConditionVariable]
1=PRTL_CONDITION_VARIABLE ConditionVariable
ParamCount=1
@=RtlWakeConditionVariable(PRTL_CONDITION_VARIABLE ConditionVariable);
[RtlWalkFrameChain]
1=PVOID *Callers
2=ULONG Count
3=ULONG Flags
ParamCount=3
@=RtlWalkFrameChain(PVOID *Callers, ULONG Count, ULONG Flags);
[RtlWalkHeap]
1=PVOID HeapHandle
2=PRTL_HEAP_WALK_ENTRY Entry
ParamCount=2
@=RtlWalkHeap(PVOID HeapHandle, PRTL_HEAP_WALK_ENTRY Entry);
[RtlWow64EnableFsRedirection]
1=BOOLEAN Wow64FsEnableRedirection
ParamCount=1
@=RtlWow64EnableFsRedirection(BOOLEAN Wow64FsEnableRedirection);
[RtlWow64EnableFsRedirectionEx]
1=PVOID Wow64FsEnableRedirection
2=PVOID *OldFsRedirectionLevel
ParamCount=2
@=RtlWow64EnableFsRedirectionEx(PVOID Wow64FsEnableRedirection, PVOID *OldFsRedirectionLevel);
[RtlWriteMemoryStream]
1=PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream
2=VOID* Buffer
3=ULONG BytesToWrite
4=ULONG* BytesWritten
ParamCount=4
@=RtlWriteMemoryStream(PRTL_MEMORY_STREAM_WITH_VTABLE MemoryStream, VOID* Buffer, ULONG BytesToWrite, ULONG* BytesWritten);
[RtlWriteRegistryValue]
1=ULONG RelativeTo
2=PCWSTR Path
3=PCWSTR ValueName
4=ULONG ValueType
5=PVOID ValueData
6=ULONG ValueLength
ParamCount=6
@=RtlWriteRegistryValue(ULONG RelativeTo, PCWSTR Path, PCWSTR ValueName, ULONG ValueType, PVOID ValueData, ULONG ValueLength);
[RtlxAnsiStringToUnicodeSize]
1=PCANSI_STRING AnsiString
ParamCount=1
@=RtlxAnsiStringToUnicodeSize(PCANSI_STRING AnsiString);
[RtlxOemStringToUnicodeSize]
1=PCOEM_STRING OemString
ParamCount=1
@=RtlxOemStringToUnicodeSize(PCOEM_STRING OemString);
[RtlxUnicodeStringToAnsiSize]
1=PCUNICODE_STRING UnicodeString
ParamCount=1
@=RtlxUnicodeStringToAnsiSize(PCUNICODE_STRING UnicodeString);
[RtlxUnicodeStringToOemSize]
1=PCUNICODE_STRING UnicodeString
ParamCount=1
@=RtlxUnicodeStringToOemSize(PCUNICODE_STRING UnicodeString);
[RtlZeroHeap]
1=PVOID HeapHandle
2=ULONG Flags
ParamCount=2
@=RtlZeroHeap(PVOID HeapHandle, ULONG Flags);
[RtlZombifyActivationContext]
1=PACTIVATION_CONTEXT ActivationContext
ParamCount=1
@=RtlZombifyActivationContext(PACTIVATION_CONTEXT ActivationContext);
[sprintf]
1=char *Dest
2=char *Format
3=...
ParamCount=3
@=sprintf(char *Dest, char *Format, ...);
[swprintf]
1=wchar_t *Dest
2=wchar_t *Format
3=...
ParamCount=3
@=swprintf(wchar_t *Dest, wchar_t *Format, ...);
[TpAllocAlpcCompletion]
1=PTP_ALPC *AlpcReturn
2=HANDLE AlpcPort
3=PTP_ALPC_CALLBACK Callback
4=PVOID Context
5=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=5
@=TpAllocAlpcCompletion(PTP_ALPC *AlpcReturn, HANDLE AlpcPort, PTP_ALPC_CALLBACK Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpAllocAlpcCompletionEx]
1=PTP_ALPC *AlpcReturn
2=HANDLE AlpcPort
3=PTP_ALPC_CALLBACK_EX Callback
4=PVOID Context
5=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=5
@=TpAllocAlpcCompletionEx(PTP_ALPC *AlpcReturn, HANDLE AlpcPort, PTP_ALPC_CALLBACK_EX Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpAllocCleanupGroup]
1=PTP_CLEANUP_GROUP *CleanupGroupReturn
ParamCount=1
@=TpAllocCleanupGroup(PTP_CLEANUP_GROUP *CleanupGroupReturn);
[TpAllocIoCompletion]
1=PTP_IO *IoReturn
2=HANDLE File
3=PTP_IO_CALLBACK Callback
4=PVOID Context
5=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=5
@=TpAllocIoCompletion(PTP_IO *IoReturn, HANDLE File, PTP_IO_CALLBACK Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpAllocPool]
1=PTP_POOL *PoolReturn
2=PVOID Reserved
ParamCount=2
@=TpAllocPool(PTP_POOL *PoolReturn, PVOID Reserved);
[TpAllocTimer]
1=PTP_TIMER *Timer
2=PTP_TIMER_CALLBACK Callback
3=PVOID Context
4=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=4
@=TpAllocTimer(PTP_TIMER *Timer, PTP_TIMER_CALLBACK Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpAllocWait]
1=PTP_WAIT *WaitReturn
2=PTP_WAIT_CALLBACK Callback
3=PVOID Context
4=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=4
@=TpAllocWait(PTP_WAIT *WaitReturn, PTP_WAIT_CALLBACK Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpAllocWork]
1=PTP_WORK *WorkReturn
2=PTP_WORK_CALLBACK Callback
3=PVOID Context
4=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=4
@=TpAllocWork(PTP_WORK *WorkReturn, PTP_WORK_CALLBACK Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpCallbackLeaveCriticalSectionOnCompletion]
1=PTP_CALLBACK_INSTANCE Instance
2=PRTL_CRITICAL_SECTION CriticalSection
ParamCount=2
@=TpCallbackLeaveCriticalSectionOnCompletion(PTP_CALLBACK_INSTANCE Instance, PRTL_CRITICAL_SECTION CriticalSection);
[TpCallbackMayRunLong]
1=PTP_CALLBACK_INSTANCE Instance
ParamCount=1
@=TpCallbackMayRunLong(PTP_CALLBACK_INSTANCE Instance);
[TpCallbackReleaseMutexOnCompletion]
1=PTP_CALLBACK_INSTANCE Instance
2=HANDLE Mutex
ParamCount=2
@=TpCallbackReleaseMutexOnCompletion(PTP_CALLBACK_INSTANCE Instance, HANDLE Mutex);
[TpCallbackReleaseSemaphoreOnCompletion]
1=PTP_CALLBACK_INSTANCE Instance
2=HANDLE Semaphore
3=LONG ReleaseCount
ParamCount=3
@=TpCallbackReleaseSemaphoreOnCompletion(PTP_CALLBACK_INSTANCE Instance, HANDLE Semaphore, LONG ReleaseCount);
[TpCallbackSetEventOnCompletion]
1=PTP_CALLBACK_INSTANCE Instance
2=HANDLE Event
ParamCount=2
@=TpCallbackSetEventOnCompletion(PTP_CALLBACK_INSTANCE Instance, HANDLE Event);
[TpCallbackUnloadDllOnCompletion]
1=PTP_CALLBACK_INSTANCE Instance
2=PVOID DllHandle
ParamCount=2
@=TpCallbackUnloadDllOnCompletion(PTP_CALLBACK_INSTANCE Instance, PVOID DllHandle);
[TpCancelAsyncIoOperation]
1=PTP_IO Io
ParamCount=1
@=TpCancelAsyncIoOperation(PTP_IO Io);
[TpCaptureCaller]
1=TP_TRACE_TYPE Type
ParamCount=1
@=TpCaptureCaller(TP_TRACE_TYPE Type);
[TpCheckTerminateWorker]
1=HANDLE Thread
ParamCount=1
@=TpCheckTerminateWorker(HANDLE Thread);
[TpDisassociateCallback]
1=PTP_CALLBACK_INSTANCE Instance
ParamCount=1
@=TpDisassociateCallback(PTP_CALLBACK_INSTANCE Instance);
[TpIsTimerSet]
1=PTP_TIMER Timer
ParamCount=1
@=TpIsTimerSet(PTP_TIMER Timer);
[TpPostWork]
1=PTP_WORK Work
ParamCount=1
@=TpPostWork(PTP_WORK Work);
[TpQueryPoolStackInformation]
1=PTP_POOL Pool
2=PTP_POOL_STACK_INFORMATION PoolStackInformation
ParamCount=2
@=TpQueryPoolStackInformation(PTP_POOL Pool, PTP_POOL_STACK_INFORMATION PoolStackInformation);
[TpReleaseAlpcCompletion]
1=PTP_ALPC Alpc
ParamCount=1
@=TpReleaseAlpcCompletion(PTP_ALPC Alpc);
[TpReleaseCleanupGroup]
1=PTP_CLEANUP_GROUP CleanupGroup
ParamCount=1
@=TpReleaseCleanupGroup(PTP_CLEANUP_GROUP CleanupGroup);
[TpReleaseCleanupGroupMembers]
1=PTP_CLEANUP_GROUP CleanupGroup
2=LOGICAL CancelPendingCallbacks
3=PVOID CleanupParameter
ParamCount=3
@=TpReleaseCleanupGroupMembers(PTP_CLEANUP_GROUP CleanupGroup, LOGICAL CancelPendingCallbacks, PVOID CleanupParameter);
[TpReleaseIoCompletion]
1=PTP_IO Io
ParamCount=1
@=TpReleaseIoCompletion(PTP_IO Io);
[TpReleasePool]
1=PTP_POOL Pool
ParamCount=1
@=TpReleasePool(PTP_POOL Pool);
[TpReleaseTimer]
1=PTP_TIMER Timer
ParamCount=1
@=TpReleaseTimer(PTP_TIMER Timer);
[TpReleaseWait]
1=PTP_WAIT Wait
ParamCount=1
@=TpReleaseWait(PTP_WAIT Wait);
[TpReleaseWork]
1=PTP_WORK Work
ParamCount=1
@=TpReleaseWork(PTP_WORK Work);
[TpSetPoolMaxThreads]
1=PTP_POOL Pool
2=LONG MaxThreads
ParamCount=2
@=TpSetPoolMaxThreads(PTP_POOL Pool, LONG MaxThreads);
[TpSetPoolMinThreads]
1=PTP_POOL Pool
2=LONG MinThreads
ParamCount=2
@=TpSetPoolMinThreads(PTP_POOL Pool, LONG MinThreads);
[TpSetPoolStackInformation]
1=PTP_POOL Pool
2=PTP_POOL_STACK_INFORMATION PoolStackInformation
ParamCount=2
@=TpSetPoolStackInformation(PTP_POOL Pool, PTP_POOL_STACK_INFORMATION PoolStackInformation);
[TpSetTimer]
1=PTP_TIMER Timer
2=PLARGE_INTEGER DueTime
3=LONG Period
4=LONG WindowLength
ParamCount=4
@=TpSetTimer(PTP_TIMER Timer, PLARGE_INTEGER DueTime, LONG Period, LONG WindowLength);
[TpSetWait]
1=PTP_WAIT Wait
2=HANDLE Handle
3=PLARGE_INTEGER Timeout
ParamCount=3
@=TpSetWait(PTP_WAIT Wait, HANDLE Handle, PLARGE_INTEGER Timeout);
[TpSimpleTryPost]
1=PTP_SIMPLE_CALLBACK Callback
2=PVOID Context
3=PTP_CALLBACK_ENVIRON CallbackEnviron
ParamCount=3
@=TpSimpleTryPost(PTP_SIMPLE_CALLBACK Callback, PVOID Context, PTP_CALLBACK_ENVIRON CallbackEnviron);
[TpStartAsyncIoOperation]
1=PTP_IO Io
ParamCount=1
@=TpStartAsyncIoOperation(PTP_IO Io);
[TpWaitForAlpcCompletion]
1=PTP_ALPC Alpc
ParamCount=1
@=TpWaitForAlpcCompletion(PTP_ALPC Alpc);
[TpWaitForIoCompletion]
1=PTP_IO Io
2=LOGICAL CancelPendingCallbacks
ParamCount=2
@=TpWaitForIoCompletion(PTP_IO Io, LOGICAL CancelPendingCallbacks);
[TpWaitForTimer]
1=PTP_TIMER Timer
2=LOGICAL CancelPendingCallbacks
ParamCount=2
@=TpWaitForTimer(PTP_TIMER Timer, LOGICAL CancelPendingCallbacks);
[TpWaitForWait]
1=PTP_WAIT Wait
2=LOGICAL CancelPendingCallbacks
ParamCount=2
@=TpWaitForWait(PTP_WAIT Wait, LOGICAL CancelPendingCallbacks);
[TpWaitForWork]
1=PTP_WORK Work
2=LOGICAL CancelPendingCallbacks
ParamCount=2
@=TpWaitForWork(PTP_WORK Work, LOGICAL CancelPendingCallbacks);
[vDbgPrintEx]
1=ULONG ComponentId
2=ULONG Level
3=PCH Format
4=va_list arglist
ParamCount=4
@=vDbgPrintEx(ULONG ComponentId, ULONG Level, PCH Format, va_list arglist);
[vDbgPrintExWithPrefix]
1=PCH Prefix
2=ULONG ComponentId
3=ULONG Level
4=PCH Format
5=va_list arglist
ParamCount=5
@=vDbgPrintExWithPrefix(PCH Prefix, ULONG ComponentId, ULONG Level, PCH Format, va_list arglist);
[VerSetConditionMask]
1=ULONGLONG ConditionMask
2=ULONG TypeMask
3=UCHAR Condition
ParamCount=3
@=VerSetConditionMask(ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition);
[ZwAcceptConnectPort]
1=PHANDLE PortHandle
2=PVOID PortContext
3=PPORT_MESSAGE ConnectionRequest
4=BOOLEAN AcceptConnection
5=PPORT_VIEW ServerView
6=PREMOTE_PORT_VIEW ClientView
ParamCount=6
@=ZwAcceptConnectPort(PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);
[ZwAccessCheck]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=HANDLE ClientToken
3=ACCESS_MASK DesiredAccess
4=PGENERIC_MAPPING GenericMapping
5=PPRIVILEGE_SET PrivilegeSet
6=PULONG PrivilegeSetLength
7=PACCESS_MASK GrantedAccess
8=PNTSTATUS AccessStatus
ParamCount=8
@=ZwAccessCheck(PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
[ZwAccessCheckAndAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=ACCESS_MASK DesiredAccess
7=PGENERIC_MAPPING GenericMapping
8=BOOLEAN ObjectCreation
9=PACCESS_MASK GrantedAccess
10=PNTSTATUS AccessStatus
11=PBOOLEAN GenerateOnClose
ParamCount=11
@=ZwAccessCheckAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[ZwAccessCheckByType]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID PrincipalSelfSid
3=HANDLE ClientToken
4=ACCESS_MASK DesiredAccess
5=POBJECT_TYPE_LIST ObjectTypeList
6=ULONG ObjectTypeListLength
7=PGENERIC_MAPPING GenericMapping
8=PPRIVILEGE_SET PrivilegeSet
9=PULONG PrivilegeSetLength
10=PACCESS_MASK GrantedAccess
11=PNTSTATUS AccessStatus
ParamCount=11
@=ZwAccessCheckByType(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
[ZwAccessCheckByTypeAndAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=ACCESS_MASK DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=ULONG Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=ULONG ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOLEAN ObjectCreation
14=PACCESS_MASK GrantedAccess
15=PNTSTATUS AccessStatus
16=PBOOLEAN GenerateOnClose
ParamCount=16
@=ZwAccessCheckByTypeAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[ZwAccessCheckByTypeResultList]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PSID PrincipalSelfSid
3=HANDLE ClientToken
4=ACCESS_MASK DesiredAccess
5=POBJECT_TYPE_LIST ObjectTypeList
6=ULONG ObjectTypeListLength
7=PGENERIC_MAPPING GenericMapping
8=PPRIVILEGE_SET PrivilegeSet
9=PULONG PrivilegeSetLength
10=PACCESS_MASK GrantedAccess
11=PNTSTATUS AccessStatus
ParamCount=11
@=ZwAccessCheckByTypeResultList(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
[ZwAccessCheckByTypeResultListAndAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=ACCESS_MASK DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=ULONG Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=ULONG ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOLEAN ObjectCreation
14=PACCESS_MASK GrantedAccess
15=PNTSTATUS AccessStatus
16=PBOOLEAN GenerateOnClose
ParamCount=16
@=ZwAccessCheckByTypeResultListAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[ZwAccessCheckByTypeResultListAndAuditAlarmByHandle]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=HANDLE ClientToken
4=PUNICODE_STRING ObjectTypeName
5=PUNICODE_STRING ObjectName
6=PSECURITY_DESCRIPTOR SecurityDescriptor
7=PSID PrincipalSelfSid
8=ACCESS_MASK DesiredAccess
9=AUDIT_EVENT_TYPE AuditType
10=ULONG Flags
11=POBJECT_TYPE_LIST ObjectTypeList
12=ULONG ObjectTypeListLength
13=PGENERIC_MAPPING GenericMapping
14=BOOLEAN ObjectCreation
15=PACCESS_MASK GrantedAccess
16=PNTSTATUS AccessStatus
17=PBOOLEAN GenerateOnClose
ParamCount=17
@=ZwAccessCheckByTypeResultListAndAuditAlarmByHandle(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
[ZwAddAtom]
1=PWSTR AtomName
2=ULONG Length
3=PRTL_ATOM Atom
ParamCount=3
@=ZwAddAtom(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);
[ZwAddAtomEx]
1=PWSTR AtomName
2=ULONG Length
3=PRTL_ATOM Atom
4=ULONG Flags
ParamCount=4
@=ZwAddAtomEx(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom, ULONG Flags);
[ZwAddBootEntry]
1=PBOOT_ENTRY BootEntry
2=PULONG Id
ParamCount=2
@=ZwAddBootEntry(PBOOT_ENTRY BootEntry, PULONG Id);
[ZwAddDriverEntry]
1=PEFI_DRIVER_ENTRY DriverEntry
2=PULONG Id
ParamCount=2
@=ZwAddDriverEntry(PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);
[ZwAdjustGroupsToken]
1=HANDLE TokenHandle
2=BOOLEAN ResetToDefault
3=PTOKEN_GROUPS NewState
4=ULONG BufferLength
5=PTOKEN_GROUPS PreviousState
6=PULONG ReturnLength
ParamCount=6
@=ZwAdjustGroupsToken(HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);
[ZwAdjustPrivilegesToken]
1=HANDLE TokenHandle
2=BOOLEAN DisableAllPrivileges
3=PTOKEN_PRIVILEGES NewState
4=ULONG BufferLength
5=PTOKEN_PRIVILEGES PreviousState
6=PULONG ReturnLength
ParamCount=6
@=ZwAdjustPrivilegesToken(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);
[ZwAdjustTokenClaimsAndDeviceGroups]
1=HANDLE TokenHandle
2=BOOLEAN UserResetToDefault
3=BOOLEAN DeviceResetToDefault
4=BOOLEAN DeviceGroupsResetToDefault
5=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState
6=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState
7=PTOKEN_GROUPS NewDeviceGroupsState
8=ULONG UserBufferLength
9=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState
10=ULONG DeviceBufferLength
11=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState
12=ULONG DeviceGroupsBufferLength
13=PTOKEN_GROUPS PreviousDeviceGroups
14=PULONG UserReturnLength
15=PULONG DeviceReturnLength
16=PULONG DeviceGroupsReturnBufferLength
ParamCount=16
@=ZwAdjustTokenClaimsAndDeviceGroups(HANDLE TokenHandle, BOOLEAN UserResetToDefault, BOOLEAN DeviceResetToDefault, BOOLEAN DeviceGroupsResetToDefault, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState, PTOKEN_GROUPS NewDeviceGroupsState, ULONG UserBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState, ULONG DeviceBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState, ULONG DeviceGroupsBufferLength, PTOKEN_GROUPS PreviousDeviceGroups, PULONG UserReturnLength, PULONG DeviceReturnLength, PULONG DeviceGroupsReturnBufferLength);
[ZwAlertResumeThread]
1=HANDLE ThreadHandle
2=PULONG PreviousSuspendCount
ParamCount=2
@=ZwAlertResumeThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
[ZwAlertThread]
1=HANDLE ThreadHandle
ParamCount=1
@=ZwAlertThread(HANDLE ThreadHandle);
[ZwAlertThreadByThreadId]
1=HANDLE ThreadId
ParamCount=1
@=ZwAlertThreadByThreadId(HANDLE ThreadId);
[ZwAllocateLocallyUniqueId]
1=PLUID Luid
ParamCount=1
@=ZwAllocateLocallyUniqueId(PLUID Luid);
[ZwAllocateReserveObject]
1=PHANDLE MemoryReserveHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=MEMORY_RESERVE_TYPE Type
ParamCount=3
@=ZwAllocateReserveObject(PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);
[ZwAllocateUserPhysicalPages]
1=HANDLE ProcessHandle
2=PULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=ZwAllocateUserPhysicalPages(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[ZwAllocateUuids]
1=PULARGE_INTEGER Time
2=PULONG Range
3=PULONG Sequence
4=PCHAR Seed
ParamCount=4
@=ZwAllocateUuids(PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);
[ZwAllocateVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=ULONG_PTR ZeroBits
4=PSIZE_T RegionSize
5=ULONG AllocationType
6=ULONG Protect
ParamCount=6
@=ZwAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
[ZwAlpcAcceptConnectPort]
1=PHANDLE PortHandle
2=HANDLE ConnectionPortHandle
3=ULONG Flags
4=POBJECT_ATTRIBUTES ObjectAttributes
5=PALPC_PORT_ATTRIBUTES PortAttributes
6=PVOID PortContext
7=PPORT_MESSAGE ConnectionRequest
8=PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes
9=BOOLEAN AcceptConnection
ParamCount=9
@=ZwAlpcAcceptConnectPort(PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);
[ZwAlpcCancelMessage]
1=HANDLE PortHandle
2=ULONG Flags
3=PALPC_CONTEXT_ATTR MessageContext
ParamCount=3
@=ZwAlpcCancelMessage(HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);
[ZwAlpcConnectPort]
1=PHANDLE PortHandle
2=PUNICODE_STRING PortName
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PALPC_PORT_ATTRIBUTES PortAttributes
5=ULONG Flags
6=PSID RequiredServerSid
7=PPORT_MESSAGE ConnectionMessage
8=PULONG BufferLength
9=PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes
10=PALPC_MESSAGE_ATTRIBUTES InMessageAttributes
11=PLARGE_INTEGER Timeout
ParamCount=11
@=ZwAlpcConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
[ZwAlpcConnectPortEx]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ConnectionPortObjectAttributes
3=POBJECT_ATTRIBUTES ClientPortObjectAttributes
4=PALPC_PORT_ATTRIBUTES PortAttributes
5=ULONG Flags
6=PSECURITY_DESCRIPTOR ServerSecurityRequirements
7=PPORT_MESSAGE ConnectionMessage
8=PSIZE_T BufferLength
9=PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes
10=PALPC_MESSAGE_ATTRIBUTES InMessageAttributes
11=PLARGE_INTEGER Timeout
ParamCount=11
@=ZwAlpcConnectPortEx(PHANDLE PortHandle, POBJECT_ATTRIBUTES ConnectionPortObjectAttributes, POBJECT_ATTRIBUTES ClientPortObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSECURITY_DESCRIPTOR ServerSecurityRequirements, PPORT_MESSAGE ConnectionMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
[ZwAlpcCreatePort]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=PALPC_PORT_ATTRIBUTES PortAttributes
ParamCount=3
@=ZwAlpcCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);
[ZwAlpcCreatePortSection]
1=HANDLE PortHandle
2=ULONG Flags
3=HANDLE SectionHandle
4=SIZE_T SectionSize
5=PALPC_HANDLE AlpcSectionHandle
6=PSIZE_T ActualSectionSize
ParamCount=6
@=ZwAlpcCreatePortSection(HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);
[ZwAlpcCreateResourceReserve]
1=HANDLE PortHandle
2=ULONG Flags
3=SIZE_T MessageSize
4=PALPC_HANDLE ResourceId
ParamCount=4
@=ZwAlpcCreateResourceReserve(HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);
[ZwAlpcCreateSectionView]
1=HANDLE PortHandle
2=ULONG Flags
3=PALPC_DATA_VIEW_ATTR ViewAttributes
ParamCount=3
@=ZwAlpcCreateSectionView(HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);
[ZwAlpcCreateSecurityContext]
1=HANDLE PortHandle
2=ULONG Flags
3=PALPC_SECURITY_ATTR SecurityAttribute
ParamCount=3
@=ZwAlpcCreateSecurityContext(HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);
[ZwAlpcDeletePortSection]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE SectionHandle
ParamCount=3
@=ZwAlpcDeletePortSection(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);
[ZwAlpcDeleteResourceReserve]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE ResourceId
ParamCount=3
@=ZwAlpcDeleteResourceReserve(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);
[ZwAlpcDeleteSectionView]
1=HANDLE PortHandle
2=ULONG Flags
3=PVOID ViewBase
ParamCount=3
@=ZwAlpcDeleteSectionView(HANDLE PortHandle, ULONG Flags, PVOID ViewBase);
[ZwAlpcDeleteSecurityContext]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE ContextHandle
ParamCount=3
@=ZwAlpcDeleteSecurityContext(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);
[ZwAlpcDisconnectPort]
1=HANDLE PortHandle
2=ULONG Flags
ParamCount=2
@=ZwAlpcDisconnectPort(HANDLE PortHandle, ULONG Flags);
[ZwAlpcImpersonateClientContainerOfPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=ULONG Flags
ParamCount=3
@=ZwAlpcImpersonateClientContainerOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG Flags);
[ZwAlpcImpersonateClientOfPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=PVOID Flags
ParamCount=3
@=ZwAlpcImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, PVOID Flags);
[ZwAlpcOpenSenderProcess]
1=PHANDLE ProcessHandle
2=HANDLE PortHandle
3=PPORT_MESSAGE PortMessage
4=ULONG Flags
5=ACCESS_MASK DesiredAccess
6=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=6
@=ZwAlpcOpenSenderProcess(PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwAlpcOpenSenderThread]
1=PHANDLE ThreadHandle
2=HANDLE PortHandle
3=PPORT_MESSAGE PortMessage
4=ULONG Flags
5=ACCESS_MASK DesiredAccess
6=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=6
@=ZwAlpcOpenSenderThread(PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwAlpcQueryInformation]
1=HANDLE PortHandle
2=ALPC_PORT_INFORMATION_CLASS PortInformationClass
3=PVOID PortInformation
4=ULONG Length
5=PULONG ReturnLength
ParamCount=5
@=ZwAlpcQueryInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);
[ZwAlpcQueryInformationMessage]
1=HANDLE PortHandle
2=PPORT_MESSAGE PortMessage
3=ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass
4=PVOID MessageInformation
5=ULONG Length
6=PULONG ReturnLength
ParamCount=6
@=ZwAlpcQueryInformationMessage(HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);
[ZwAlpcRevokeSecurityContext]
1=HANDLE PortHandle
2=ULONG Flags
3=ALPC_HANDLE ContextHandle
ParamCount=3
@=ZwAlpcRevokeSecurityContext(HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);
[ZwAlpcSendWaitReceivePort]
1=HANDLE PortHandle
2=ULONG Flags
3=PPORT_MESSAGE SendMessage
4=PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes
5=PPORT_MESSAGE ReceiveMessage
6=PSIZE_T BufferLength
7=PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes
8=PLARGE_INTEGER Timeout
ParamCount=8
@=ZwAlpcSendWaitReceivePort(HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);
[ZwAlpcSetInformation]
1=HANDLE PortHandle
2=ALPC_PORT_INFORMATION_CLASS PortInformationClass
3=PVOID PortInformation
4=ULONG Length
ParamCount=4
@=ZwAlpcSetInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);
[ZwApphelpCacheControl]
1=APPHELPCACHESERVICECLASS Service
2=PAHCACHE_SERVICE_DATA ServiceData
ParamCount=2
@=ZwApphelpCacheControl(APPHELPCACHESERVICECLASS Service, PAHCACHE_SERVICE_DATA ServiceData);
[ZwAreMappedFilesTheSame]
1=PVOID File1MappedAsAnImage
2=PVOID File2MappedAsFile
ParamCount=2
@=ZwAreMappedFilesTheSame(PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);
[ZwAssignProcessToJobObject]
1=HANDLE JobHandle
2=HANDLE ProcessHandle
ParamCount=2
@=ZwAssignProcessToJobObject(HANDLE JobHandle, HANDLE ProcessHandle);
[ZwAssociateWaitCompletionPacket]
1=HANDLE WaitCompletionPacketHandle
2=HANDLE IoCompletionHandle
3=HANDLE TargetObjectHandle
4=PVOID KeyContext
5=PVOID ApcContext
6=NTSTATUS IoStatus
7=ULONG_PTR IoStatusInformation
8=PBOOLEAN AlreadySignaled
ParamCount=8
@=ZwAssociateWaitCompletionPacket(HANDLE WaitCompletionPacketHandle, HANDLE IoCompletionHandle, HANDLE TargetObjectHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation, PBOOLEAN AlreadySignaled);
[ZwCallbackReturn]
1=PVOID OutputBuffer
2=ULONG OutputLength
3=NTSTATUS Status
ParamCount=3
@=ZwCallbackReturn(PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);
[ZwCancelIoFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=2
@=ZwCancelIoFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
[ZwCancelIoFileEx]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoRequestToCancel
3=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=3
@=ZwCancelIoFileEx(HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
[ZwCancelSynchronousIoFile]
1=HANDLE ThreadHandle
2=PIO_STATUS_BLOCK IoRequestToCancel
3=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=3
@=ZwCancelSynchronousIoFile(HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
[ZwCancelTimer]
1=HANDLE TimerHandle
2=PBOOLEAN CurrentState
ParamCount=2
@=ZwCancelTimer(HANDLE TimerHandle, PBOOLEAN CurrentState);
[ZwCancelTimer2]
1=HANDLE TimerHandle
2=PT2_CANCEL_PARAMETERS Parameters
ParamCount=2
@=ZwCancelTimer2(HANDLE TimerHandle, PT2_CANCEL_PARAMETERS Parameters);
[ZwCancelWaitCompletionPacket]
1=HANDLE WaitCompletionPacketHandle
2=BOOLEAN RemoveSignaledPacket
ParamCount=2
@=ZwCancelWaitCompletionPacket(HANDLE WaitCompletionPacketHandle, BOOLEAN RemoveSignaledPacket);
[ZwClearEvent]
1=HANDLE EventHandle
ParamCount=1
@=ZwClearEvent(HANDLE EventHandle);
[ZwClose]
1=HANDLE Handle
ParamCount=1
@=ZwClose(HANDLE Handle);
[ZwCloseObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=BOOLEAN GenerateOnClose
ParamCount=3
@=ZwCloseObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
[ZwCommitComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwCommitComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwCommitEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwCommitEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwCommitTransaction]
1=HANDLE TransactionHandle
2=BOOLEAN Wait
ParamCount=2
@=ZwCommitTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
[ZwCompactKeys]
1=ULONG Count
2=HANDLE KeyArray[]
ParamCount=2
@=ZwCompactKeys(ULONG Count, HANDLE KeyArray[]);
[ZwCompareObjects]
1=HANDLE FirstObjectHandle
2=HANDLE SecondObjectHandle
ParamCount=2
@=ZwCompareObjects(HANDLE FirstObjectHandle, HANDLE SecondObjectHandle);
[ZwCompareTokens]
1=HANDLE FirstTokenHandle
2=HANDLE SecondTokenHandle
3=PBOOLEAN Equal
ParamCount=3
@=ZwCompareTokens(HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);
[ZwCompleteConnectPort]
1=HANDLE PortHandle
ParamCount=1
@=ZwCompleteConnectPort(HANDLE PortHandle);
[ZwCompressKey]
1=HANDLE Key
ParamCount=1
@=ZwCompressKey(HANDLE Key);
[ZwConnectPort]
1=PHANDLE PortHandle
2=PUNICODE_STRING PortName
3=PSECURITY_QUALITY_OF_SERVICE SecurityQos
4=PPORT_VIEW ClientView
5=PREMOTE_PORT_VIEW ServerView
6=PULONG MaxMessageLength
7=PVOID ConnectionInformation
8=PULONG ConnectionInformationLength
ParamCount=8
@=ZwConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
[ZwContinue]
1=PCONTEXT ContextRecord
2=BOOLEAN TestAlert
ParamCount=2
@=ZwContinue(PCONTEXT ContextRecord, BOOLEAN TestAlert);
[ZwCreateDebugObject]
1=PHANDLE DebugObjectHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Flags
ParamCount=4
@=ZwCreateDebugObject(PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
[ZwCreateDirectoryObject]
1=PHANDLE DirectoryHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwCreateDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwCreateDirectoryObjectEx]
1=PHANDLE DirectoryHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ShadowDirectoryHandle
5=ULONG Flags
ParamCount=5
@=ZwCreateDirectoryObjectEx(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ShadowDirectoryHandle, ULONG Flags);
[ZwCreateEnlistment]
1=PHANDLE EnlistmentHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE ResourceManagerHandle
4=HANDLE TransactionHandle
5=POBJECT_ATTRIBUTES ObjectAttributes
6=ULONG CreateOptions
7=NOTIFICATION_MASK NotificationMask
8=PVOID EnlistmentKey
ParamCount=8
@=ZwCreateEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
[ZwCreateEvent]
1=PHANDLE EventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=EVENT_TYPE EventType
5=BOOLEAN InitialState
ParamCount=5
@=ZwCreateEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);
[ZwCreateEventPair]
1=PHANDLE EventPairHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwCreateEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwCreateFile]
1=PHANDLE FileHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=PLARGE_INTEGER AllocationSize
6=ULONG FileAttributes
7=ULONG ShareAccess
8=ULONG CreateDisposition
9=ULONG CreateOptions
10=PVOID EaBuffer
11=ULONG EaLength
ParamCount=11
@=ZwCreateFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
[ZwCreateIoCompletion]
1=PHANDLE IoCompletionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Count
ParamCount=4
@=ZwCreateIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);
[ZwCreateIRTimer]
1=PHANDLE TimerHandle
2=ACCESS_MASK DesiredAccess
ParamCount=2
@=ZwCreateIRTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess);
[ZwCreateJobObject]
1=PHANDLE JobHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwCreateJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwCreateJobSet]
1=ULONG NumJob
2=PJOB_SET_ARRAY UserJobSet
3=ULONG Flags
ParamCount=3
@=ZwCreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
[ZwCreateKey]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG TitleIndex
5=PUNICODE_STRING Class
6=ULONG CreateOptions
7=PULONG Disposition
ParamCount=7
@=ZwCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);
[ZwCreateKeyedEvent]
1=PHANDLE KeyedEventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG Flags
ParamCount=4
@=ZwCreateKeyedEvent(PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
[ZwCreateKeyTransacted]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG TitleIndex
5=PUNICODE_STRING Class
6=ULONG CreateOptions
7=HANDLE TransactionHandle
8=PULONG Disposition
ParamCount=8
@=ZwCreateKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);
[ZwCreateLowBoxToken]
1=PHANDLE TokenHandle
2=HANDLE ExistingTokenHandle
3=ACCESS_MASK DesiredAccess
4=POBJECT_ATTRIBUTES ObjectAttributes
5=PSID PackageSid
6=ULONG CapabilityCount
7=PSID_AND_ATTRIBUTES Capabilities
8=ULONG HandleCount
9=HANDLE *Handles
ParamCount=9
@=ZwCreateLowBoxToken(PHANDLE TokenHandle, HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PSID PackageSid, ULONG CapabilityCount, PSID_AND_ATTRIBUTES Capabilities, ULONG HandleCount, HANDLE *Handles);
[ZwCreateMailslotFile]
1=PHANDLE FileHandle
2=ULONG DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=ULONG CreateOptions
6=ULONG MailslotQuota
7=ULONG MaximumMessageSize
8=PLARGE_INTEGER ReadTimeout
ParamCount=8
@=ZwCreateMailslotFile(PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);
[ZwCreateMutant]
1=PHANDLE MutantHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=BOOLEAN InitialOwner
ParamCount=4
@=ZwCreateMutant(PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);
[ZwCreateNamedPipeFile]
1=PHANDLE FileHandle
2=ULONG DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=ULONG ShareAccess
6=ULONG CreateDisposition
7=ULONG CreateOptions
8=ULONG NamedPipeType
9=ULONG ReadMode
10=ULONG CompletionMode
11=ULONG MaximumInstances
12=ULONG InboundQuota
13=ULONG OutboundQuota
14=PLARGE_INTEGER DefaultTimeout
ParamCount=14
@=ZwCreateNamedPipeFile(PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
[ZwCreatePagingFile]
1=PUNICODE_STRING PageFileName
2=PLARGE_INTEGER MinimumSize
3=PLARGE_INTEGER MaximumSize
4=ULONG Priority
ParamCount=4
@=ZwCreatePagingFile(PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);
[ZwCreatePartition]
1=PHANDLE PartitionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG PreferredNode
ParamCount=4
@=ZwCreatePartition(PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG PreferredNode);
[ZwCreatePort]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=ULONG MaxConnectionInfoLength
4=ULONG MaxMessageLength
5=ULONG MaxPoolUsage
ParamCount=5
@=ZwCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);
[ZwCreatePrivateNamespace]
1=PHANDLE NamespaceHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PVOID BoundaryDescriptor
ParamCount=4
@=ZwCreatePrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
[ZwCreateProcess]
1=PHANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ParentProcess
5=BOOLEAN InheritObjectTable
6=HANDLE SectionHandle
7=HANDLE DebugPort
8=HANDLE ExceptionPort
ParamCount=8
@=ZwCreateProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);
[ZwCreateProcessEx]
1=PHANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ParentProcess
5=ULONG Flags
6=HANDLE SectionHandle
7=HANDLE DebugPort
8=HANDLE ExceptionPort
9=ULONG JobMemberLevel
ParamCount=9
@=ZwCreateProcessEx(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);
[ZwCreateProfile]
1=PHANDLE ProfileHandle
2=HANDLE Process
3=PVOID ProfileBase
4=SIZE_T ProfileSize
5=ULONG BucketSize
6=PULONG Buffer
7=ULONG BufferSize
8=KPROFILE_SOURCE ProfileSource
9=KAFFINITY Affinity
ParamCount=9
@=ZwCreateProfile(PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);
[ZwCreateProfileEx]
1=PHANDLE ProfileHandle
2=HANDLE Process
3=PVOID ProfileBase
4=SIZE_T ProfileSize
5=ULONG BucketSize
6=PULONG Buffer
7=ULONG BufferSize
8=KPROFILE_SOURCE ProfileSource
9=USHORT GroupCount
10=PGROUP_AFFINITY GroupAffinity
ParamCount=10
@=ZwCreateProfileEx(PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, USHORT GroupCount, PGROUP_AFFINITY GroupAffinity);
[ZwCreateResourceManager]
1=PHANDLE ResourceManagerHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE TmHandle
4=LPGUID RmGuid
5=POBJECT_ATTRIBUTES ObjectAttributes
6=ULONG CreateOptions
7=PUNICODE_STRING Description
ParamCount=7
@=ZwCreateResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
[ZwCreateSection]
1=PHANDLE SectionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PLARGE_INTEGER MaximumSize
5=ULONG SectionPageProtection
6=ULONG AllocationAttributes
7=HANDLE FileHandle
ParamCount=7
@=ZwCreateSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);
[ZwCreateSemaphore]
1=PHANDLE SemaphoreHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=LONG InitialCount
5=LONG MaximumCount
ParamCount=5
@=ZwCreateSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);
[ZwCreateSymbolicLinkObject]
1=PHANDLE LinkHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PUNICODE_STRING LinkTarget
ParamCount=4
@=ZwCreateSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);
[ZwCreateThread]
1=PHANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ProcessHandle
5=PCLIENT_ID ClientId
6=PCONTEXT ThreadContext
7=PINITIAL_TEB InitialTeb
8=BOOLEAN CreateSuspended
ParamCount=8
@=ZwCreateThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);
[ZwCreateThreadEx]
1=PHANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE ProcessHandle
5=PUSER_THREAD_START_ROUTINE StartRoutine
6=PVOID Argument
7=ULONG CreateFlags
8=SIZE_T ZeroBits
9=SIZE_T StackSize
10=SIZE_T MaximumStackSize
11=PPS_ATTRIBUTE_LIST AttributeList
ParamCount=11
@=ZwCreateThreadEx(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PUSER_THREAD_START_ROUTINE StartRoutine, PVOID Argument, ULONG CreateFlags, SIZE_T ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);
[ZwCreateTimer]
1=PHANDLE TimerHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=TIMER_TYPE TimerType
ParamCount=4
@=ZwCreateTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);
[ZwCreateTimer2]
1=PHANDLE TimerHandle
2=PVOID Reserved1
3=PVOID Reserved2
4=ULONG Attributes
5=ACCESS_MASK DesiredAccess
ParamCount=5
@=ZwCreateTimer2(PHANDLE TimerHandle, PVOID Reserved1, PVOID Reserved2, ULONG Attributes, ACCESS_MASK DesiredAccess);
[ZwCreateToken]
1=PHANDLE TokenHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=TOKEN_TYPE TokenType
5=PLUID AuthenticationId
6=PLARGE_INTEGER ExpirationTime
7=PTOKEN_USER User
8=PTOKEN_GROUPS Groups
9=PTOKEN_PRIVILEGES Privileges
10=PTOKEN_OWNER Owner
11=PTOKEN_PRIMARY_GROUP PrimaryGroup
12=PTOKEN_DEFAULT_DACL DefaultDacl
13=PTOKEN_SOURCE TokenSource
ParamCount=13
@=ZwCreateToken(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);
[ZwCreateTokenEx]
1=PHANDLE TokenHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=TOKEN_TYPE TokenType
5=PLUID AuthenticationId
6=PLARGE_INTEGER ExpirationTime
7=PTOKEN_USER User
8=PTOKEN_GROUPS Groups
9=PTOKEN_PRIVILEGES Privileges
10=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes
11=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes
12=PTOKEN_GROUPS DeviceGroups
13=PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy
14=PTOKEN_OWNER Owner
15=PTOKEN_PRIMARY_GROUP PrimaryGroup
16=PTOKEN_DEFAULT_DACL DefaultDacl
17=PTOKEN_SOURCE TokenSource
ParamCount=17
@=ZwCreateTokenEx(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes, PTOKEN_GROUPS DeviceGroups, PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);
[ZwCreateTransaction]
1=PHANDLE TransactionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=LPGUID Uow
5=HANDLE TmHandle
6=ULONG CreateOptions
7=ULONG IsolationLevel
8=ULONG IsolationFlags
9=PLARGE_INTEGER Timeout
10=PUNICODE_STRING Description
ParamCount=10
@=ZwCreateTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);
[ZwCreateTransactionManager]
1=PHANDLE TmHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PUNICODE_STRING LogFileName
5=ULONG CreateOptions
6=ULONG CommitStrength
ParamCount=6
@=ZwCreateTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);
[ZwCreateUserProcess]
1=PHANDLE ProcessHandle
2=PHANDLE ThreadHandle
3=ACCESS_MASK ProcessDesiredAccess
4=ACCESS_MASK ThreadDesiredAccess
5=POBJECT_ATTRIBUTES ProcessObjectAttributes
6=POBJECT_ATTRIBUTES ThreadObjectAttributes
7=ULONG ProcessFlags
8=ULONG ThreadFlags
9=PRTL_USER_PROCESS_PARAMETERS ProcessParameters
10=PPS_CREATE_INFO CreateInfo
11=PPS_ATTRIBUTE_LIST AttributeList
ParamCount=11
@=ZwCreateUserProcess(PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPS_CREATE_INFO CreateInfo, PPS_ATTRIBUTE_LIST AttributeList);
[ZwCreateWaitablePort]
1=PHANDLE PortHandle
2=POBJECT_ATTRIBUTES ObjectAttributes
3=ULONG MaxConnectionInfoLength
4=ULONG MaxMessageLength
5=ULONG MaxPoolUsage
ParamCount=5
@=ZwCreateWaitablePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);
[ZwCreateWaitCompletionPacket]
1=PHANDLE WaitCompletionPacketHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwCreateWaitCompletionPacket(PHANDLE WaitCompletionPacketHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwCreateWnfStateName]
1=PWNF_STATE_NAME StateName
2=WNF_STATE_NAME_LIFETIME NameLifetime
3=WNF_DATA_SCOPE DataScope
4=BOOLEAN PersistData
5=PCWNF_TYPE_ID TypeId
6=ULONG MaximumStateSize
7=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=7
@=ZwCreateWnfStateName(PWNF_STATE_NAME StateName, WNF_STATE_NAME_LIFETIME NameLifetime, WNF_DATA_SCOPE DataScope, BOOLEAN PersistData, PCWNF_TYPE_ID TypeId, ULONG MaximumStateSize, PSECURITY_DESCRIPTOR SecurityDescriptor);
[ZwCreateWorkerFactory]
1=PHANDLE WorkerFactoryHandleReturn
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE CompletionPortHandle
5=HANDLE WorkerProcessHandle
6=PVOID StartRoutine
7=PVOID StartParameter
8=ULONG MaxThreadCount
9=SIZE_T StackReserve
10=SIZE_T StackCommit
ParamCount=10
@=ZwCreateWorkerFactory(PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);
[ZwDebugActiveProcess]
1=HANDLE ProcessHandle
2=HANDLE DebugObjectHandle
ParamCount=2
@=ZwDebugActiveProcess(HANDLE ProcessHandle, HANDLE DebugObjectHandle);
[ZwDebugContinue]
1=HANDLE DebugObjectHandle
2=PCLIENT_ID ClientId
3=NTSTATUS ContinueStatus
ParamCount=3
@=ZwDebugContinue(HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);
[ZwDelayExecution]
1=BOOLEAN Alertable
2=PLARGE_INTEGER DelayInterval
ParamCount=2
@=ZwDelayExecution(BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);
[ZwDeleteAtom]
1=RTL_ATOM Atom
ParamCount=1
@=ZwDeleteAtom(RTL_ATOM Atom);
[ZwDeleteBootEntry]
1=ULONG Id
ParamCount=1
@=ZwDeleteBootEntry(ULONG Id);
[ZwDeleteDriverEntry]
1=ULONG Id
ParamCount=1
@=ZwDeleteDriverEntry(ULONG Id);
[ZwDeleteFile]
1=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=1
@=ZwDeleteFile(POBJECT_ATTRIBUTES ObjectAttributes);
[ZwDeleteKey]
1=HANDLE KeyHandle
ParamCount=1
@=ZwDeleteKey(HANDLE KeyHandle);
[ZwDeleteObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=BOOLEAN GenerateOnClose
ParamCount=3
@=ZwDeleteObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
[ZwDeletePrivateNamespace]
1=HANDLE NamespaceHandle
ParamCount=1
@=ZwDeletePrivateNamespace(HANDLE NamespaceHandle);
[ZwDeleteValueKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING ValueName
ParamCount=2
@=ZwDeleteValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName);
[ZwDeleteWnfStateData]
1=PCWNF_STATE_NAME StateName
2=VOID *ExplicitScope
ParamCount=2
@=ZwDeleteWnfStateData(PCWNF_STATE_NAME StateName, VOID *ExplicitScope);
[ZwDeleteWnfStateName]
1=PCWNF_STATE_NAME StateName
ParamCount=1
@=ZwDeleteWnfStateName(PCWNF_STATE_NAME StateName);
[ZwDeviceIoControlFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=ULONG IoControlCode
7=PVOID InputBuffer
8=ULONG InputBufferLength
9=PVOID OutputBuffer
10=ULONG OutputBufferLength
ParamCount=10
@=ZwDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
[ZwDisableLastKnownGood]
ParamCount=0
@=ZwDisableLastKnownGood();
[ZwDisplayString]
1=PUNICODE_STRING String
ParamCount=1
@=ZwDisplayString(PUNICODE_STRING String);
[ZwDrawText]
1=PUNICODE_STRING String
ParamCount=1
@=ZwDrawText(PUNICODE_STRING String);
[ZwDuplicateObject]
1=HANDLE SourceProcessHandle
2=HANDLE SourceHandle
3=HANDLE TargetProcessHandle
4=PHANDLE TargetHandle
5=ACCESS_MASK DesiredAccess
6=ULONG HandleAttributes
7=ULONG Options
ParamCount=7
@=ZwDuplicateObject(HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);
[ZwDuplicateToken]
1=HANDLE ExistingTokenHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=BOOLEAN EffectiveOnly
5=TOKEN_TYPE TokenType
6=PHANDLE NewTokenHandle
ParamCount=6
@=ZwDuplicateToken(HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);
[ZwEnableLastKnownGood]
ParamCount=0
@=ZwEnableLastKnownGood();
[ZwEnumerateBootEntries]
1=PVOID Buffer
2=PULONG BufferLength
ParamCount=2
@=ZwEnumerateBootEntries(PVOID Buffer, PULONG BufferLength);
[ZwEnumerateDriverEntries]
1=PVOID Buffer
2=PULONG BufferLength
ParamCount=2
@=ZwEnumerateDriverEntries(PVOID Buffer, PULONG BufferLength);
[ZwEnumerateKey]
1=HANDLE KeyHandle
2=ULONG Index
3=KEY_INFORMATION_CLASS KeyInformationClass
4=PVOID KeyInformation
5=ULONG Length
6=PULONG ResultLength
ParamCount=6
@=ZwEnumerateKey(HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
[ZwEnumerateSystemEnvironmentValuesEx]
1=ULONG InformationClass
2=PVOID Buffer
3=PULONG BufferLength
ParamCount=3
@=ZwEnumerateSystemEnvironmentValuesEx(ULONG InformationClass, PVOID Buffer, PULONG BufferLength);
[ZwEnumerateTransactionObject]
1=HANDLE RootObjectHandle
2=KTMOBJECT_TYPE QueryType
3=PKTMOBJECT_CURSOR ObjectCursor
4=ULONG ObjectCursorLength
5=PULONG ReturnLength
ParamCount=5
@=ZwEnumerateTransactionObject(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
[ZwEnumerateValueKey]
1=HANDLE KeyHandle
2=ULONG Index
3=KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass
4=PVOID KeyValueInformation
5=ULONG Length
6=PULONG ResultLength
ParamCount=6
@=ZwEnumerateValueKey(HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
[ZwExtendSection]
1=HANDLE SectionHandle
2=PLARGE_INTEGER NewSectionSize
ParamCount=2
@=ZwExtendSection(HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);
[ZwFilterBootOption]
1=FILTER_BOOT_OPTION_OPERATION FilterOperation
2=ULONG ObjectType
3=ULONG ElementType
4=PVOID Data
5=ULONG DataSize
ParamCount=5
@=ZwFilterBootOption(FILTER_BOOT_OPTION_OPERATION FilterOperation, ULONG ObjectType, ULONG ElementType, PVOID Data, ULONG DataSize);
[ZwFilterToken]
1=HANDLE ExistingTokenHandle
2=ULONG Flags
3=PTOKEN_GROUPS SidsToDisable
4=PTOKEN_PRIVILEGES PrivilegesToDelete
5=PTOKEN_GROUPS RestrictedSids
6=PHANDLE NewTokenHandle
ParamCount=6
@=ZwFilterToken(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);
[ZwFilterTokenEx]
1=HANDLE ExistingTokenHandle
2=ULONG Flags
3=PTOKEN_GROUPS SidsToDisable
4=PTOKEN_PRIVILEGES PrivilegesToDelete
5=PTOKEN_GROUPS RestrictedSids
6=ULONG DisableUserClaimsCount
7=PUNICODE_STRING UserClaimsToDisable
8=ULONG DisableDeviceClaimsCount
9=PUNICODE_STRING DeviceClaimsToDisable
10=PTOKEN_GROUPS DeviceGroupsToDisable
11=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes
12=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes
13=PTOKEN_GROUPS RestrictedDeviceGroups
14=PHANDLE NewTokenHandle
ParamCount=14
@=ZwFilterTokenEx(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, ULONG DisableUserClaimsCount, PUNICODE_STRING UserClaimsToDisable, ULONG DisableDeviceClaimsCount, PUNICODE_STRING DeviceClaimsToDisable, PTOKEN_GROUPS DeviceGroupsToDisable, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes, PTOKEN_GROUPS RestrictedDeviceGroups, PHANDLE NewTokenHandle);
[ZwFindAtom]
1=PWSTR AtomName
2=ULONG Length
3=PRTL_ATOM Atom
ParamCount=3
@=ZwFindAtom(PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);
[ZwFlushBuffersFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=2
@=ZwFlushBuffersFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
[ZwFlushBuffersFileEx]
1=HANDLE FileHandle
2=ULONG Flags
3=PVOID Parameters
4=ULONG ParametersSize
5=PIO_STATUS_BLOCK IoStatusBlock
ParamCount=5
@=ZwFlushBuffersFileEx(HANDLE FileHandle, ULONG Flags, PVOID Parameters, ULONG ParametersSize, PIO_STATUS_BLOCK IoStatusBlock);
[ZwFlushInstallUILanguage]
1=LANGID InstallUILanguage
2=ULONG SetComittedFlag
ParamCount=2
@=ZwFlushInstallUILanguage(LANGID InstallUILanguage, ULONG SetComittedFlag);
[ZwFlushInstructionCache]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=SIZE_T Length
ParamCount=3
@=ZwFlushInstructionCache(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);
[ZwFlushKey]
1=HANDLE KeyHandle
ParamCount=1
@=ZwFlushKey(HANDLE KeyHandle);
[ZwFlushProcessWriteBuffers]
ParamCount=0
@=ZwFlushProcessWriteBuffers();
[ZwFlushVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=PIO_STATUS_BLOCK IoStatus
ParamCount=4
@=ZwFlushVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);
[ZwFlushWriteBuffer]
ParamCount=0
@=ZwFlushWriteBuffer();
[ZwFreeUserPhysicalPages]
1=HANDLE ProcessHandle
2=PULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=ZwFreeUserPhysicalPages(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[ZwFreeVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG FreeType
ParamCount=4
@=ZwFreeVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
[ZwFreezeRegistry]
1=ULONG TimeOutInSeconds
ParamCount=1
@=ZwFreezeRegistry(ULONG TimeOutInSeconds);
[ZwFreezeTransactions]
1=PLARGE_INTEGER FreezeTimeout
2=PLARGE_INTEGER ThawTimeout
ParamCount=2
@=ZwFreezeTransactions(PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);
[ZwFsControlFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=ULONG FsControlCode
7=PVOID InputBuffer
8=ULONG InputBufferLength
9=PVOID OutputBuffer
10=ULONG OutputBufferLength
ParamCount=10
@=ZwFsControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
[ZwGetCachedSigningLevel]
1=HANDLE File
2=PULONG Flags
3=PSE_SIGNING_LEVEL SigningLevel
4=PUCHAR Thumbprint
5=PULONG ThumbprintSize
6=PULONG ThumbprintAlgorithm
ParamCount=6
@=ZwGetCachedSigningLevel(HANDLE File, PULONG Flags, PSE_SIGNING_LEVEL SigningLevel, PUCHAR Thumbprint, PULONG ThumbprintSize, PULONG ThumbprintAlgorithm);
[ZwGetCompleteWnfStateSubscription]
1=PWNF_STATE_NAME OldDescriptorStateName
2=ULONG64 *OldSubscriptionId
3=ULONG OldDescriptorEventMask
4=ULONG OldDescriptorStatus
5=PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor
6=ULONG DescriptorSize
ParamCount=6
@=ZwGetCompleteWnfStateSubscription(PWNF_STATE_NAME OldDescriptorStateName, ULONG64 *OldSubscriptionId, ULONG OldDescriptorEventMask, ULONG OldDescriptorStatus, PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor, ULONG DescriptorSize);
[ZwGetContextThread]
1=HANDLE ThreadHandle
2=PCONTEXT ThreadContext
ParamCount=2
@=ZwGetContextThread(HANDLE ThreadHandle, PCONTEXT ThreadContext);
[ZwGetCurrentProcessorNumber]
ParamCount=0
@=ZwGetCurrentProcessorNumber();
[ZwGetDevicePowerState]
1=HANDLE Device
2=PDEVICE_POWER_STATE State
ParamCount=2
@=ZwGetDevicePowerState(HANDLE Device, PDEVICE_POWER_STATE State);
[ZwGetMUIRegistryInfo]
1=ULONG Flags
2=PULONG DataSize
3=PVOID Data
ParamCount=3
@=ZwGetMUIRegistryInfo(ULONG Flags, PULONG DataSize, PVOID Data);
[ZwGetNextProcess]
1=HANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=ULONG HandleAttributes
4=ULONG Flags
5=PHANDLE NewProcessHandle
ParamCount=5
@=ZwGetNextProcess(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);
[ZwGetNextThread]
1=HANDLE ProcessHandle
2=HANDLE ThreadHandle
3=ACCESS_MASK DesiredAccess
4=ULONG HandleAttributes
5=ULONG Flags
6=PHANDLE NewThreadHandle
ParamCount=6
@=ZwGetNextThread(HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);
[ZwGetNlsSectionPtr]
1=ULONG SectionType
2=ULONG SectionData
3=PVOID ContextData
4=PVOID *SectionPointer
5=PULONG SectionSize
ParamCount=5
@=ZwGetNlsSectionPtr(ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);
[ZwGetNotificationResourceManager]
1=HANDLE ResourceManagerHandle
2=PTRANSACTION_NOTIFICATION TransactionNotification
3=ULONG NotificationLength
4=PLARGE_INTEGER Timeout
5=PULONG ReturnLength
6=ULONG Asynchronous
7=ULONG_PTR AsynchronousContext
ParamCount=7
@=ZwGetNotificationResourceManager(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);
[ZwGetWriteWatch]
1=HANDLE ProcessHandle
2=ULONG Flags
3=PVOID BaseAddress
4=SIZE_T RegionSize
5=PVOID *UserAddressArray
6=PULONG_PTR EntriesInUserAddressArray
7=PULONG Granularity
ParamCount=7
@=ZwGetWriteWatch(HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);
[ZwImpersonateAnonymousToken]
1=HANDLE ThreadHandle
ParamCount=1
@=ZwImpersonateAnonymousToken(HANDLE ThreadHandle);
[ZwImpersonateClientOfPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
ParamCount=2
@=ZwImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message);
[ZwImpersonateThread]
1=HANDLE ServerThreadHandle
2=HANDLE ClientThreadHandle
3=PSECURITY_QUALITY_OF_SERVICE SecurityQos
ParamCount=3
@=ZwImpersonateThread(HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);
[ZwInitializeNlsFiles]
1=PVOID *BaseAddress
2=PLCID DefaultLocaleId
3=PLARGE_INTEGER DefaultCasingTableSize
ParamCount=3
@=ZwInitializeNlsFiles(PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);
[ZwInitializeRegistry]
1=USHORT BootCondition
ParamCount=1
@=ZwInitializeRegistry(USHORT BootCondition);
[ZwInitiatePowerAction]
1=POWER_ACTION SystemAction
2=SYSTEM_POWER_STATE LightestSystemState
3=ULONG Flags
4=BOOLEAN Asynchronous
ParamCount=4
@=ZwInitiatePowerAction(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags, BOOLEAN Asynchronous);
[ZwIsProcessInJob]
1=HANDLE ProcessHandle
2=HANDLE JobHandle
ParamCount=2
@=ZwIsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle);
[ZwIsSystemResumeAutomatic]
ParamCount=0
@=ZwIsSystemResumeAutomatic();
[ZwIsUILanguageComitted]
ParamCount=0
@=ZwIsUILanguageComitted();
[ZwListenPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE ConnectionRequest
ParamCount=2
@=ZwListenPort(HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);
[ZwLoadDriver]
1=PUNICODE_STRING DriverServiceName
ParamCount=1
@=ZwLoadDriver(PUNICODE_STRING DriverServiceName);
[ZwLoadKey]
1=POBJECT_ATTRIBUTES TargetKey
2=POBJECT_ATTRIBUTES SourceFile
ParamCount=2
@=ZwLoadKey(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);
[ZwLoadKey2]
1=POBJECT_ATTRIBUTES TargetKey
2=POBJECT_ATTRIBUTES SourceFile
3=ULONG Flags
ParamCount=3
@=ZwLoadKey2(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);
[ZwLoadKeyEx]
1=POBJECT_ATTRIBUTES TargetKey
2=POBJECT_ATTRIBUTES SourceFile
3=ULONG Flags
4=HANDLE TrustClassKey
ParamCount=4
@=ZwLoadKeyEx(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey);
[ZwLockFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PLARGE_INTEGER ByteOffset
7=PLARGE_INTEGER Length
8=ULONG Key
9=BOOLEAN FailImmediately
10=BOOLEAN ExclusiveLock
ParamCount=10
@=ZwLockFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);
[ZwLockProductActivationKeys]
1=ULONG *pPrivateVer
2=ULONG *pSafeMode
ParamCount=2
@=ZwLockProductActivationKeys(ULONG *pPrivateVer, ULONG *pSafeMode);
[ZwLockRegistryKey]
1=HANDLE KeyHandle
ParamCount=1
@=ZwLockRegistryKey(HANDLE KeyHandle);
[ZwLockVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG MapType
ParamCount=4
@=ZwLockVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);
[ZwMakePermanentObject]
1=HANDLE Handle
ParamCount=1
@=ZwMakePermanentObject(HANDLE Handle);
[ZwMakeTemporaryObject]
1=HANDLE Handle
ParamCount=1
@=ZwMakeTemporaryObject(HANDLE Handle);
[ZwManagePartition]
1=MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass
2=PVOID PartitionInformation
3=ULONG PartitionInformationLength
ParamCount=3
@=ZwManagePartition(MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, PVOID PartitionInformation, ULONG PartitionInformationLength);
[ZwMapCMFModule]
1=ULONG What
2=ULONG Index
3=PULONG CacheIndexOut
4=PULONG CacheFlagsOut
5=PULONG ViewSizeOut
6=PVOID *BaseAddress
ParamCount=6
@=ZwMapCMFModule(ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);
[ZwMapUserPhysicalPages]
1=PVOID VirtualAddress
2=ULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=ZwMapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[ZwMapUserPhysicalPagesScatter]
1=PVOID *VirtualAddresses
2=ULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=ZwMapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
[ZwMapViewOfSection]
1=HANDLE SectionHandle
2=HANDLE ProcessHandle
3=PVOID *BaseAddress
4=ULONG_PTR ZeroBits
5=SIZE_T CommitSize
6=PLARGE_INTEGER SectionOffset
7=PSIZE_T ViewSize
8=SECTION_INHERIT InheritDisposition
9=ULONG AllocationType
10=ULONG Win32Protect
ParamCount=10
@=ZwMapViewOfSection(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, ULONG Win32Protect);
[ZwModifyBootEntry]
1=PBOOT_ENTRY BootEntry
ParamCount=1
@=ZwModifyBootEntry(PBOOT_ENTRY BootEntry);
[ZwModifyDriverEntry]
1=PEFI_DRIVER_ENTRY DriverEntry
ParamCount=1
@=ZwModifyDriverEntry(PEFI_DRIVER_ENTRY DriverEntry);
[ZwNotifyChangeDirectoryFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=FILE_NOTIFY_INFORMATION Buffer
7=ULONG Length
8=ULONG CompletionFilter
9=BOOLEAN WatchTree
ParamCount=9
@=ZwNotifyChangeDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, FILE_NOTIFY_INFORMATION Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);
[ZwNotifyChangeKey]
1=HANDLE KeyHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=ULONG CompletionFilter
7=BOOLEAN WatchTree
8=PVOID Buffer
9=ULONG BufferSize
10=BOOLEAN Asynchronous
ParamCount=10
@=ZwNotifyChangeKey(HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
[ZwNotifyChangeMultipleKeys]
1=HANDLE MasterKeyHandle
2=ULONG Count
3=OBJECT_ATTRIBUTES SubordinateObjects[]
4=HANDLE Event
5=PIO_APC_ROUTINE ApcRoutine
6=PVOID ApcContext
7=PIO_STATUS_BLOCK IoStatusBlock
8=ULONG CompletionFilter
9=BOOLEAN WatchTree
10=PVOID Buffer
11=ULONG BufferSize
12=BOOLEAN Asynchronous
ParamCount=12
@=ZwNotifyChangeMultipleKeys(HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SubordinateObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
[ZwNotifyChangeSession]
1=HANDLE SessionHandle
2=ULONG ChangeSequenceNumber
3=PLARGE_INTEGER ChangeTimeStamp
4=IO_SESSION_EVENT Event
5=IO_SESSION_STATE NewState
6=IO_SESSION_STATE PreviousState
7=PVOID Payload
8=ULONG PayloadSize
ParamCount=8
@=ZwNotifyChangeSession(HANDLE SessionHandle, ULONG ChangeSequenceNumber, PLARGE_INTEGER ChangeTimeStamp, IO_SESSION_EVENT Event, IO_SESSION_STATE NewState, IO_SESSION_STATE PreviousState, PVOID Payload, ULONG PayloadSize);
[ZwOpenDirectoryObject]
1=PHANDLE DirectoryHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenEnlistment]
1=PHANDLE EnlistmentHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE ResourceManagerHandle
4=LPGUID EnlistmentGuid
5=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=5
@=ZwOpenEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenEvent]
1=PHANDLE EventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenEventPair]
1=PHANDLE EventPairHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenFile]
1=PHANDLE FileHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PIO_STATUS_BLOCK IoStatusBlock
5=ULONG ShareAccess
6=ULONG OpenOptions
ParamCount=6
@=ZwOpenFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);
[ZwOpenIoCompletion]
1=PHANDLE IoCompletionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenJobObject]
1=PHANDLE JobHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenKey]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenKeyedEvent]
1=PHANDLE KeyedEventHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenKeyedEvent(PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenKeyEx]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG OpenOptions
ParamCount=4
@=ZwOpenKeyEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);
[ZwOpenKeyTransacted]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=HANDLE TransactionHandle
ParamCount=4
@=ZwOpenKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);
[ZwOpenKeyTransactedEx]
1=PHANDLE KeyHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=ULONG OpenOptions
5=HANDLE TransactionHandle
ParamCount=5
@=ZwOpenKeyTransactedEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);
[ZwOpenMutant]
1=PHANDLE MutantHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenMutant(PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=PUNICODE_STRING ObjectTypeName
4=PUNICODE_STRING ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=HANDLE ClientToken
7=ACCESS_MASK DesiredAccess
8=ACCESS_MASK GrantedAccess
9=PPRIVILEGE_SET Privileges
10=BOOLEAN ObjectCreation
11=BOOLEAN AccessGranted
12=PBOOLEAN GenerateOnClose
ParamCount=12
@=ZwOpenObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);
[ZwOpenPartition]
1=PHANDLE PartitionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenPartition(PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenPrivateNamespace]
1=PHANDLE NamespaceHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PVOID BoundaryDescriptor
ParamCount=4
@=ZwOpenPrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
[ZwOpenProcess]
1=PHANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PCLIENT_ID ClientId
ParamCount=4
@=ZwOpenProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
[ZwOpenProcessToken]
1=HANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=PHANDLE TokenHandle
ParamCount=3
@=ZwOpenProcessToken(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
[ZwOpenProcessTokenEx]
1=HANDLE ProcessHandle
2=ACCESS_MASK DesiredAccess
3=ULONG HandleAttributes
4=PHANDLE TokenHandle
ParamCount=4
@=ZwOpenProcessTokenEx(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);
[ZwOpenResourceManager]
1=PHANDLE ResourceManagerHandle
2=ACCESS_MASK DesiredAccess
3=HANDLE TmHandle
4=LPGUID ResourceManagerGuid
5=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=5
@=ZwOpenResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenSection]
1=PHANDLE SectionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenSemaphore]
1=PHANDLE SemaphoreHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenSession]
1=PHANDLE SessionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenSession(PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenSymbolicLinkObject]
1=PHANDLE LinkHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenThread]
1=PHANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PCLIENT_ID ClientId
ParamCount=4
@=ZwOpenThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
[ZwOpenThreadToken]
1=HANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=BOOLEAN OpenAsSelf
4=PHANDLE TokenHandle
ParamCount=4
@=ZwOpenThreadToken(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);
[ZwOpenThreadTokenEx]
1=HANDLE ThreadHandle
2=ACCESS_MASK DesiredAccess
3=BOOLEAN OpenAsSelf
4=ULONG HandleAttributes
5=PHANDLE TokenHandle
ParamCount=5
@=ZwOpenThreadTokenEx(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);
[ZwOpenTimer]
1=PHANDLE TimerHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
ParamCount=3
@=ZwOpenTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
[ZwOpenTransaction]
1=PHANDLE TransactionHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=LPGUID Uow
5=HANDLE TmHandle
ParamCount=5
@=ZwOpenTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
[ZwOpenTransactionManager]
1=PHANDLE TmHandle
2=ACCESS_MASK DesiredAccess
3=POBJECT_ATTRIBUTES ObjectAttributes
4=PUNICODE_STRING LogFileName
5=LPGUID TmIdentity
6=ULONG OpenOptions
ParamCount=6
@=ZwOpenTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
[ZwPlugPlayControl]
1=PLUGPLAY_CONTROL_CLASS PnPControlClass
2=PVOID PnPControlData
3=ULONG PnPControlDataLength
ParamCount=3
@=ZwPlugPlayControl(PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);
[ZwPowerInformation]
1=POWER_INFORMATION_LEVEL InformationLevel
2=PVOID InputBuffer
3=ULONG InputBufferLength
4=PVOID OutputBuffer
5=ULONG OutputBufferLength
ParamCount=5
@=ZwPowerInformation(POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
[ZwPrepareComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwPrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwPrepareEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwPrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwPrePrepareComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwPrePrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwPrePrepareEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwPrePrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwPrivilegeCheck]
1=HANDLE ClientToken
2=PPRIVILEGE_SET RequiredPrivileges
3=PBOOLEAN Result
ParamCount=3
@=ZwPrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
[ZwPrivilegedServiceAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PUNICODE_STRING ServiceName
3=HANDLE ClientToken
4=PPRIVILEGE_SET Privileges
5=BOOLEAN AccessGranted
ParamCount=5
@=ZwPrivilegedServiceAuditAlarm(PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
[ZwPrivilegeObjectAuditAlarm]
1=PUNICODE_STRING SubsystemName
2=PVOID HandleId
3=HANDLE ClientToken
4=ACCESS_MASK DesiredAccess
5=PPRIVILEGE_SET Privileges
6=BOOLEAN AccessGranted
ParamCount=6
@=ZwPrivilegeObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
[ZwPropagationComplete]
1=HANDLE ResourceManagerHandle
2=ULONG RequestCookie
3=ULONG BufferLength
4=PVOID Buffer
ParamCount=4
@=ZwPropagationComplete(HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
[ZwPropagationFailed]
1=HANDLE ResourceManagerHandle
2=ULONG RequestCookie
3=NTSTATUS PropStatus
ParamCount=3
@=ZwPropagationFailed(HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);
[ZwProtectVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG NewProtect
5=PULONG OldProtect
ParamCount=5
@=ZwProtectVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG NewProtect, PULONG OldProtect);
[ZwPulseEvent]
1=HANDLE EventHandle
2=PLONG PreviousState
ParamCount=2
@=ZwPulseEvent(HANDLE EventHandle, PLONG PreviousState);
[ZwQueryAttributesFile]
1=POBJECT_ATTRIBUTES ObjectAttributes
2=PFILE_BASIC_INFORMATION FileInformation
ParamCount=2
@=ZwQueryAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);
[ZwQueryBootEntryOrder]
1=PULONG Ids
2=PULONG Count
ParamCount=2
@=ZwQueryBootEntryOrder(PULONG Ids, PULONG Count);
[ZwQueryBootOptions]
1=PBOOT_OPTIONS BootOptions
2=PULONG BootOptionsLength
ParamCount=2
@=ZwQueryBootOptions(PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);
[ZwQueryDebugFilterState]
1=ULONG ComponentId
2=ULONG Level
ParamCount=2
@=ZwQueryDebugFilterState(ULONG ComponentId, ULONG Level);
[ZwQueryDefaultLocale]
1=BOOLEAN UserProfile
2=PLCID DefaultLocaleId
ParamCount=2
@=ZwQueryDefaultLocale(BOOLEAN UserProfile, PLCID DefaultLocaleId);
[ZwQueryDefaultUILanguage]
1=LANGID *DefaultUILanguageId
ParamCount=1
@=ZwQueryDefaultUILanguage(LANGID *DefaultUILanguageId);
[ZwQueryDirectoryFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PVOID FileInformation
7=ULONG Length
8=FILE_INFORMATION_CLASS FileInformationClass
9=BOOLEAN ReturnSingleEntry
10=PUNICODE_STRING FileName
11=BOOLEAN RestartScan
ParamCount=11
@=ZwQueryDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);
[ZwQueryDirectoryObject]
1=HANDLE DirectoryHandle
2=PVOID Buffer
3=ULONG Length
4=BOOLEAN ReturnSingleEntry
5=BOOLEAN RestartScan
6=PULONG Context
7=PULONG ReturnLength
ParamCount=7
@=ZwQueryDirectoryObject(HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);
[ZwQueryDriverEntryOrder]
1=PULONG Ids
2=PULONG Count
ParamCount=2
@=ZwQueryDriverEntryOrder(PULONG Ids, PULONG Count);
[ZwQueryEaFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
5=BOOLEAN ReturnSingleEntry
6=PVOID EaList
7=ULONG EaListLength
8=PULONG EaIndex
9=BOOLEAN RestartScan
ParamCount=9
@=ZwQueryEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);
[ZwQueryEvent]
1=HANDLE EventHandle
2=EVENT_INFORMATION_CLASS EventInformationClass
3=PVOID EventInformation
4=ULONG EventInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryEvent(HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);
[ZwQueryFullAttributesFile]
1=POBJECT_ATTRIBUTES ObjectAttributes
2=PFILE_NETWORK_OPEN_INFORMATION FileInformation
ParamCount=2
@=ZwQueryFullAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);
[ZwQueryInformationAtom]
1=RTL_ATOM Atom
2=ATOM_INFORMATION_CLASS AtomInformationClass
3=PVOID AtomInformation
4=ULONG AtomInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationAtom(RTL_ATOM Atom, ATOM_INFORMATION_CLASS AtomInformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);
[ZwQueryInformationEnlistment]
1=HANDLE EnlistmentHandle
2=ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass
3=PVOID EnlistmentInformation
4=ULONG EnlistmentInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
[ZwQueryInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FileInformation
4=ULONG Length
5=FILE_INFORMATION_CLASS FileInformationClass
ParamCount=5
@=ZwQueryInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
[ZwQueryInformationJobObject]
1=HANDLE JobHandle
2=JOBOBJECTINFOCLASS JobObjectInformationClass
3=PVOID JobObjectInformation
4=ULONG JobObjectInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);
[ZwQueryInformationPort]
1=HANDLE PortHandle
2=PORT_INFORMATION_CLASS PortInformationClass
3=PVOID PortInformation
4=ULONG Length
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationPort(HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);
[ZwQueryInformationProcess]
1=HANDLE ProcessHandle
2=PROCESSINFOCLASS ProcessInformationClass
3=PVOID ProcessInformation
4=ULONG ProcessInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
[ZwQueryInformationResourceManager]
1=HANDLE ResourceManagerHandle
2=RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass
3=PVOID ResourceManagerInformation
4=ULONG ResourceManagerInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
[ZwQueryInformationThread]
1=HANDLE ThreadHandle
2=THREADINFOCLASS ThreadInformationClass
3=PVOID ThreadInformation
4=ULONG ThreadInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);
[ZwQueryInformationToken]
1=HANDLE TokenHandle
2=TOKEN_INFORMATION_CLASS TokenInformationClass
3=PVOID TokenInformation
4=ULONG TokenInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);
[ZwQueryInformationTransaction]
1=HANDLE TransactionHandle
2=TRANSACTION_INFORMATION_CLASS TransactionInformationClass
3=PVOID TransactionInformation
4=ULONG TransactionInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
[ZwQueryInformationTransactionManager]
1=HANDLE TransactionManagerHandle
2=TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass
3=PVOID TransactionManagerInformation
4=ULONG TransactionManagerInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationTransactionManager(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
[ZwQueryInformationWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=WORKERFACTORYINFOCLASS WorkerFactoryInformationClass
3=PVOID WorkerFactoryInformation
4=ULONG WorkerFactoryInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);
[ZwQueryInstallUILanguage]
1=LANGID *InstallUILanguageId
ParamCount=1
@=ZwQueryInstallUILanguage(LANGID *InstallUILanguageId);
[ZwQueryIntervalProfile]
1=KPROFILE_SOURCE ProfileSource
2=PULONG Interval
ParamCount=2
@=ZwQueryIntervalProfile(KPROFILE_SOURCE ProfileSource, PULONG Interval);
[ZwQueryIoCompletion]
1=HANDLE IoCompletionHandle
2=IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass
3=PVOID IoCompletionInformation
4=ULONG IoCompletionInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryIoCompletion(HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);
[ZwQueryKey]
1=HANDLE KeyHandle
2=KEY_INFORMATION_CLASS KeyInformationClass
3=PVOID KeyInformation
4=ULONG Length
5=PULONG ResultLength
ParamCount=5
@=ZwQueryKey(HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
[ZwQueryLicenseValue]
1=PUNICODE_STRING ValueName
2=PULONG Type
3=PVOID Data
4=ULONG DataSize
5=PULONG ResultDataSize
ParamCount=5
@=ZwQueryLicenseValue(PUNICODE_STRING ValueName, PULONG Type, PVOID Data, ULONG DataSize, PULONG ResultDataSize);
[ZwQueryMultipleValueKey]
1=HANDLE KeyHandle
2=PKEY_VALUE_ENTRY ValueEntries
3=ULONG EntryCount
4=PVOID ValueBuffer
5=PULONG BufferLength
6=PULONG RequiredBufferLength
ParamCount=6
@=ZwQueryMultipleValueKey(HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);
[ZwQueryMutant]
1=HANDLE MutantHandle
2=MUTANT_INFORMATION_CLASS MutantInformationClass
3=PVOID MutantInformation
4=ULONG MutantInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryMutant(HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);
[ZwQueryObject]
1=HANDLE Handle
2=OBJECT_INFORMATION_CLASS ObjectInformationClass
3=PVOID ObjectInformation
4=ULONG ObjectInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);
[ZwQueryOpenSubKeys]
1=POBJECT_ATTRIBUTES TargetKey
2=PULONG HandleCount
ParamCount=2
@=ZwQueryOpenSubKeys(POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);
[ZwQueryOpenSubKeysEx]
1=POBJECT_ATTRIBUTES TargetKey
2=ULONG BufferLength
3=PVOID Buffer
4=PULONG RequiredSize
ParamCount=4
@=ZwQueryOpenSubKeysEx(POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);
[ZwQueryPerformanceCounter]
1=PLARGE_INTEGER PerformanceCounter
2=PLARGE_INTEGER PerformanceFrequency
ParamCount=2
@=ZwQueryPerformanceCounter(PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);
[ZwQueryPortInformationProcess]
ParamCount=0
@=ZwQueryPortInformationProcess();
[ZwQueryQuotaInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
5=BOOLEAN ReturnSingleEntry
6=PVOID SidList
7=ULONG SidListLength
8=PSID StartSid
9=BOOLEAN RestartScan
ParamCount=9
@=ZwQueryQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PSID StartSid, BOOLEAN RestartScan);
[ZwQuerySection]
1=HANDLE SectionHandle
2=SECTION_INFORMATION_CLASS SectionInformationClass
3=PVOID SectionInformation
4=SIZE_T SectionInformationLength
5=PSIZE_T ReturnLength
ParamCount=5
@=ZwQuerySection(HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);
[ZwQuerySecurityAttributesToken]
1=HANDLE TokenHandle
2=PUNICODE_STRING Attributes
3=ULONG NumberOfAttributes
4=PTOKEN_SECURITY_ATTRIBUTES_INFORMATION Buffer
5=ULONG Length
6=PULONG ReturnLength
ParamCount=6
@=ZwQuerySecurityAttributesToken(HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION Buffer, ULONG Length, PULONG ReturnLength);
[ZwQuerySecurityObject]
1=HANDLE Handle
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR SecurityDescriptor
4=ULONG Length
5=PULONG LengthNeeded
ParamCount=5
@=ZwQuerySecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);
[ZwQuerySemaphore]
1=HANDLE SemaphoreHandle
2=SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass
3=PVOID SemaphoreInformation
4=ULONG SemaphoreInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQuerySemaphore(HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);
[ZwQuerySymbolicLinkObject]
1=HANDLE LinkHandle
2=PUNICODE_STRING LinkTarget
3=PULONG ReturnedLength
ParamCount=3
@=ZwQuerySymbolicLinkObject(HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);
[ZwQuerySystemEnvironmentValue]
1=PUNICODE_STRING VariableName
2=PWSTR VariableValue
3=USHORT ValueLength
4=PUSHORT ReturnLength
ParamCount=4
@=ZwQuerySystemEnvironmentValue(PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);
[ZwQuerySystemEnvironmentValueEx]
1=PUNICODE_STRING VariableName
2=LPGUID VendorGuid
3=PVOID Value
4=PULONG ValueLength
5=PULONG Attributes
ParamCount=5
@=ZwQuerySystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);
[ZwQuerySystemInformation]
1=SYSTEM_INFORMATION_CLASS SystemInformationClass
2=PVOID SystemInformation
3=ULONG SystemInformationLength
4=PULONG ReturnLength
ParamCount=4
@=ZwQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
[ZwQuerySystemInformationEx]
1=SYSTEM_INFORMATION_CLASS SystemInformationClass
2=PVOID InputBuffer
3=ULONG InputBufferLength
4=PVOID SystemInformation
5=ULONG SystemInformationLength
6=PULONG ReturnLength
ParamCount=6
@=ZwQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID InputBuffer, ULONG InputBufferLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
[ZwQuerySystemTime]
1=PLARGE_INTEGER SystemTime
ParamCount=1
@=ZwQuerySystemTime(PLARGE_INTEGER SystemTime);
[ZwQueryTimer]
1=HANDLE TimerHandle
2=TIMER_INFORMATION_CLASS TimerInformationClass
3=PVOID TimerInformation
4=ULONG TimerInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwQueryTimer(HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);
[ZwQueryTimerResolution]
1=PULONG MaximumTime
2=PULONG MinimumTime
3=PULONG CurrentTime
ParamCount=3
@=ZwQueryTimerResolution(PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);
[ZwQueryValueKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING ValueName
3=KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass
4=PVOID KeyValueInformation
5=ULONG Length
6=PULONG ResultLength
ParamCount=6
@=ZwQueryValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
[ZwQueryVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=MEMORY_INFORMATION_CLASS MemoryInformationClass
4=PVOID MemoryInformation
5=SIZE_T MemoryInformationLength
6=PSIZE_T ReturnLength
ParamCount=6
@=ZwQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);
[ZwQueryVolumeInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FsInformation
4=ULONG Length
5=FS_INFORMATION_CLASS FsInformationClass
ParamCount=5
@=ZwQueryVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
[ZwQueryWnfStateData]
1=PCWNF_STATE_NAME StateName
2=PCWNF_TYPE_ID TypeId
3=VOID *ExplicitScope
4=PWNF_CHANGE_STAMP ChangeStamp
5=PVOID Buffer
6=PULONG BufferSize
ParamCount=6
@=ZwQueryWnfStateData(PCWNF_STATE_NAME StateName, PCWNF_TYPE_ID TypeId, VOID *ExplicitScope, PWNF_CHANGE_STAMP ChangeStamp, PVOID Buffer, PULONG BufferSize);
[ZwQueryWnfStateNameInformation]
1=PCWNF_STATE_NAME StateName
2=WNF_STATE_NAME_INFORMATION NameInfoClass
3=VOID *ExplicitScope
4=PVOID InfoBuffer
5=ULONG InfoBufferSize
ParamCount=5
@=ZwQueryWnfStateNameInformation(PCWNF_STATE_NAME StateName, WNF_STATE_NAME_INFORMATION NameInfoClass, VOID *ExplicitScope, PVOID InfoBuffer, ULONG InfoBufferSize);
[ZwQueueApcThread]
1=HANDLE ThreadHandle
2=PPS_APC_ROUTINE ApcRoutine
3=PVOID ApcArgument1
4=PVOID ApcArgument2
5=PVOID ApcArgument3
ParamCount=5
@=ZwQueueApcThread(HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
[ZwQueueApcThreadEx]
1=HANDLE ThreadHandle
2=HANDLE UserApcReserveHandle
3=PPS_APC_ROUTINE ApcRoutine
4=PVOID ApcArgument1
5=PVOID ApcArgument2
6=PVOID ApcArgument3
ParamCount=6
@=ZwQueueApcThreadEx(HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);
[ZwRaiseException]
1=PEXCEPTION_RECORD ExceptionRecord
2=PCONTEXT ContextRecord
3=BOOLEAN FirstChance
ParamCount=3
@=ZwRaiseException(PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);
[ZwRaiseHardError]
1=NTSTATUS ErrorStatus
2=ULONG NumberOfParameters
3=ULONG UnicodeStringParameterMask
4=PULONG_PTR Parameters
5=ULONG ValidResponseOptions
6=PULONG Response
ParamCount=6
@=ZwRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);
[ZwReadFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PVOID Buffer
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=ZwReadFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[ZwReadFileScatter]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PFILE_SEGMENT_ELEMENT SegmentArray
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=ZwReadFileScatter(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[ZwReadOnlyEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwReadOnlyEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwReadRequestData]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=ULONG DataEntryIndex
4=PVOID Buffer
5=SIZE_T BufferSize
6=PSIZE_T NumberOfBytesRead
ParamCount=6
@=ZwReadRequestData(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
[ZwReadVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=PVOID Buffer
4=SIZE_T BufferSize
5=PSIZE_T NumberOfBytesRead
ParamCount=5
@=ZwReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
[ZwRecoverEnlistment]
1=HANDLE EnlistmentHandle
2=PVOID EnlistmentKey
ParamCount=2
@=ZwRecoverEnlistment(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
[ZwRecoverResourceManager]
1=HANDLE ResourceManagerHandle
ParamCount=1
@=ZwRecoverResourceManager(HANDLE ResourceManagerHandle);
[ZwRecoverTransactionManager]
1=HANDLE TransactionManagerHandle
ParamCount=1
@=ZwRecoverTransactionManager(HANDLE TransactionManagerHandle);
[ZwRegisterProtocolAddressInformation]
1=HANDLE ResourceManager
2=PCRM_PROTOCOL_ID ProtocolId
3=ULONG ProtocolInformationSize
4=PVOID ProtocolInformation
5=ULONG CreateOptions
ParamCount=5
@=ZwRegisterProtocolAddressInformation(HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);
[ZwRegisterThreadTerminatePort]
1=HANDLE PortHandle
ParamCount=1
@=ZwRegisterThreadTerminatePort(HANDLE PortHandle);
[ZwReleaseKeyedEvent]
1=HANDLE KeyedEventHandle
2=PVOID KeyValue
3=BOOLEAN Alertable
4=PLARGE_INTEGER Timeout
ParamCount=4
@=ZwReleaseKeyedEvent(HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[ZwReleaseMutant]
1=HANDLE MutantHandle
2=PLONG PreviousCount
ParamCount=2
@=ZwReleaseMutant(HANDLE MutantHandle, PLONG PreviousCount);
[ZwReleaseSemaphore]
1=HANDLE SemaphoreHandle
2=LONG ReleaseCount
3=PLONG PreviousCount
ParamCount=3
@=ZwReleaseSemaphore(HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);
[ZwReleaseWorkerFactoryWorker]
1=HANDLE WorkerFactoryHandle
ParamCount=1
@=ZwReleaseWorkerFactoryWorker(HANDLE WorkerFactoryHandle);
[ZwRemoveIoCompletion]
1=HANDLE IoCompletionHandle
2=PVOID *KeyContext
3=PVOID *ApcContext
4=PIO_STATUS_BLOCK IoStatusBlock
5=PLARGE_INTEGER Timeout
ParamCount=5
@=ZwRemoveIoCompletion(HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);
[ZwRemoveIoCompletionEx]
1=HANDLE IoCompletionHandle
2=PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation
3=ULONG Count
4=PULONG NumEntriesRemoved
5=PLARGE_INTEGER Timeout
6=BOOLEAN Alertable
ParamCount=6
@=ZwRemoveIoCompletionEx(HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);
[ZwRemoveProcessDebug]
1=HANDLE ProcessHandle
2=HANDLE DebugObjectHandle
ParamCount=2
@=ZwRemoveProcessDebug(HANDLE ProcessHandle, HANDLE DebugObjectHandle);
[ZwRenameKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING NewName
ParamCount=2
@=ZwRenameKey(HANDLE KeyHandle, PUNICODE_STRING NewName);
[ZwRenameTransactionManager]
1=PUNICODE_STRING LogFileName
2=LPGUID ExistingTransactionManagerGuid
ParamCount=2
@=ZwRenameTransactionManager(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
[ZwReplaceKey]
1=POBJECT_ATTRIBUTES NewFile
2=HANDLE TargetHandle
3=POBJECT_ATTRIBUTES OldFile
ParamCount=3
@=ZwReplaceKey(POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);
[ZwReplacePartitionUnit]
1=PUNICODE_STRING TargetInstancePath
2=PUNICODE_STRING SpareInstancePath
3=ULONG Flags
ParamCount=3
@=ZwReplacePartitionUnit(PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);
[ZwReplyPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE ReplyMessage
ParamCount=2
@=ZwReplyPort(HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);
[ZwReplyWaitReceivePort]
1=HANDLE PortHandle
2=PVOID *PortContext
3=PPORT_MESSAGE ReplyMessage
4=PPORT_MESSAGE ReceiveMessage
ParamCount=4
@=ZwReplyWaitReceivePort(HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);
[ZwReplyWaitReceivePortEx]
1=HANDLE PortHandle
2=PVOID *PortContext
3=PPORT_MESSAGE ReplyMessage
4=PPORT_MESSAGE ReceiveMessage
5=PLARGE_INTEGER Timeout
ParamCount=5
@=ZwReplyWaitReceivePortEx(HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);
[ZwReplyWaitReplyPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE ReplyMessage
ParamCount=2
@=ZwReplyWaitReplyPort(HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);
[ZwRequestPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE RequestMessage
ParamCount=2
@=ZwRequestPort(HANDLE PortHandle, PPORT_MESSAGE RequestMessage);
[ZwRequestWaitReplyPort]
1=HANDLE PortHandle
2=PPORT_MESSAGE RequestMessage
3=PPORT_MESSAGE ReplyMessage
ParamCount=3
@=ZwRequestWaitReplyPort(HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);
[ZwResetEvent]
1=HANDLE EventHandle
2=PLONG PreviousState
ParamCount=2
@=ZwResetEvent(HANDLE EventHandle, PLONG PreviousState);
[ZwResetWriteWatch]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=SIZE_T RegionSize
ParamCount=3
@=ZwResetWriteWatch(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);
[ZwRestoreKey]
1=HANDLE KeyHandle
2=HANDLE FileHandle
3=ULONG Flags
ParamCount=3
@=ZwRestoreKey(HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);
[ZwResumeProcess]
1=HANDLE ProcessHandle
ParamCount=1
@=ZwResumeProcess(HANDLE ProcessHandle);
[ZwResumeThread]
1=HANDLE ThreadHandle
2=PULONG PreviousSuspendCount
ParamCount=2
@=ZwResumeThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
[ZwRevertContainerImpersonation]
ParamCount=0
@=ZwRevertContainerImpersonation();
[ZwRollbackComplete]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwRollbackComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwRollbackEnlistment]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwRollbackEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwRollbackTransaction]
1=HANDLE TransactionHandle
2=BOOLEAN Wait
ParamCount=2
@=ZwRollbackTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
[ZwRollforwardTransactionManager]
1=HANDLE TransactionManagerHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwRollforwardTransactionManager(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
[ZwSaveKey]
1=HANDLE KeyHandle
2=HANDLE FileHandle
ParamCount=2
@=ZwSaveKey(HANDLE KeyHandle, HANDLE FileHandle);
[ZwSaveKeyEx]
1=HANDLE KeyHandle
2=HANDLE FileHandle
3=ULONG Format
ParamCount=3
@=ZwSaveKeyEx(HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);
[ZwSaveMergedKeys]
1=HANDLE HighPrecedenceKeyHandle
2=HANDLE LowPrecedenceKeyHandle
3=HANDLE FileHandle
ParamCount=3
@=ZwSaveMergedKeys(HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);
[ZwSecureConnectPort]
1=PHANDLE PortHandle
2=PUNICODE_STRING PortName
3=PSECURITY_QUALITY_OF_SERVICE SecurityQos
4=PPORT_VIEW ClientView
5=PSID RequiredServerSid
6=PREMOTE_PORT_VIEW ServerView
7=PULONG MaxMessageLength
8=PVOID ConnectionInformation
9=PULONG ConnectionInformationLength
ParamCount=9
@=ZwSecureConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
[ZwSerializeBoot]
ParamCount=0
@=ZwSerializeBoot();
[ZwSetBootEntryOrder]
1=PULONG Ids
2=ULONG Count
ParamCount=2
@=ZwSetBootEntryOrder(PULONG Ids, ULONG Count);
[ZwSetBootOptions]
1=PBOOT_OPTIONS BootOptions
2=ULONG FieldsToChange
ParamCount=2
@=ZwSetBootOptions(PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);
[ZwSetCachedSigningLevel]
1=ULONG Flags
2=SE_SIGNING_LEVEL InputSigningLevel
3=PHANDLE SourceFiles
4=ULONG SourceFileCount
5=HANDLE TargetFile
ParamCount=5
@=ZwSetCachedSigningLevel(ULONG Flags, SE_SIGNING_LEVEL InputSigningLevel, PHANDLE SourceFiles, ULONG SourceFileCount, HANDLE TargetFile);
[ZwSetContextThread]
1=HANDLE ThreadHandle
2=PCONTEXT ThreadContext
ParamCount=2
@=ZwSetContextThread(HANDLE ThreadHandle, PCONTEXT ThreadContext);
[ZwSetDebugFilterState]
1=ULONG ComponentId
2=ULONG Level
3=BOOLEAN State
ParamCount=3
@=ZwSetDebugFilterState(ULONG ComponentId, ULONG Level, BOOLEAN State);
[ZwSetDefaultHardErrorPort]
1=HANDLE DefaultHardErrorPort
ParamCount=1
@=ZwSetDefaultHardErrorPort(HANDLE DefaultHardErrorPort);
[ZwSetDefaultLocale]
1=BOOLEAN UserProfile
2=LCID DefaultLocaleId
ParamCount=2
@=ZwSetDefaultLocale(BOOLEAN UserProfile, LCID DefaultLocaleId);
[ZwSetDefaultUILanguage]
1=LANGID DefaultUILanguageId
ParamCount=1
@=ZwSetDefaultUILanguage(LANGID DefaultUILanguageId);
[ZwSetDriverEntryOrder]
1=PULONG Ids
2=ULONG Count
ParamCount=2
@=ZwSetDriverEntryOrder(PULONG Ids, ULONG Count);
[ZwSetEaFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
ParamCount=4
@=ZwSetEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
[ZwSetEvent]
1=HANDLE EventHandle
2=PLONG PreviousState
ParamCount=2
@=ZwSetEvent(HANDLE EventHandle, PLONG PreviousState);
[ZwSetEventBoostPriority]
1=HANDLE EventHandle
ParamCount=1
@=ZwSetEventBoostPriority(HANDLE EventHandle);
[ZwSetHighEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=ZwSetHighEventPair(HANDLE EventPairHandle);
[ZwSetHighWaitLowEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=ZwSetHighWaitLowEventPair(HANDLE EventPairHandle);
[ZwSetInformationDebugObject]
1=HANDLE DebugObjectHandle
2=DEBUGOBJECTINFOCLASS DebugObjectInformationClass
3=PVOID DebugInformation
4=ULONG DebugInformationLength
5=PULONG ReturnLength
ParamCount=5
@=ZwSetInformationDebugObject(HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);
[ZwSetInformationEnlistment]
1=HANDLE EnlistmentHandle
2=ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass
3=PVOID EnlistmentInformation
4=ULONG EnlistmentInformationLength
ParamCount=4
@=ZwSetInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
[ZwSetInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FileInformation
4=ULONG Length
5=FILE_INFORMATION_CLASS FileInformationClass
ParamCount=5
@=ZwSetInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
[ZwSetInformationJobObject]
1=HANDLE JobHandle
2=JOBOBJECTINFOCLASS JobObjectInformationClass
3=PVOID JobObjectInformation
4=ULONG JobObjectInformationLength
ParamCount=4
@=ZwSetInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);
[ZwSetInformationKey]
1=HANDLE KeyHandle
2=KEY_SET_INFORMATION_CLASS KeySetInformationClass
3=PVOID KeySetInformation
4=ULONG KeySetInformationLength
ParamCount=4
@=ZwSetInformationKey(HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);
[ZwSetInformationObject]
1=HANDLE Handle
2=OBJECT_INFORMATION_CLASS ObjectInformationClass
3=PVOID ObjectInformation
4=ULONG ObjectInformationLength
ParamCount=4
@=ZwSetInformationObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);
[ZwSetInformationProcess]
1=HANDLE ProcessHandle
2=PROCESSINFOCLASS ProcessInformationClass
3=PVOID ProcessInformation
4=ULONG ProcessInformationLength
ParamCount=4
@=ZwSetInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);
[ZwSetInformationResourceManager]
1=HANDLE ResourceManagerHandle
2=RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass
3=PVOID ResourceManagerInformation
4=ULONG ResourceManagerInformationLength
ParamCount=4
@=ZwSetInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
[ZwSetInformationThread]
1=HANDLE ThreadHandle
2=THREADINFOCLASS ThreadInformationClass
3=PVOID ThreadInformation
4=ULONG ThreadInformationLength
ParamCount=4
@=ZwSetInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);
[ZwSetInformationToken]
1=HANDLE TokenHandle
2=TOKEN_INFORMATION_CLASS TokenInformationClass
3=PVOID TokenInformation
4=ULONG TokenInformationLength
ParamCount=4
@=ZwSetInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);
[ZwSetInformationTransaction]
1=HANDLE TransactionHandle
2=TRANSACTION_INFORMATION_CLASS TransactionInformationClass
3=PVOID TransactionInformation
4=ULONG TransactionInformationLength
ParamCount=4
@=ZwSetInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
[ZwSetInformationTransactionManager]
1=HANDLE TmHandle
2=TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass
3=PVOID TransactionManagerInformation
4=ULONG TransactionManagerInformationLength
ParamCount=4
@=ZwSetInformationTransactionManager(HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);
[ZwSetInformationVirtualMemory]
1=HANDLE ProcessHandle
2=VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass
3=ULONG_PTR NumberOfEntries
4=PMEMORY_RANGE_ENTRY VirtualAddresses
5=PVOID VmInformation
6=ULONG VmInformationLength
ParamCount=6
@=ZwSetInformationVirtualMemory(HANDLE ProcessHandle, VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass, ULONG_PTR NumberOfEntries, PMEMORY_RANGE_ENTRY VirtualAddresses, PVOID VmInformation, ULONG VmInformationLength);
[ZwSetInformationWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=WORKERFACTORYINFOCLASS WorkerFactoryInformationClass
3=PVOID WorkerFactoryInformation
4=ULONG WorkerFactoryInformationLength
ParamCount=4
@=ZwSetInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);
[ZwSetIntervalProfile]
1=ULONG Interval
2=KPROFILE_SOURCE Source
ParamCount=2
@=ZwSetIntervalProfile(ULONG Interval, KPROFILE_SOURCE Source);
[ZwSetIoCompletion]
1=HANDLE IoCompletionHandle
2=PVOID KeyContext
3=PVOID ApcContext
4=NTSTATUS IoStatus
5=ULONG_PTR IoStatusInformation
ParamCount=5
@=ZwSetIoCompletion(HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);
[ZwSetIoCompletionEx]
1=HANDLE IoCompletionHandle
2=HANDLE IoCompletionPacketHandle
3=PVOID KeyContext
4=PVOID ApcContext
5=NTSTATUS IoStatus
6=ULONG_PTR IoStatusInformation
ParamCount=6
@=ZwSetIoCompletionEx(HANDLE IoCompletionHandle, HANDLE IoCompletionPacketHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);
[ZwSetIRTimer]
1=HANDLE TimerHandle
2=PLARGE_INTEGER DueTime
ParamCount=2
@=ZwSetIRTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime);
[ZwSetLdtEntries]
1=ULONG Selector0
2=ULONG Entry0Low
3=ULONG Entry0Hi
4=ULONG Selector1
5=ULONG Entry1Low
6=ULONG Entry1Hi
ParamCount=6
@=ZwSetLdtEntries(ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);
[ZwSetLowEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=ZwSetLowEventPair(HANDLE EventPairHandle);
[ZwSetLowWaitHighEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=ZwSetLowWaitHighEventPair(HANDLE EventPairHandle);
[ZwSetQuotaInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID Buffer
4=ULONG Length
ParamCount=4
@=ZwSetQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
[ZwSetSecurityObject]
1=HANDLE Handle
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=3
@=ZwSetSecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
[ZwSetSystemEnvironmentValue]
1=PUNICODE_STRING VariableName
2=PUNICODE_STRING VariableValue
ParamCount=2
@=ZwSetSystemEnvironmentValue(PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);
[ZwSetSystemEnvironmentValueEx]
1=PUNICODE_STRING VariableName
2=LPGUID VendorGuid
3=PVOID Value
4=ULONG ValueLength
5=ULONG Attributes
ParamCount=5
@=ZwSetSystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);
[ZwSetSystemInformation]
1=SYSTEM_INFORMATION_CLASS SystemInformationClass
2=PVOID SystemInformation
3=ULONG SystemInformationLength
ParamCount=3
@=ZwSetSystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);
[ZwSetSystemPowerState]
1=POWER_ACTION SystemAction
2=SYSTEM_POWER_STATE LightestSystemState
3=ULONG Flags
ParamCount=3
@=ZwSetSystemPowerState(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags);
[ZwSetSystemTime]
1=PLARGE_INTEGER SystemTime
2=PLARGE_INTEGER PreviousTime
ParamCount=2
@=ZwSetSystemTime(PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);
[ZwSetThreadExecutionState]
1=EXECUTION_STATE NewFlags
2=EXECUTION_STATE *PreviousFlags
ParamCount=2
@=ZwSetThreadExecutionState(EXECUTION_STATE NewFlags, EXECUTION_STATE *PreviousFlags);
[ZwSetTimer]
1=HANDLE TimerHandle
2=PLARGE_INTEGER DueTime
3=PTIMER_APC_ROUTINE TimerApcRoutine
4=PVOID TimerContext
5=BOOLEAN ResumeTimer
6=LONG Period
7=PBOOLEAN PreviousState
ParamCount=7
@=ZwSetTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN ResumeTimer, LONG Period, PBOOLEAN PreviousState);
[ZwSetTimer2]
1=HANDLE TimerHandle
2=PLARGE_INTEGER DueTime
3=PLARGE_INTEGER Period
4=PT2_SET_PARAMETERS Parameters
ParamCount=4
@=ZwSetTimer2(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PLARGE_INTEGER Period, PT2_SET_PARAMETERS Parameters);
[ZwSetTimerEx]
1=HANDLE TimerHandle
2=TIMER_SET_INFORMATION_CLASS TimerSetInformationClass
3=PVOID TimerSetInformation
4=ULONG TimerSetInformationLength
ParamCount=4
@=ZwSetTimerEx(HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);
[ZwSetTimerResolution]
1=ULONG DesiredTime
2=BOOLEAN SetResolution
3=PULONG ActualTime
ParamCount=3
@=ZwSetTimerResolution(ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);
[ZwSetUuidSeed]
1=PCHAR Seed
ParamCount=1
@=ZwSetUuidSeed(PCHAR Seed);
[ZwSetValueKey]
1=HANDLE KeyHandle
2=PUNICODE_STRING ValueName
3=ULONG TitleIndex
4=ULONG Type
5=PVOID Data
6=ULONG DataSize
ParamCount=6
@=ZwSetValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);
[ZwSetVolumeInformationFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PVOID FsInformation
4=ULONG Length
5=FS_INFORMATION_CLASS FsInformationClass
ParamCount=5
@=ZwSetVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
[ZwSetWnfProcessNotificationEvent]
1=HANDLE NotificationEvent
ParamCount=1
@=ZwSetWnfProcessNotificationEvent(HANDLE NotificationEvent);
[ZwShutdownSystem]
1=SHUTDOWN_ACTION Action
ParamCount=1
@=ZwShutdownSystem(SHUTDOWN_ACTION Action);
[ZwShutdownWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=LONG *PendingWorkerCount
ParamCount=2
@=ZwShutdownWorkerFactory(HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);
[ZwSignalAndWaitForSingleObject]
1=HANDLE SignalHandle
2=HANDLE WaitHandle
3=BOOLEAN Alertable
4=PLARGE_INTEGER Timeout
ParamCount=4
@=ZwSignalAndWaitForSingleObject(HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[ZwSinglePhaseReject]
1=HANDLE EnlistmentHandle
2=PLARGE_INTEGER TmVirtualClock
ParamCount=2
@=ZwSinglePhaseReject(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
[ZwStartProfile]
1=HANDLE ProfileHandle
ParamCount=1
@=ZwStartProfile(HANDLE ProfileHandle);
[ZwStopProfile]
1=HANDLE ProfileHandle
ParamCount=1
@=ZwStopProfile(HANDLE ProfileHandle);
[ZwSubscribeWnfStateChange]
1=PCWNF_STATE_NAME StateName
2=WNF_CHANGE_STAMP ChangeStamp
3=ULONG EventMask
4=PULONG64 SubscriptionId
ParamCount=4
@=ZwSubscribeWnfStateChange(PCWNF_STATE_NAME StateName, WNF_CHANGE_STAMP ChangeStamp, ULONG EventMask, PULONG64 SubscriptionId);
[ZwSuspendProcess]
1=HANDLE ProcessHandle
ParamCount=1
@=ZwSuspendProcess(HANDLE ProcessHandle);
[ZwSuspendThread]
1=HANDLE ThreadHandle
2=PULONG PreviousSuspendCount
ParamCount=2
@=ZwSuspendThread(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
[ZwSystemDebugControl]
1=SYSDBG_COMMAND Command
2=PVOID InputBuffer
3=ULONG InputBufferLength
4=PVOID OutputBuffer
5=ULONG OutputBufferLength
6=PULONG ReturnLength
ParamCount=6
@=ZwSystemDebugControl(SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);
[ZwTerminateJobObject]
1=HANDLE JobHandle
2=NTSTATUS ExitStatus
ParamCount=2
@=ZwTerminateJobObject(HANDLE JobHandle, NTSTATUS ExitStatus);
[ZwTerminateProcess]
1=HANDLE ProcessHandle
2=NTSTATUS ExitStatus
ParamCount=2
@=ZwTerminateProcess(HANDLE ProcessHandle, NTSTATUS ExitStatus);
[ZwTerminateThread]
1=HANDLE ThreadHandle
2=NTSTATUS ExitStatus
ParamCount=2
@=ZwTerminateThread(HANDLE ThreadHandle, NTSTATUS ExitStatus);
[ZwTestAlert]
ParamCount=0
@=ZwTestAlert();
[ZwThawRegistry]
ParamCount=0
@=ZwThawRegistry();
[ZwThawTransactions]
ParamCount=0
@=ZwThawTransactions();
[ZwTraceControl]
1=ULONG FunctionCode
2=PVOID InBuffer
3=ULONG InBufferLen
4=PVOID OutBuffer
5=ULONG OutBufferLen
6=PULONG ReturnLength
ParamCount=6
@=ZwTraceControl(ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);
[ZwTraceEvent]
1=HANDLE TraceHandle
2=ULONG Flags
3=ULONG FieldSize
4=PVOID Fields
ParamCount=4
@=ZwTraceEvent(HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);
[ZwTranslateFilePath]
1=PFILE_PATH InputFilePath
2=ULONG OutputType
3=PFILE_PATH OutputFilePath
4=PULONG OutputFilePathLength
ParamCount=4
@=ZwTranslateFilePath(PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);
[ZwUmsThreadYield]
1=PVOID SchedulerParam
ParamCount=1
@=ZwUmsThreadYield(PVOID SchedulerParam);
[ZwUnloadDriver]
1=PUNICODE_STRING DriverServiceName
ParamCount=1
@=ZwUnloadDriver(PUNICODE_STRING DriverServiceName);
[ZwUnloadKey]
1=POBJECT_ATTRIBUTES TargetKey
ParamCount=1
@=ZwUnloadKey(POBJECT_ATTRIBUTES TargetKey);
[ZwUnloadKey2]
1=POBJECT_ATTRIBUTES TargetKey
2=ULONG Flags
ParamCount=2
@=ZwUnloadKey2(POBJECT_ATTRIBUTES TargetKey, ULONG Flags);
[ZwUnloadKeyEx]
1=POBJECT_ATTRIBUTES TargetKey
2=HANDLE Event
ParamCount=2
@=ZwUnloadKeyEx(POBJECT_ATTRIBUTES TargetKey, HANDLE Event);
[ZwUnlockFile]
1=HANDLE FileHandle
2=PIO_STATUS_BLOCK IoStatusBlock
3=PLARGE_INTEGER ByteOffset
4=PLARGE_INTEGER Length
5=ULONG Key
ParamCount=5
@=ZwUnlockFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);
[ZwUnlockVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID *BaseAddress
3=PSIZE_T RegionSize
4=ULONG MapType
ParamCount=4
@=ZwUnlockVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);
[ZwUnmapViewOfSection]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
ParamCount=2
@=ZwUnmapViewOfSection(HANDLE ProcessHandle, PVOID BaseAddress);
[ZwUnmapViewOfSectionEx]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=ULONG Flags
ParamCount=3
@=ZwUnmapViewOfSectionEx(HANDLE ProcessHandle, PVOID BaseAddress, ULONG Flags);
[ZwUnsubscribeWnfStateChange]
1=PCWNF_STATE_NAME StateName
ParamCount=1
@=ZwUnsubscribeWnfStateChange(PCWNF_STATE_NAME StateName);
[ZwUpdateWnfStateData]
1=PCWNF_STATE_NAME StateName
2=VOID *Buffer
3=ULONG Length
4=PCWNF_TYPE_ID TypeId
5=VOID *ExplicitScope
6=WNF_CHANGE_STAMP MatchingChangeStamp
7=LOGICAL CheckStamp
ParamCount=7
@=ZwUpdateWnfStateData(PCWNF_STATE_NAME StateName, VOID *Buffer, ULONG Length, PCWNF_TYPE_ID TypeId, VOID *ExplicitScope, WNF_CHANGE_STAMP MatchingChangeStamp, LOGICAL CheckStamp);
[ZwVdmControl]
1=VDMSERVICECLASS Service
2=PVOID ServiceData
ParamCount=2
@=ZwVdmControl(VDMSERVICECLASS Service, PVOID ServiceData);
[ZwWaitForAlertByThreadId]
1=PVOID Address
2=PLARGE_INTEGER Timeout
ParamCount=2
@=ZwWaitForAlertByThreadId(PVOID Address, PLARGE_INTEGER Timeout);
[ZwWaitForDebugEvent]
1=HANDLE DebugObjectHandle
2=BOOLEAN Alertable
3=PLARGE_INTEGER Timeout
4=PVOID WaitStateChange
ParamCount=4
@=ZwWaitForDebugEvent(HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PVOID WaitStateChange);
[ZwWaitForKeyedEvent]
1=HANDLE KeyedEventHandle
2=PVOID KeyValue
3=BOOLEAN Alertable
4=PLARGE_INTEGER Timeout
ParamCount=4
@=ZwWaitForKeyedEvent(HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[ZwWaitForMultipleObjects]
1=ULONG Count
2=HANDLE Handles[]
3=WAIT_TYPE WaitType
4=BOOLEAN Alertable
5=PLARGE_INTEGER Timeout
ParamCount=5
@=ZwWaitForMultipleObjects(ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[ZwWaitForMultipleObjects32]
1=ULONG Count
2=LONG Handles[]
3=WAIT_TYPE WaitType
4=BOOLEAN Alertable
5=PLARGE_INTEGER Timeout
ParamCount=5
@=ZwWaitForMultipleObjects32(ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[ZwWaitForSingleObject]
1=HANDLE Handle
2=BOOLEAN Alertable
3=PLARGE_INTEGER Timeout
ParamCount=3
@=ZwWaitForSingleObject(HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
[ZwWaitForWorkViaWorkerFactory]
1=HANDLE WorkerFactoryHandle
2=_FILE_IO_COMPLETION_INFORMATION *MiniPacket
ParamCount=2
@=ZwWaitForWorkViaWorkerFactory(HANDLE WorkerFactoryHandle, _FILE_IO_COMPLETION_INFORMATION *MiniPacket);
[ZwWaitHighEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=ZwWaitHighEventPair(HANDLE EventPairHandle);
[ZwWaitLowEventPair]
1=HANDLE EventPairHandle
ParamCount=1
@=ZwWaitLowEventPair(HANDLE EventPairHandle);
[ZwWorkerFactoryWorkerReady]
1=HANDLE WorkerFactoryHandle
ParamCount=1
@=ZwWorkerFactoryWorkerReady(HANDLE WorkerFactoryHandle);
[ZwWriteFile]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PVOID Buffer
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=ZwWriteFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[ZwWriteFileGather]
1=HANDLE FileHandle
2=HANDLE Event
3=PIO_APC_ROUTINE ApcRoutine
4=PVOID ApcContext
5=PIO_STATUS_BLOCK IoStatusBlock
6=PFILE_SEGMENT_ELEMENT SegmentArray
7=ULONG Length
8=PLARGE_INTEGER ByteOffset
9=PULONG Key
ParamCount=9
@=ZwWriteFileGather(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
[ZwWriteRequestData]
1=HANDLE PortHandle
2=PPORT_MESSAGE Message
3=ULONG DataEntryIndex
4=PVOID Buffer
5=SIZE_T BufferSize
6=PSIZE_T NumberOfBytesWritten
ParamCount=6
@=ZwWriteRequestData(HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);
[ZwWriteVirtualMemory]
1=HANDLE ProcessHandle
2=PVOID BaseAddress
3=PVOID Buffer
4=SIZE_T BufferSize
5=PSIZE_T NumberOfBytesWritten
ParamCount=5
@=ZwWriteVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);
[ZwYieldExecution]
ParamCount=0
@=ZwYieldExecution();
